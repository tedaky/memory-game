{"version":3,"sources":["./src/utilities/make-property.ts","./src/settings/settings.service.ts","./src/game/game.service.ts","./src/check-for-update/check-for-update.service.ts","./src/create-time/create-time.ts","./src/environments/environment.ts","./src/analytics/analytics.service.ts","./src/fade-animation/fade-animation.ts","./src/setting/setting.ts","./src/database/database.service.ts","./src/leaderboard/leaderboard.service.ts","./src/utilities/make-array.ts","./src/route-location/route-location.ts","./src/utilities/is-null-or-undefined.ts","./src/utilities/is-null.ts","./src/utilities/is-undefined.ts","./src/check-for-update/check-for-update.component.ts","./src/check-for-update/check-for-update.component.html","./src/high-scores/high-scores.service.ts","./src/time/time.ts","./src/device-size/device-size.ts","./src/install/install.component.html","./src/install/install.component.ts","./src/device/device.service.ts","./src/statistic/statistic.ts","./src/language/language.service.ts","./src/root/root.worker.ts","./src/card/card.ts","./src/holiday/holiday.ts","./src/cards/cards.service.ts","./src/translate-loader/translate-browser.loader.ts","./src/background/background.service.ts","./src/material/material.module.ts","./src/score/score.ts","./src/recent-scores/recent-scores.service.ts","./src/theme/theme.service.ts","./src/menu-button/menu-button.ts","./src/main-menu/main-menu.component.html","./src/main-menu/main-menu.component.ts","./src/root/root.component.ts","./src/root/root.component.html","./src/can-deactivate-game/can-deactivate-game.guard.ts","./src/redirect/redirect.ts","./src/route/route.guard.ts","./src/root-routing/root-routing.module.ts","./src/root/root.module.ts","./src/main.ts","./$_lazy_route_resource lazy namespace object"],"names":["MakeProperty","Model","base","target","key","backingField","setter","getter","Object","defineProperty","writable","enumerable","configurable","primitiveGetter","this","newVal","Array","isArray","get","set","SettingsService","platformId","database","game","storeName","getSettings","_settings","count","console","error","getAll","then","val","forEach","item","addSetting","next","value","catch","message","window","requestAnimationFrame","setting","settings","push","name","Promise","resolve","reject","found","findIndex","ready","add","objectStore","request","toJSON","transaction","put","onsuccess","event","result","onerror","DOMException","map","GameService","httpClient","match","mode","playing","masterVolume","effectsVolume","ambientVolume","responseType","pipe","subscribe","res","CheckForUpdateService","appRef","snackBar","update","production","isEnabled","available","activated","timer","notify","previous","current","reload","activateUpdate","document","location","checkForUpdate","e","log","appData","hash","updateAvailable","openFromComponent","panelClass","onAction","appIsStable$","everySixHours$","everySixHoursOnceAppIsStable$","isStable","createTime","time","milliseconds","seconds","minutes","hours","environment","AnalyticsService","dataLayer","arguments","fadeAnimation","opacity","optional","Setting","arg1","arg2","arg3","keyID","temp","DatabaseService","openDatabase","version","open","objectStoreNames","contains","warn","createObjectStore","keyPath","autoIncrement","self","indexedDB","close","onblocked","onversionchange","event1","onclose","onupgradeneeded","newVersion","request1","promises","completeCase3vCase4","resolve1","reject1","addEventListener","request2","promises1","promise","resolve2","reject2","json","statistic","complete","memory","event2","all","updateCase3vCase4","oldVersion","names","reduce","pv","cv","index","group","index1","LeaderboardService","analytics","super","MakeArray","splice","length","RouteLoction","isNullOrUndefined","arg","isNull","undefined","isUndefined","CheckForUpdateComponent","snack","dismissWithAction","dismiss","HighScoresService","Time","arg4","DeviceSize","height","width","InstallComponent","test","navigator","platform","maxTouchPoints","userAgent","withAction","DeviceService","active","BehaviorSubject","deviceScreen","beforeunload","createActiveListener","createResizeListener","emitResizeFirst","install","localStorage","removeItem","emit","screen","deferredPrompt","preventDefault","prompt","Statistic","arg5","arg6","arg7","arg8","arg9","arg10","arg11","arg12","arg13","flips","LanguageService","translate","lang","getDefaultLang","supported","title","description","html","documentElement","querySelector","innerText","content","href","module","exports","week","Card","image","CardsService","createDeck","blankSource","card","cards","holidayCards","today","valentinesDay","Date","getFullYear","getTime","useValentinesDay","createValentinesDayCards","stPatricksDay","useStPatricksDay","createStPatricksDayCards","easter","year","C","G","H","I","J","L","day","f","month","Math","floor","getEaster","useEaster","createEasterCards","july4th","use4thOfJuly","create4thOfJulyCards","halloween","useHalloween","createHalloweenCards","thanksgiving","lastOfNov","thanksgivingDay","getDay","getThanksgiving","useThanksgiving","createThanksgivingCards","christmas","useChristmas","createChristmasCards","createRegularCards","assets","createCard","deck","createCards","shuffleCards","slice","i","sort","random","flipped","blank","white","ROUTE_TOKEN","translateModuleOptions","extend","isolate","loader","provide","useFactory","route","deps","missingTranslationHandler","useClass","subscriber","fetcher","getTranslation","use","unsubscribe","params","translateService","currentLang","defaultLang","getBrowserLang","useDefaultLang","BackgroundService","device","highScores","leaderboard","recentScores","webWorker","Worker","worker","onmessage","data","postMessage","MaterialModule","Score","dataChange","getScores","_scores","scores","filter","score","a","b","aTime","bTime","aWeight","bWeight","compare","addScoreStatistic","gameState","shouldAdd","getScoresBy","gameStateWeight","statisticWeight","gtag","isHighScore","clearScores","clear","delete","RecentScoresService","unshift","ThemeService","theme","colour","MenuButton","icon","label","MainMenuComponent","language","sub","lan","menuButtons","Game","HighScores","RecentScores","Settings","x","y","ripple","launch","persistent","animation","enterDuration","exitDuration","fadeOut","routerLinkActive","isActive","setTheme","clientX","clientY","element","getClientRects","launchRipple","Subscription","RootComponent","background","outlet","isActivated","activatedRoute","scrollPosition","parseInt","getItem","contentWrapper","nativeElement","scrollTop","setItem","toString","scroll","CanDeactivateGameGuard","keys","duration","redirect","substring","RouteGuard","router","includes","segments","fullPath","getCurrentNavigation","finalUrl","root","children","primary","path","navigate","setLang","routes","pathMatch","redirectTo","canActivate","canDeactivate","loadChildren","m","GameModule","HighScoresModule","LeaderboardModule","Leaderboard","RecentScoresModule","SettingsModule","RootRoutingModule","forRoot","RootModule","setDefaultLang","setTranslation","onLangChange","setBrowser","translations","TITLE","DESCRIPTION","useValue","withServerTransition","appId","register","enabled","moduleRef","comRef","injector","components","webpackEmptyAsyncContext","req","Error","code","id"],"mappings":"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","file":"main.f7509cb5d28c8f30dfc5.js","sourcesContent":["import { Constructor } from './constructor'\nimport { isNullOrUndefined } from './is-null-or-undefined'\n\n/**\n * Decorator Function for creating class property get and set for primitive types.\n *\n * ### Example:\n *\n * ```ts\n * export class MyClass {\n *   ＠MakeGetSet<MyClass, string>()\n *   public myProperty: string\n * }\n * ```\n *\n * ### Same as:\n *\n * ```ts\n * export class MyClass {\n *   private _myProperty: string\n *   public get myProperty(): string {\n *     return this._myProperty\n *   }\n *   public set myProperty(val: string) {\n *     this._myProperty = val\n *   }\n * }\n * ```\n */\nexport function MakeProperty<T, S>(): (target: T, key: string) => void\n/**\n * Decorator Function for creating class property get and set for `Model` types.\n *\n * Your `Model` should be able to handle zero or more constructor arguments.\n *\n * ### Example:\n *\n * ```ts\n * export class MyModel {\n *   prop1: string\n *   prop2: number\n *   constructor(arg1?: string, arg2?: number) {\n *     this.prop1 = arg1\n *     this.prop2 = arg2\n *   }\n * }\n * export class MyClass {\n *   ＠MakeGetSet<MyClass, MyModel>(MyModel)\n *   public myProperty: MyModel\n * }\n * ```\n *\n * ### Same as:\n *\n * ```ts\n * import { isNullOrUndefined } from '../utilities/is-null-or-undefined'\n * export class MyModel {\n *   prop1: string\n *   prop2: number\n *   constructor(arg1?: string, arg2?: number) {\n *     this.prop1 = arg1\n *     this.prop2 = arg2\n *   }\n * }\n * export class MyClass {\n *   private _myProperty: MyModel\n *   public get myProperty(): MyModel {\n *     if (isNullOrUndefined(this._myProperty)) {\n *       this.myProperty = null\n *     }\n *     return this._myProperty\n *   }\n *   public set myProperty(val: MyModel) {\n *     if (val instanceof MyModel) {\n *       this._myProperty = val\n *     } else if (Array.isArray(val)) {\n *       this._myProperty = new MyModel(...val)\n *     } else if (isNullOrUndefined(val)) {\n *       this._myProperty = new MyModel()\n *     } else {\n *       this._myProperty = new MyModel(val)\n *     }\n *   }\n * }\n * ```\n *\n * @param Model `S` - `Get` will return `Model`; `Set` will assign `Model`\n */\nexport function MakeProperty<T, S>(\n  Model: Constructor<S>\n): (target: T, key: string) => void\n/**\n * Decorator Function for creating class property get and set for primitive types.\n *\n * ### Example:\n *\n * ```ts\n * export class MyClass {\n *   ＠MakeGetSet<MyClass, string>(null, 'default')\n *   public myProperty: string\n * }\n * ```\n *\n * ### Same as:\n *\n * ```ts\n * import { isNullOrUndefined } from '../utilities/is-null-or-undefined'\n * export class MyClass {\n *   private _myProperty: string\n *   public get myProperty(): string {\n *     if (isNullOrUndefined(this._myProperty)) {\n *       this.myProperty = 'default'\n *     }\n *     return this._myProperty\n *   }\n *   public set myProperty(val: string) {\n *     this._myProperty = val\n *   }\n * }\n * ```\n *\n * @param Model is `null` to indicate primitives\n * @param base `any` default value for `get`\n */\nexport function MakeProperty<T, S>(\n  Model: null,\n  base: any\n): (target: T, key: string) => void\n/**\n * Decorator Function for creating class property get and set for `Model` types.\n *\n * Your `Model` should be able to handle zero or more constructor arguments.\n *\n * ### Example:\n *\n * ```ts\n * export class MyModel {\n *   prop1: string\n *   prop2: number\n *   constructor(arg1?: string, arg2?: number) {\n *     this.prop1 = arg1\n *     this.prop2 = arg2\n *   }\n * }\n * export class MyClass {\n *   ＠MakeGetSet<MyClass, MyModel>(MyModel, ['default', 10])\n *   public myProperty: MyModel\n * }\n * ```\n *\n * ### Same as:\n *\n * ```ts\n * import { isNullOrUndefined } from '../utilities/is-null-or-undefined'\n * export class MyModel {\n *   prop1: string\n *   prop2: number\n *   constructor(arg1?: string, arg2?: number) {\n *     this.prop1 = arg1\n *     this.prop2 = arg2\n *   }\n * }\n * export class MyClass {\n *   private _myProperty: MyModel\n *   public get myProperty(): MyModel {\n *     if (isNullOrUndefined(this._myProperty)) {\n *       this.myProperty = ['default', 10] // or\n *       this.myProperty = new MyModel('default', 10)\n *     }\n *     return this._myProperty\n *   }\n *   public set myProperty(val: MyModel) {\n *     if (val instanceof MyModel) {\n *       this._myProperty = val\n *     } else if (Array.isArray(val)) {\n *       this._myProperty = new MyModel(...val)\n *     } else if (isNullOrUndefined(val)) {\n *       this._myProperty = new MyModel()\n *     } else {\n *       this._myProperty = new MyModel(val)\n *     }\n *   }\n * }\n * ```\n *\n * @param Model `S` - `Get` will return `Model`; `Set` will assign `Model`\n * @param base `any` default value for `get`\n */\nexport function MakeProperty<T, S>(\n  Model: Constructor<S>,\n  base: any\n): (target: T, key: string) => void\n\nexport function MakeProperty<T, S>(\n  Model?: Constructor<S> | null,\n  base?: any\n): (target: T, key: string) => void {\n  return (target: T, key: string): void => {\n    //#region Create Writable\n    let backingField: string\n\n    backingField = '_' + key\n\n    Object.defineProperty(target, backingField, {\n      writable: true,\n      enumerable: true,\n      configurable: true\n    })\n    //#endregion Create Writable\n\n    let setter: (this: T, newVal: S) => void\n    let getter: (this: T) => S\n\n    if (isNullOrUndefined(Model)) {\n      if (isNullOrUndefined(base)) {\n        //#region Create Getter for Primitives without a default\n        // property getter\n        function primitiveGetter(this: T): S {\n          return this[backingField]\n        }\n\n        getter = primitiveGetter\n        //#endregion Create Getter for Primitives without a default\n      } else {\n        //#region Create Getter for Primitives with a default\n        // property getter\n        function primitiveGetter(this: T): S {\n          if (isNullOrUndefined(this[backingField])) {\n            this[key] = base\n          }\n\n          return this[backingField]\n        }\n\n        getter = primitiveGetter\n        //#endregion Create Getter for Primitives with a default\n      }\n\n      //#region Create Setter for Primitives\n      // property setter\n      function primitiveSetter(this: T, newVal: S): void {\n        this[backingField] = newVal\n      }\n\n      setter = primitiveSetter\n      //#endregion Create Setter for Primitives\n    } else {\n      //#region Create Getter for Models\n      // property getter\n      function typeGetter(this: T): S {\n        if (isNullOrUndefined(this[backingField])) {\n          this[key] = base\n        }\n\n        return this[backingField]\n      }\n\n      getter = typeGetter\n      //#endregion Create Getter for Models\n\n      //#region Create Setter for Models\n      // property setter\n      function typeSetter(this: T, newVal: S): void {\n        if (newVal instanceof Model) {\n          this[backingField] = newVal\n        } else if (Array.isArray(newVal)) {\n          this[backingField] = new Model(...newVal)\n        } else if (isNullOrUndefined(newVal)) {\n          this[backingField] = new Model()\n        } else {\n          this[backingField] = new Model(newVal)\n        }\n      }\n\n      setter = typeSetter\n      //#endregion Create Setter for Models\n    }\n\n    // Create new property with getter and setter\n    Object.defineProperty(target, key, {\n      get: getter,\n      set: setter,\n      enumerable: true,\n      configurable: true\n    })\n  }\n}\n","import { isPlatformBrowser } from '@angular/common'\nimport { Inject, Injectable, PLATFORM_ID } from '@angular/core'\n\nimport { DatabaseService } from '../database/database.service'\nimport { GameService } from '../game/game.service'\nimport { Setting } from '../setting/setting'\nimport { ISetting } from '../setting/setting.d'\nimport { isNullOrUndefined } from '../utilities/is-null-or-undefined'\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class SettingsService {\n  /**\n   * Holder for `settings`\n   */\n  private _settings: Setting[]\n\n  /**\n   * Indexeddb Store Name\n   */\n  private storeName: string = 'settings'\n\n  /**\n   * List of settings.\n   */\n  public get settings(): Setting[] {\n    if (isNullOrUndefined(this._settings)) {\n      this._settings = []\n    } else if (!Array.isArray(this._settings)) {\n      this._settings = [this._settings]\n    }\n\n    return this._settings\n  }\n\n  constructor(\n    @Inject(PLATFORM_ID) readonly platformId: string,\n    private database: DatabaseService,\n    private game: GameService\n  ) {\n    if (isPlatformBrowser(platformId)) {\n      this.getSettings(0)\n    }\n  }\n\n  /**\n   * Get settings from indexeddb then update BehaviorSubjects.\n   *\n   * Only On Construction.\n   */\n  private getSettings(count: number): void {\n    if (isNullOrUndefined(count)) {\n      count = 0\n    }\n\n    if (count > 100) {\n      console.error('Database took too long to initialise')\n      return\n    }\n\n    this.getAll()\n      .then((val: Setting[]): void => {\n        val.forEach((item: Setting): void => {\n          this.addSetting(item)\n          this.game[item.key].next(item.value)\n        })\n      })\n      .catch((error: DOMException): void => {\n        if (error.message === 'Database not set') {\n          window.requestAnimationFrame((): void => {\n            this.getSettings(++count)\n          })\n        } else {\n          console.error(error.message)\n        }\n      })\n  }\n\n  private addSetting(setting: Setting): void {\n    this.settings.push(setting)\n  }\n\n  public put(name: string, value: number): Promise<IDBValidKey> {\n    return new Promise(\n      (\n        resolve: (value: IDBValidKey) => void,\n        reject: (reason: DOMException) => void\n      ): void => {\n        let found: number\n\n        found = this.settings.findIndex((setting: Setting): boolean => {\n          return setting.key === name\n        })\n\n        if (found === -1) {\n          reject(new DOMException(`Setting \"${name}\" not found`))\n          return\n        }\n\n        if (this.database.database && this.database.ready) {\n          let add: ISetting\n          let objectStore: IDBObjectStore\n          let request: IDBRequest<IDBValidKey>\n\n          this.settings[found].value = value\n\n          add = Setting.toJSON(this.settings[found])\n\n          objectStore = this.database.database\n            .transaction(this.storeName, 'readwrite')\n            .objectStore(this.storeName)\n\n          request = objectStore.put(add)\n\n          request.onsuccess = function (event: Event): void {\n            resolve(this.result)\n          }\n\n          request.onerror = function (event: Event): void {\n            reject(this.error)\n          }\n        } else {\n          let error: DOMException\n\n          error = new DOMException('Database not set')\n\n          reject(error)\n        }\n      }\n    )\n  }\n\n  /**\n   * Get from indexeddb.\n   * Resolve with Setting[].\n   * Reject with error.\n   */\n  private getAll(): Promise<Setting[]> {\n    return new Promise(\n      (\n        resolve: (value: Setting[]) => void,\n        reject: (reason: DOMException) => void\n      ): void => {\n        if (this.database.database && this.database.ready) {\n          let objectStore: IDBObjectStore\n          let request: IDBRequest<ISetting[]>\n\n          objectStore = this.database.database\n            .transaction('settings', 'readonly')\n            .objectStore('settings')\n\n          request = objectStore.getAll()\n\n          request.onerror = function (event: Event): void {\n            reject(this.error)\n          }\n\n          request.onsuccess = function (event: Event): void {\n            let result: Setting[]\n\n            result = this.result.map<Setting>(\n              (val: ISetting): Setting => {\n                return new Setting(val)\n              }\n            )\n\n            resolve(result)\n          }\n        } else {\n          let error: DOMException\n\n          error = new DOMException('Database not set')\n\n          reject(error)\n        }\n      }\n    )\n  }\n}\n","import { HttpClient } from '@angular/common/http'\nimport { Injectable } from '@angular/core'\nimport { BehaviorSubject } from 'rxjs'\nimport { shareReplay } from 'rxjs/operators'\n\nimport { Count, Match, Mode } from '../statistic/statistic.d'\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class GameService {\n  /**\n   * Unique cards of the game\n   *\n   * * 2\n   * * 4\n   * * 6\n   */\n  public count: BehaviorSubject<Count>\n\n  /**\n   * Flip first then start\n   *\n   * * 'memorize'\n   *\n   * Regular type of matching\n   *\n   * * 'regular'\n   */\n  public mode: BehaviorSubject<Mode>\n\n  /**\n   * Cards to match during flips\n   *\n   * * 2\n   * * 3\n   * * 4\n   */\n  public match: BehaviorSubject<Match>\n\n  /**\n   * Is game playing or not\n   */\n  public playing: BehaviorSubject<boolean>\n\n  /**\n   * Master Volume level\n   */\n  public masterVolume: BehaviorSubject<number>\n\n  /**\n   * Effects Volume level\n   */\n  public effectsVolume: BehaviorSubject<number>\n\n  /**\n   * Ambient Volume level\n   */\n  public ambientVolume: BehaviorSubject<number>\n\n  constructor(private httpClient: HttpClient) {\n    this.count = new BehaviorSubject<Count>(2)\n    this.match = new BehaviorSubject<Match>(2)\n    this.mode = new BehaviorSubject<Mode>('regular')\n    this.playing = new BehaviorSubject<boolean>(false)\n    this.masterVolume = new BehaviorSubject<number>(0)\n    this.effectsVolume = new BehaviorSubject<number>(0)\n    this.ambientVolume = new BehaviorSubject<number>(0)\n  }\n\n  /**\n   * Click sound buffer\n   */\n  public clickSoundBuffer(): Promise<ArrayBuffer> {\n    return new Promise(\n      (\n        resolve: (value?: ArrayBuffer) => void,\n        reject: (reason?: any) => void\n      ): void => {\n        this.httpClient\n          .get('assets/audio/click.mp3', {\n            responseType: 'arraybuffer'\n          })\n          .pipe(shareReplay(1))\n          .subscribe(\n            (res: ArrayBuffer): void => {\n              resolve(res)\n            },\n            (error): void => {\n              reject(error)\n            }\n          )\n      }\n    )\n  }\n}\n","import { isPlatformBrowser } from '@angular/common'\nimport { ApplicationRef, Inject, Injectable, PLATFORM_ID } from '@angular/core'\nimport { MatSnackBar } from '@angular/material/snack-bar'\nimport {\n  SwUpdate,\n  UpdateActivatedEvent,\n  UpdateAvailableEvent\n} from '@angular/service-worker'\nimport { concat, interval, Observable } from 'rxjs'\nimport { first, take } from 'rxjs/operators'\n\nimport { CheckForUpdateComponent } from './check-for-update.component'\nimport { environment } from '../environments/environment'\n\n/**\n * Check for app updates.\n */\n@Injectable({\n  providedIn: 'root'\n})\n/**\n * Check for app updates.\n */\nexport class CheckForUpdateService {\n  public updateAvailable: boolean\n\n  constructor(\n    @Inject(PLATFORM_ID) readonly platformId: string,\n    appRef: ApplicationRef,\n    snackBar: MatSnackBar,\n    update: SwUpdate\n  ) {\n    if (\n      isPlatformBrowser(platformId) &&\n      environment.production &&\n      update.isEnabled\n    ) {\n      this.available(update, snackBar)\n\n      this.activated(update)\n\n      this.timer(appRef, update)\n    }\n  }\n\n  /**\n   * Subscribe and notify when there's an available update.\n   *\n   * @param update `SwUpdate`\n   * @param snackBar `MatSnackBar`\n   */\n  private available(update: SwUpdate, snackBar: MatSnackBar): void {\n    update.available.subscribe((event: UpdateAvailableEvent): void => {\n      this.notify(snackBar, update)\n    })\n  }\n\n  /**\n   * Log currently activated.\n   *\n   * @param update `SwUpdate`\n   */\n  private activated(update: SwUpdate): void {\n    update.activated.subscribe((event: UpdateActivatedEvent): void => {\n      if (event) {\n        this.previous(event)\n        this.current(event)\n      }\n    })\n  }\n\n  /**\n   * Activate an update and reload if requested.\n   *\n   * @param update `SwUpdate`\n   * @param reload `boolean`\n   */\n  private activateUpdate(update: SwUpdate, reload: boolean): void {\n    update\n      .activateUpdate()\n      .then<void, never>((): void => {\n        if (reload) {\n          interval(500)\n            .pipe<number>(take<number>(1))\n            .subscribe((val: number): void => {\n              window.document.location.reload()\n            })\n        }\n      })\n      .catch<void>((error): void => {\n        console.error(error)\n      })\n  }\n\n  /**\n   * Check for update then activate.\n   *\n   * @param update `SwUpdate`\n   */\n  private checkForUpdate(update: SwUpdate): void {\n    update.checkForUpdate().catch((e): void => {\n      console.error(e)\n    })\n  }\n\n  /**\n   * Log Current.\n   *\n   * @param event `UpdateActivatedEvent`\n   */\n  private current(event: UpdateActivatedEvent): void {\n    if (event.current) {\n      console.log('CURRENT')\n      if (event.current.appData) {\n        console.log(event.current.appData)\n      }\n      if (event.current.hash) {\n        console.log(event.current.hash)\n      }\n    }\n  }\n\n  /**\n   * Notify using `MatSnackBar` and reload on snackBar action.\n   *\n   * @param snackBar `MatSnackBar`\n   * @param update `SwUpdate`\n   */\n  private notify(snackBar: MatSnackBar, update: SwUpdate): void {\n    this.updateAvailable = true\n\n    snackBar\n      .openFromComponent(CheckForUpdateComponent, {\n        panelClass: 'snack-bar-reposition'\n      })\n      .onAction()\n      .subscribe((): void => {\n        this.activateUpdate(update, true)\n      })\n  }\n\n  /**\n   * Log previous.\n   *\n   * @param event `UpdateActivatedEvent`\n   */\n  private previous(event: UpdateActivatedEvent): void {\n    if (event.previous) {\n      console.log('PREVIOUS')\n      if (event.previous.appData) {\n        console.log(event.previous.appData)\n      }\n      if (event.previous.hash) {\n        console.log(event.previous.hash)\n      }\n    }\n  }\n\n  /**\n   * Start a timer for checking updates once the app is stable.\n   *\n   * @param appRef `ApplicationRef`\n   * @param update `SwUpdate`\n   */\n  private timer(appRef: ApplicationRef, update: SwUpdate): void {\n    let appIsStable$: Observable<boolean>\n    let everySixHours$: Observable<number>\n    let everySixHoursOnceAppIsStable$: Observable<number | boolean>\n\n    appIsStable$ = appRef.isStable.pipe<boolean>(\n      first<boolean, boolean>((isStable: boolean): boolean => {\n        return isStable === true\n      })\n    )\n\n    everySixHours$ = interval(6 * 60 * 60 * 1000)\n    everySixHoursOnceAppIsStable$ = concat<\n      Observable<boolean>,\n      Observable<number>\n    >(appIsStable$, everySixHours$)\n\n    everySixHoursOnceAppIsStable$.subscribe((val: number | boolean): void => {\n      this.checkForUpdate(update)\n    })\n  }\n}\n","import { Time } from '../time/time'\n\n/**\n * Combine time of `hours`, `minutes`, `seconds`, `milliseconds` for comparison.\n *\n * @param time `Time`\n */\nexport function createTime(time: Time): number {\n  let result: number\n\n  result =\n    (time.milliseconds || 0) +\n    (time.seconds || 0) * 1000 +\n    (time.minutes || 0) * 60 * 1000 +\n    (time.hours || 0) * 60 * 60 * 1000\n\n  return result\n}\n","/**\n * Environment properties.\n */\nexport const environment = {\n  location: '/memory-game/',\n  production: true\n}\n","import { isPlatformBrowser } from '@angular/common'\nimport { Inject, Injectable, PLATFORM_ID } from '@angular/core'\n\nimport { IStatistic } from '../statistic/statistic.d'\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AnalyticsService {\n  constructor(@Inject(PLATFORM_ID) private readonly platformId: string) {}\n\n  /**\n   * @param event `string` name that is 'event'\n   * @param action `string` action that is 'send_score'\n   * @param params `IStatistic` parameters for the scores\n   */\n  public gtag(\n    event: 'event',\n    action: 'send_score',\n    params: IStatistic & { isHighScore?: boolean }\n  ): void\n  public gtag(): void {\n    if (isPlatformBrowser(this.platformId)) {\n      // tslint:disable-next-line: whitespace semicolon\n      ;(window as any).dataLayer = (window as any).dataLayer || []\n      // tslint:disable-next-line: whitespace semicolon\n      ;(window as any).dataLayer.push(arguments)\n    }\n  }\n}\n","import {\n  animate,\n  AnimationTriggerMetadata,\n  query,\n  style,\n  transition,\n  trigger\n} from '@angular/animations'\n\nexport const fadeAnimation: AnimationTriggerMetadata = trigger(\n  'fadeAnimation',\n  [\n    transition('* => *', [\n      query(':enter', [style({ opacity: 0 })], { optional: true }),\n\n      query(\n        ':leave',\n        [style({ opacity: 1 }), animate('350ms', style({ opacity: 0 }))],\n        { optional: true }\n      ),\n\n      query(\n        ':enter',\n        [style({ opacity: 0 }), animate('350ms', style({ opacity: 1 }))],\n        { optional: true }\n      )\n    ])\n  ]\n)\n","import { ISetting } from './setting.d'\nimport { MakeProperty } from '../utilities/make-property'\nimport { isNullOrUndefined } from '../utilities/is-null-or-undefined'\n\n/**\n * Setting model for application.\n */\nexport class Setting implements ISetting {\n  /**\n   * KeyID\n   */\n  public keyID?: number\n\n  /**\n   * Key\n   */\n  @MakeProperty()\n  public key: string\n\n  /**\n   * Value\n   */\n  @MakeProperty()\n  public value: boolean | number | string\n\n  /**\n   * Create Setting model.\n   *\n   * @param setting `ISetting`\n   */\n  constructor(setting: ISetting)\n  /**\n   * Create Setting model.\n   *\n   * @param key `string` name of the setting\n   * @param value `boolean | number | string` value of the setting\n   */\n  constructor(key: string, value: boolean | number | string)\n  /**\n   * Create Setting model.\n   *\n   * @param key `string` name of the setting\n   * @param value `boolean | number | string` value of the setting\n   * @param keyID `number` KeyID\n   */\n  constructor(key: string, value: boolean | number | string, keyID: number)\n  constructor(\n    arg1: ISetting | string,\n    arg2?: boolean | number | string,\n    arg3?: number\n  ) {\n    if (typeof arg1 === 'string') {\n      this.key = arg1\n      this.value = arg2\n\n      if (typeof arg3 === 'number') {\n        this.keyID = arg3\n      }\n    } else {\n      this.key = arg1.key\n      this.value = arg1.value\n\n      if (typeof arg1.keyID === 'number') {\n        this.keyID = arg1.keyID\n      }\n    }\n  }\n\n  /**\n   * Convert Setting model to JSON.\n   *\n   * @param setting `ISetting`\n   */\n  static toJSON(setting: ISetting): ISetting {\n    let temp: ISetting\n\n    temp = {} as ISetting\n\n    temp.key = setting.key\n    temp.value = setting.value\n\n    if (!isNullOrUndefined(setting.keyID)) {\n      temp.keyID = setting.keyID\n    }\n\n    return temp\n  }\n}\n","import { isPlatformBrowser } from '@angular/common'\nimport { Inject, Injectable, PLATFORM_ID } from '@angular/core'\nimport { MatSnackBar } from '@angular/material/snack-bar'\n\nimport { CheckForUpdateComponent } from '../check-for-update/check-for-update.component'\nimport { Setting } from '../setting/setting'\nimport { ISetting } from '../setting/setting.d'\nimport { Statistic } from '../statistic/statistic'\nimport { IStatistic } from '../statistic/statistic.d'\nimport { Time } from '../time/time'\nimport { ITime } from '../time/time.d'\n\n/**\n * Database and database creation.\n */\n@Injectable({\n  providedIn: 'root'\n})\n/**\n * Database and database creation.\n */\nexport class DatabaseService {\n  /**\n   * Database for indexddb\n   */\n  public database: IDBDatabase\n\n  /**\n   * Tell that the database is ready\n   */\n  public ready: boolean\n\n  constructor(\n    @Inject(PLATFORM_ID) readonly platformId: string,\n    private snackBar: MatSnackBar\n  ) {\n    if (isPlatformBrowser(platformId)) {\n      this.openDatabase(7)\n    }\n  }\n\n  private openDatabase(version: number): void {\n    this.open(version)\n      .then<void, never>((val: IDBDatabase): void => {\n        this.database = val\n        this.ready = true\n      })\n      .catch<void>((error: DOMException): void => {\n        console.error(error.message)\n      })\n  }\n\n  /**\n   * Create an object store if it doesn't exist.\n   *\n   * @param name `string` name of objectStore\n   * @param database `IDBDatabase` database to create object store on\n   */\n  private createObjectStore(name: string, database: IDBDatabase): void\n  /**\n   * Create an object store.\n   *\n   * @param name `string` name of objectStore\n   * @param database `IDBDatabase` database to create object store on\n   * @param warn `boolean` warn if the object store already exists\n   */\n  private createObjectStore(\n    name: string,\n    database: IDBDatabase,\n    warn: boolean\n  ): void\n  private createObjectStore(\n    arg1: string,\n    arg2: IDBDatabase,\n    arg3?: boolean\n  ): void {\n    if (!arg2.objectStoreNames.contains(arg1)) {\n      arg2.createObjectStore(arg1, {\n        keyPath: 'keyID',\n        autoIncrement: true\n      })\n    } else {\n      if (arg3 === true) {\n        console.warn('objectStore exists: ', arg1)\n      }\n    }\n  }\n\n  /**\n   * Open a connection, create a database and upgrade if needed\n   */\n  private open(version: number): Promise<IDBDatabase> {\n    return new Promise(\n      (\n        resolve: (value: IDBDatabase) => void,\n        reject: (reason: DOMException) => void\n      ): void => {\n        let request: IDBOpenDBRequest\n        let self: this\n\n        self = this\n\n        request = window.indexedDB.open('MemoryGame', version)\n\n        request.onerror = function (event: Event): void {\n          this.result.close()\n          reject(this.error)\n        }\n\n        request.onblocked = function (event: Event): void {\n          this.result.close()\n          console.log('blocked')\n          console.log(event)\n          console.log(this)\n        }\n\n        request.onsuccess = function (event: Event): void {\n          this.result.onversionchange = function (\n            event1: IDBVersionChangeEvent\n          ): void {\n            self.ready = false\n\n            console.log('versionchange')\n            console.log(event1)\n\n            self.snackBar\n              .openFromComponent(CheckForUpdateComponent, {\n                panelClass: 'snack-bar-reposition'\n              })\n              .onAction()\n              .subscribe((): void => {\n                window.document.location.reload()\n              })\n\n            this.close()\n          }\n\n          // tslint:disable-next-line: only-arrow-functions\n          this.result.onerror = function (event1: Event): void {\n            console.log('onerror')\n            console.log(event1)\n          }\n\n          // Doesn't appear to be called when closed\n          // tslint:disable-next-line: only-arrow-functions\n          this.result.onclose = function (event1: Event): void {\n            console.log('close')\n            console.log(event1)\n            self.ready = false\n          }\n\n          resolve(this.result)\n        }\n\n        request.onupgradeneeded = function (\n          event: IDBVersionChangeEvent\n        ): void {\n          let database: IDBDatabase\n          let newVersion: number\n          let request1: IDBOpenDBRequest\n          let promises: Promise<IDBValidKey[]>[]\n\n          database = this.result\n          newVersion = event.newVersion\n          request1 = event.target as IDBOpenDBRequest\n          promises = []\n\n          /**\n           * For Case 3 and Case 4.\n           *\n           * Update an object store.\n           *\n           * @param name `string` name of objectStore and storeName\n           */\n          function updateCase3vCase4(name: string): Promise<IDBValidKey[]> {\n            return new Promise(\n              (\n                resolve1: (value: IDBValidKey[]) => void,\n                reject1: (reason: DOMException) => void\n              ): void => {\n                let objectStore: IDBObjectStore\n                let request2: IDBRequest<IStatistic[]>\n\n                objectStore = database\n                  .transaction(name, 'readwrite')\n                  .objectStore(name)\n\n                request2 = objectStore.getAll()\n\n                request2.onerror = function (event1: Event): void {\n                  reject1(this.error)\n                }\n\n                request2.onsuccess = function (event1: Event): void {\n                  let promises1: Promise<IDBValidKey>[]\n\n                  promises1 = []\n\n                  this.result.forEach((res: IStatistic): void => {\n                    let promise: Promise<IDBValidKey>\n\n                    promise = new Promise(\n                      (\n                        resolve2: (value: IDBValidKey) => void,\n                        reject2: (reason: DOMException) => void\n                      ): void => {\n                        let json: IStatistic\n                        let statistic: Statistic\n                        let update: IDBRequest<IDBValidKey>\n\n                        res.count = 6\n                        res.match = 2\n                        res.mode = 'regular'\n                        res.complete = new Time(\n                          ((res as unknown) as ITime).milliseconds,\n                          ((res as unknown) as ITime).seconds,\n                          ((res as unknown) as ITime).minutes,\n                          ((res as unknown) as ITime).hours\n                        )\n                        res.memory = new Time()\n\n                        statistic = new Statistic(res)\n                        json = Statistic.toJSON(statistic)\n\n                        update = objectStore.put(json)\n\n                        update.onsuccess = function (event2: Event): void {\n                          resolve2(this.result)\n                        }\n\n                        update.onerror = function (event2: Event): void {\n                          reject2(this.error)\n                        }\n                      }\n                    )\n\n                    promises1.push(promise.catch(error => error))\n                  })\n\n                  Promise.all(promises1).then((val: IDBValidKey[]): void => {\n                    resolve1(val)\n                  })\n                }\n              }\n            )\n          }\n\n          /**\n           * For Case 3 and Case 4.\n           *\n           * Reuse complete listener for each objectStore update.\n           *\n           * Calls `updateCase3vCase4` and resolves/rejects\n           *\n           * @param name `string` name of objectStore and storeName\n           */\n          function completeCase3vCase4(name: string): Promise<IDBValidKey[]> {\n            return new Promise(\n              (\n                resolve1: (value: IDBValidKey[]) => void,\n                reject1: (reason: DOMException) => void\n              ): void => {\n                request1.transaction.addEventListener(\n                  'complete',\n                  (event1: Event): void => {\n                    updateCase3vCase4(name)\n                      .then((val: IDBValidKey[]): void => {\n                        resolve1(val)\n                      })\n                      .catch((error: DOMException): void => {\n                        reject1(error)\n                      })\n                  }\n                )\n              }\n            )\n          }\n\n          /**\n           * For Case 5.\n           *\n           * Update an object store.\n           *\n           * @param name `string` name of objectStore and storeName\n           */\n          function updateCase5(name: string): Promise<IDBValidKey[]> {\n            return new Promise(\n              (\n                resolve1: (value: IDBValidKey[]) => void,\n                reject1: (reason: DOMException) => void\n              ): void => {\n                let objectStore: IDBObjectStore\n                let request2: IDBRequest<ISetting[]>\n\n                objectStore = database\n                  .transaction(name, 'readwrite')\n                  .objectStore(name)\n\n                request2 = objectStore.getAll()\n\n                request2.onerror = function (event1: Event): void {\n                  reject1(this.error)\n                }\n\n                request2.onsuccess = function (event1: Event): void {\n                  let names: string[]\n                  let promises1: Promise<IDBValidKey>[]\n                  let result: ISetting[]\n\n                  result = this.result\n                  names = ['masterVolume', 'effectsVolume', 'ambientVolume']\n                  promises1 = names.reduce<Promise<IDBValidKey>[]>(\n                    (\n                      pv: Promise<IDBValidKey>[],\n                      cv: string\n                    ): Promise<IDBValidKey>[] => {\n                      let found: number\n\n                      found = result.findIndex((index: ISetting): boolean => {\n                        return index.key === cv\n                      })\n\n                      if (found === -1) {\n                        let promise: Promise<IDBValidKey>\n\n                        promise = new Promise(\n                          (\n                            resolve2: (value: IDBValidKey) => void,\n                            reject2: (reason: DOMException) => void\n                          ): void => {\n                            let json: ISetting\n                            let setting: Setting\n                            let add: IDBRequest<IDBValidKey>\n\n                            setting = new Setting(cv, 0.5)\n                            json = Setting.toJSON(setting)\n\n                            add = objectStore.add(json)\n\n                            add.onsuccess = function (event2: Event): void {\n                              resolve2(this.result)\n                            }\n\n                            add.onerror = function (event2: Event): void {\n                              reject2(this.error)\n                            }\n                          }\n                        )\n\n                        pv.push(promise.catch(error => error))\n                      }\n\n                      return pv\n                    },\n                    []\n                  )\n\n                  Promise.all(promises1).then((val: IDBValidKey[]): void => {\n                    resolve1(val)\n                  })\n                }\n              }\n            )\n          }\n\n          /**\n           * For Case 5.\n           *\n           * Reuse complete listener for each objectStore update.\n           *\n           * Calls `updateCase5` and resolves/rejects\n           *\n           * @param name `string` name of objectStore and storeName\n           */\n          function completeCase5(name: string): Promise<IDBValidKey[]> {\n            return new Promise(\n              (\n                resolve1: (value: IDBValidKey[]) => void,\n                reject1: (reason: DOMException) => void\n              ): void => {\n                request1.transaction.addEventListener(\n                  'complete',\n                  (event1: Event): void => {\n                    updateCase5(name)\n                      .then((val: IDBValidKey[]): void => {\n                        resolve1(val)\n                      })\n                      .catch((error: DOMException): void => {\n                        reject1(error)\n                      })\n                  }\n                )\n              }\n            )\n          }\n\n          /**\n           * For Case 6.\n           *\n           * Update an object store.\n           *\n           * @param name `string` name of objectStore and storeName\n           */\n          function updateCase6(name: string): Promise<IDBValidKey[]> {\n            return new Promise(\n              (\n                resolve1: (value: IDBValidKey[]) => void,\n                reject1: (reason: DOMException) => void\n              ): void => {\n                let objectStore: IDBObjectStore\n                let request2: IDBRequest<ISetting[]>\n\n                objectStore = database\n                  .transaction(name, 'readwrite')\n                  .objectStore(name)\n\n                request2 = objectStore.getAll()\n\n                request2.onerror = function (event1: Event): void {\n                  reject1(this.error)\n                }\n\n                request2.onsuccess = function (event1: Event): void {\n                  let names: string[]\n                  let promises1: Promise<IDBValidKey>[]\n                  let result: ISetting[]\n\n                  result = this.result\n                  names = ['count', 'match', 'mode']\n                  promises1 = names.reduce<Promise<IDBValidKey>[]>(\n                    (\n                      pv: Promise<IDBValidKey>[],\n                      cv: string\n                    ): Promise<IDBValidKey>[] => {\n                      let found: number\n\n                      found = result.findIndex((index: ISetting): boolean => {\n                        return index.key === cv\n                      })\n\n                      if (found === -1) {\n                        let promise: Promise<IDBValidKey>\n\n                        promise = new Promise(\n                          (\n                            resolve2: (value: IDBValidKey) => void,\n                            reject2: (reason: DOMException) => void\n                          ): void => {\n                            let json: ISetting\n                            let setting: Setting\n                            let add: IDBRequest<IDBValidKey>\n\n                            switch (cv) {\n                              case 'count':\n                              case 'match':\n                                setting = new Setting(cv, 2)\n                                break\n                              case 'mode':\n                                setting = new Setting(cv, 'regular')\n                                break\n                            }\n\n                            json = Setting.toJSON(setting)\n\n                            add = objectStore.add(json)\n\n                            add.onsuccess = function (event2: Event): void {\n                              resolve2(this.result)\n                            }\n\n                            add.onerror = function (event2: Event): void {\n                              reject2(this.error)\n                            }\n                          }\n                        )\n\n                        pv.push(promise.catch(error => error))\n                      }\n\n                      return pv\n                    },\n                    []\n                  )\n\n                  Promise.all(promises1).then((val: IDBValidKey[]): void => {\n                    resolve1(val)\n                  })\n                }\n              }\n            )\n          }\n\n          /**\n           * For Case 6.\n           *\n           * Reuse complete listener for each objectStore update.\n           *\n           * Calls `updateCase6` and resolves/rejects\n           *\n           * @param name `string` name of objectStore and storeName\n           */\n          function completeCase6(name: string): Promise<IDBValidKey[]> {\n            return new Promise(\n              (\n                resolve1: (value: IDBValidKey[]) => void,\n                reject1: (reason: DOMException) => void\n              ): void => {\n                request1.transaction.addEventListener(\n                  'complete',\n                  (event1: Event): void => {\n                    updateCase6(name)\n                      .then((val: IDBValidKey[]): void => {\n                        resolve1(val)\n                      })\n                      .catch((error: DOMException): void => {\n                        reject1(error)\n                      })\n                  }\n                )\n              }\n            )\n          }\n\n          database.onerror = function (event1: Event): void {\n            self.ready = false\n            console.log('error in upgrade')\n            console.log(event1)\n            console.log(this)\n          }\n\n          switch (event.oldVersion) {\n            case 0:\n              console.log('database upgrading to version 1')\n              self.createObjectStore('highScores', database, true)\n\n              if (newVersion === 1) {\n                break\n              }\n\n            case 1:\n              console.log('database upgrading to version 2')\n              self.createObjectStore('recentScores', database, true)\n\n              if (newVersion === 2) {\n                break\n              }\n\n            case 2:\n              console.log('database upgrading to version 3')\n              self.createObjectStore('leaderboard', database, true)\n\n              if (newVersion === 3) {\n                break\n              }\n\n            case 3:\n              console.log('database upgrading to version 4')\n              promises.push(\n                completeCase3vCase4('highScores').catch(error => error)\n              )\n\n              if (newVersion === 4) {\n                break\n              }\n\n            case 4:\n              console.log('database upgrading to version 5')\n              promises.push(\n                completeCase3vCase4('recentScores').catch(error => error)\n              )\n\n              if (newVersion === 5) {\n                break\n              }\n\n            case 5:\n              console.log('database upgrading to version 6')\n              self.createObjectStore('settings', database, true)\n              promises.push(completeCase5('settings').catch(error => error))\n\n              if (newVersion === 6) {\n                break\n              }\n\n            case 6:\n              console.log('database upgrading to version 7')\n              promises.push(completeCase6('settings').catch(error => error))\n\n              if (newVersion === 7) {\n                break\n              }\n          }\n\n          Promise.all(promises).then((value: IDBValidKey[][]): void => {\n            value.forEach((group: IDBValidKey[], index: number): void => {\n              if (group instanceof DOMException) {\n                if (index === 0) {\n                  console.error(`highScores error `, group)\n                } else if (index === 1) {\n                  console.error(`recentScores error `, group)\n                } else if (index === 2 || index === 3) {\n                  console.error(`settings error `, group)\n                }\n              } else {\n                group.forEach((key: IDBValidKey, index1: number): void => {\n                  if (key instanceof DOMException) {\n                    if (index === 0) {\n                      console.error(`highScores error at ${index1} `, key)\n                    } else if (index === 1) {\n                      console.error(`recentScores error at ${index1} `, key)\n                    } else if (index === 2 || index === 3) {\n                      console.error(`settings error at ${index1} `, key)\n                    }\n                  }\n                })\n              }\n            })\n          })\n        }\n      }\n    )\n  }\n}\n","import { Inject, Injectable, PLATFORM_ID } from '@angular/core'\n\nimport { AnalyticsService } from '../analytics/analytics.service'\nimport { DatabaseService } from '../database/database.service'\nimport { GameService } from '../game/game.service'\nimport { Score } from '../score/score'\n\n/**\n * Functionality for getting, adding, sorting, removing, and clearing for indexeddb and scores list.\n *\n * Store is `leaderboard`\n */\n@Injectable({\n  providedIn: 'root'\n})\n/**\n * Functionality for getting, adding, sorting, removing, and clearing for indexeddb and scores list.\n *\n * Store is `leaderboard`\n */\nexport class LeaderboardService extends Score {\n  /**\n   * Indexeddb Store Name = `leaderboard`\n   */\n  protected storeName: string = 'leaderboard'\n\n  constructor(\n    @Inject(PLATFORM_ID) readonly platformId: string,\n    analytics: AnalyticsService,\n    database: DatabaseService,\n    game: GameService\n  ) {\n    super(platformId, analytics, database, game)\n  }\n}\n","import { isNullOrUndefined } from './is-null-or-undefined'\n\n/**\n * Decorator Function for creating class property get and set for Array.\n *\n * Creates or assigns an array if one doesn't exist.\n * If an array exists, that array is emptied then new array items are pushed.\n *\n * ### Example:\n *\n * ```ts\n * export class MyClass {\n *   ＠MakeArray<MyClass, string>()\n *   public myProperty: string[]\n * }\n * ```\n *\n * ### Same as:\n *\n * ```ts\n * import { isNullOrUndefined } from '@nexplore/utilities'\n * export class MyClass {\n *   private _myProperty: string[]\n *   public get myProperty(): string[] {\n *     if (isNullOrUndefined(this._myProperty)) {\n *       this.myProperty = null\n *     }\n *     return this._myProperty\n *   }\n *   public set myProperty(val: string[]) {\n *     if (isNullOrUndefined(this._myProperty)) {\n *       if (!Array.isArray(val)) {\n *         this._myProperty = []\n *         if (!isNullOrUndefined(val)) {\n *           this._myProperty.push(val)\n *         }\n *       } else {\n *         this._myProperty = val\n *       }\n *     } else {\n *       this._myProperty.splice(0, this._myProperty.length)\n *       if (!Array.isArray(val)) {\n *         if (!isNullOrUndefined(val)) {\n *           this._myProperty.push(val)\n *         }\n *       } else {\n *         this._myProperty.push(...val)\n *       }\n *     }\n *  }\n * }\n * ```\n */\nexport function MakeArray<T, S>(): (target: T, key: string) => void {\n  return (target: T, key: string): void => {\n    //#region Create Writable\n    let backingField: string\n\n    backingField = '_' + key\n\n    Object.defineProperty(target, backingField, {\n      writable: true,\n      enumerable: true,\n      configurable: true\n    })\n    //#endregion Create Writable\n\n    //#region Create Getter and Setter for Array\n    // property getter\n    function getter(this: T): S[] {\n      if (isNullOrUndefined(this[backingField])) {\n        this[key] = null\n      }\n\n      return this[backingField]\n    }\n\n    // property setter\n    function setter(this: T, newVal: S[]): void {\n      // Check if _queued is already set\n      if (isNullOrUndefined(this[backingField])) {\n        // check if newVal is an array\n        if (!Array.isArray(newVal)) {\n          // assign array\n          this[backingField] = []\n\n          // add newVal if newVal is defined\n          if (!isNullOrUndefined(newVal)) {\n            // push newVal\n            this[backingField].push(newVal)\n          }\n        } else {\n          // assign as newVal\n          this[backingField] = newVal\n        }\n      } else {\n        // Clear array\n        this[backingField].splice(0, this[backingField].length)\n\n        if (!Array.isArray(newVal)) {\n          // only push if newVal is defined\n          if (!isNullOrUndefined(newVal)) {\n            this[backingField].push(newVal)\n          }\n        } else {\n          // push all of val array\n          this[backingField].push(...newVal)\n        }\n      }\n    }\n    //#endregion Create Getter and Setter for Array\n\n    // Create new property with getter and setter\n    Object.defineProperty(target, key, {\n      get: getter,\n      set: setter,\n      enumerable: true,\n      configurable: true\n    })\n  }\n}\n","export enum RouteLoction {\n  Game = 'game',\n  HighScores = 'high-scores',\n  Leaderboard = 'leaderboard',\n  RecentScores = 'recent-scores',\n  Settings = 'settings'\n}\n","import { isNull } from './is-null'\nimport { isUndefined } from './is-undefined'\n\n/**\n * Check if a value is null or undefined.\n *\n * Examples:\n *\n * ```ts\n * isNullOrUndefined('Text here') // returns false\n * isNullOrUndefined(null) // returns true\n * isNullOrUndefined() // returns true\n * isNullOrUndefined(undefined) // returns true\n * ```\n *\n * @param arg `any` value to check if undefined\n */\nexport function isNullOrUndefined(arg?: any): boolean {\n  if (isNull(arg) || isUndefined(arg)) {\n    return true\n  }\n\n  return false\n}\n","/**\n * Check if a value is null.\n *\n * Examples:\n *\n * ```ts\n * isNull('Text here') // returns false\n * isNull() // returns false\n * isNull(undefined) // returns false\n * isNull(null) // returns true\n * ```\n *\n * @param arg `any` value to check if null\n */\nexport function isNull(arg?: any): boolean {\n  if (arg === null) {\n    return true\n  }\n\n  return false\n}\n","/**\n * Check if a value is undefined.\n *\n * Examples:\n *\n * ```ts\n * isUndefined('Text here') // returns false\n * isUndefined(null) // returns false\n * isUndefined() // returns true\n * isUndefined(undefined) // returns true\n * ```\n *\n * @param arg `any` value to check if undefined\n */\nexport function isUndefined(arg?: any): boolean {\n  if (arg === undefined) {\n    return true\n  }\n\n  return false\n}\n","import { ChangeDetectionStrategy, Component, HostBinding } from '@angular/core'\nimport { MatSnackBarRef } from '@angular/material/snack-bar'\n\n@Component({\n  selector: 'app-check-for-update',\n  templateUrl: './check-for-update.component.html',\n  styleUrls: ['./check-for-update.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class CheckForUpdateComponent {\n  @HostBinding('class.mat-simple-snackbar') private get simple(): true {\n    return true\n  }\n\n  constructor(private snack: MatSnackBarRef<CheckForUpdateComponent>) {}\n\n  public dismiss(): void {\n    this.snack.dismissWithAction()\n  }\n}\n","<span>\n  {{ 'UPDATE_AVAILABLE' | translate }}{{ 'FULL_STOP' | translate }}\n  {{ 'PLEASE_RELOAD' | translate }}{{ 'FULL_STOP' | translate }}\n</span>\n<div class=\"mat-simple-snackbar-action\">\n  <button mat-button (click)=\"dismiss()\">\n    <mat-icon aria-hidden=\"false\" [attr.aria-label]=\"'REFRESH' | translate\">\n      refresh\n    </mat-icon>\n  </button>\n</div>\n","import { Inject, Injectable, PLATFORM_ID } from '@angular/core'\n\nimport { AnalyticsService } from '../analytics/analytics.service'\nimport { DatabaseService } from '../database/database.service'\nimport { GameService } from '../game/game.service'\nimport { Score } from '../score/score'\n\n/**\n * Functionality for getting, adding, sorting, removing, and clearing for indexeddb and scores list.\n *\n * Store is `highScores`\n */\n@Injectable({\n  providedIn: 'root'\n})\n/**\n * Functionality for getting, adding, sorting, removing, and clearing for indexeddb and scores list.\n *\n * Store is `highScores`\n */\nexport class HighScoresService extends Score {\n  /**\n   * Indexeddb Store Name = `highScores`\n   */\n  protected storeName: string = 'highScores'\n\n  constructor(\n    @Inject(PLATFORM_ID) readonly platformId: string,\n    analytics: AnalyticsService,\n    database: DatabaseService,\n    game: GameService\n  ) {\n    super(platformId, analytics, database, game)\n  }\n}\n","import { ITime } from './time.d'\nimport { isNullOrUndefined } from '../utilities/is-null-or-undefined'\nimport { MakeProperty } from '../utilities/make-property'\n\nexport class Time implements ITime {\n  /**\n   * Milliseconds\n   */\n  @MakeProperty(null, 0)\n  public milliseconds: number\n\n  /**\n   * Seconds\n   */\n  @MakeProperty(null, 0)\n  public seconds: number\n\n  /**\n   * Minutes\n   */\n  @MakeProperty(null, 0)\n  public minutes: number\n\n  /**\n   * Hours\n   */\n  @MakeProperty(null, 0)\n  public hours: number\n\n  /**\n   * Create Time model.\n   */\n  constructor()\n  /**\n   * Create Time model.\n   *\n   * @param time `ITime`\n   */\n  constructor(time: ITime)\n  /**\n   * Create Time model.\n   *\n   * @param milliseconds `number` Milliseconds\n   * @param seconds `number` Seconds\n   * @param minutes `number` Minutes\n   * @param hours `number` Hours\n   */\n  constructor(\n    milliseconds: number,\n    seconds: number,\n    minutes: number,\n    hours: number\n  )\n  constructor(\n    arg1?: number | ITime,\n    arg2?: number,\n    arg3?: number,\n    arg4?: number\n  ) {\n    if (!isNullOrUndefined(arg1)) {\n      if (typeof arg1 === 'number') {\n        this.milliseconds = arg1\n        this.seconds = arg2\n        this.minutes = arg3\n        this.hours = arg4\n      } else {\n        this.milliseconds = arg1.milliseconds\n        this.seconds = arg1.seconds\n        this.minutes = arg1.minutes\n        this.hours = arg1.hours\n      }\n    }\n  }\n\n  static toJSON(time: ITime): ITime {\n    let temp: ITime\n\n    temp = {} as ITime\n\n    temp.milliseconds = time.milliseconds\n    temp.seconds = time.seconds\n    temp.minutes = time.minutes\n    temp.hours = time.hours\n\n    return temp\n  }\n}\n","import { IDeviceSize } from './device-size.d'\nimport { MakeProperty } from '../utilities/make-property'\n\n/**\n * Device Height and Width.\n */\nexport class DeviceSize implements IDeviceSize {\n  /**\n   * Height\n   */\n  @MakeProperty(null, 0)\n  public height: number\n\n  /**\n   * Width\n   */\n  @MakeProperty(null, 0)\n  public width: number\n\n  /**\n   * Create `DeviceSize` by deviceSizeLike\n   *\n   * @param deviceSizeLike `IDeviceSize`\n   */\n  constructor(deviceSizeLike: IDeviceSize)\n  /**\n   * Create `DeviceSize` by deviceSize\n   *\n   * @param deviceSize `DeviceSize`\n   */\n  constructor(deviceSize: DeviceSize)\n  /**\n   * Create `DeviceSize` by height and width\n   *\n   * @param height `number\n   * @param width `number`\n   */\n  constructor(height: number, width: number)\n  constructor(arg1: number | DeviceSize | IDeviceSize, arg2?: number) {\n    if (typeof arg1 === 'number') {\n      this.height = arg1\n      this.width = arg2\n    } else {\n      this.height = arg1.height\n      this.width = arg1.width\n    }\n  }\n}\n","<span *ngIf=\"!forIOS\">{{ 'INSTALL_MEMORY_GAME' | translate }}</span>\n<span *ngIf=\"forIOS\">\n  {{ 'INSTALL_MEMORY_GAME' | translate }}{{ 'FULL_STOP' | translate }} Tap\n  <img src=\"assets/icons/Navigation_Action_2x.png\" />\n  then <b>\"{{ 'ADD_TO_HOME_SCREEN' | translate }}\"</b>\n</span>\n<div class=\"mat-simple-snackbar-action\">\n  <button\n    mat-button\n    (click)=\"dismiss(true)\"\n    [attr.aria-label]=\"'INSTALL' | translate\"\n    *ngIf=\"!forIOS\"\n  >\n    <mat-icon aria-hidden=\"false\">get_app</mat-icon>\n  </button>\n  <button\n    mat-button\n    (click)=\"dismiss(false)\"\n    [attr.aria-label]=\"'CLOSE' | translate\"\n  >\n    <mat-icon aria-hidden=\"false\">close</mat-icon>\n  </button>\n</div>\n","import { isPlatformBrowser } from '@angular/common'\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  HostBinding,\n  Inject,\n  PLATFORM_ID\n} from '@angular/core'\nimport { MatSnackBarRef } from '@angular/material/snack-bar'\n\n@Component({\n  selector: 'app-install',\n  templateUrl: './install.component.html',\n  styleUrls: ['./install.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class InstallComponent {\n  @HostBinding('class.mat-simple-snackbar') private get simple(): true {\n    return true\n  }\n\n  public get forIOS(): boolean {\n    if (isPlatformBrowser(this.platformId)) {\n      return (\n        (/iPhone|iPad|iPod/.test(window.navigator.platform) ||\n          (window.navigator.maxTouchPoints > 2 &&\n            /MacIntel/.test(window.navigator.platform))) &&\n        !/Chrome|CriOS|Firefox|FxiOS/.test(window.navigator.userAgent)\n      )\n    }\n\n    return false\n  }\n\n  constructor(\n    @Inject(PLATFORM_ID) private readonly platformId: string,\n    private snack: MatSnackBarRef<InstallComponent>\n  ) {}\n\n  public dismiss(withAction: boolean): void {\n    if (withAction) {\n      this.snack.dismissWithAction()\n    } else {\n      this.snack.dismiss()\n    }\n  }\n}\n","import { isPlatformBrowser } from '@angular/common'\nimport { Injectable, Inject, PLATFORM_ID } from '@angular/core'\nimport { MatSnackBar } from '@angular/material/snack-bar'\nimport { BehaviorSubject } from 'rxjs'\n\nimport { CheckForUpdateService } from '../check-for-update/check-for-update.service'\nimport { DeviceSize } from '../device-size/device-size'\nimport { InstallComponent } from '../install/install.component'\nimport { BeforeInstallPromptEvent } from '../polyfills/before-install-prompt.event'\n\n/**\n * Service for device information.\n */\n@Injectable({\n  providedIn: 'root'\n})\n/**\n * Service for device information.\n */\nexport class DeviceService {\n  /**\n   * Observable for focused/blurred application.\n   */\n  public active: BehaviorSubject<boolean>\n  /**\n   * Observable for device size.\n   */\n  public deviceScreen: BehaviorSubject<DeviceSize>\n\n  constructor(\n    @Inject(PLATFORM_ID) readonly platformId: string,\n    checkForUpdate: CheckForUpdateService,\n    snackBar: MatSnackBar\n  ) {\n    this.active = new BehaviorSubject<boolean>(true)\n    this.deviceScreen = new BehaviorSubject<DeviceSize>(new DeviceSize(0, 0))\n\n    if (isPlatformBrowser(platformId)) {\n      this.beforeunload()\n      this.createActiveListener()\n      this.createResizeListener()\n      this.emitResizeFirst()\n      this.install(snackBar, checkForUpdate)\n    }\n  }\n\n  /**\n   * Remove localstorage scroll when the app\n   * closes to prevent scrolling upon open.\n   */\n  private beforeunload(): void {\n    window.addEventListener(\n      'beforeunload',\n      (event: BeforeUnloadEvent): void => {\n        window.localStorage.removeItem('scroll')\n      }\n    )\n  }\n\n  /**\n   * Create listeners for if the window is focused or blurred.\n   */\n  private createActiveListener(): void {\n    window.addEventListener('blur', (event: FocusEvent) => {\n      this.active.next(false)\n    })\n    window.addEventListener('focus', (event: FocusEvent) => {\n      this.active.next(true)\n    })\n  }\n\n  /**\n   * Create a resize listener.\n   */\n  private createResizeListener(): void {\n    window.addEventListener(\n      'resize',\n      (event: UIEvent): void => {\n        let emit: DeviceSize\n        let height: number\n        let width: number\n\n        height = (event.target as Window).screen.height\n        width = (event.target as Window).screen.width\n        emit = new DeviceSize(height, width)\n\n        this.deviceScreen.next(emit)\n      },\n      false\n    )\n  }\n\n  /**\n   * The first size emitter.\n   */\n  private emitResizeFirst(): void {\n    let emit: DeviceSize\n    let height: number\n    let width: number\n\n    height = window.screen.height\n    width = window.screen.width\n    emit = new DeviceSize(height, width)\n\n    this.deviceScreen.next(emit)\n  }\n\n  /**\n   * Prompt to install the PWA\n   *\n   * @param snackBar `MatSnackBar` prompt\n   * @param checkForUpdate `CheckForUpdateService`\n   */\n  private install(\n    snackBar: MatSnackBar,\n    checkForUpdate: CheckForUpdateService\n  ): void {\n    if (isPlatformBrowser(this.platformId)) {\n      if ('onbeforeinstallprompt' in window) {\n        window.addEventListener(\n          'beforeinstallprompt',\n          (event: BeforeInstallPromptEvent): void => {\n            event.preventDefault()\n\n            let deferredPrompt: BeforeInstallPromptEvent\n\n            deferredPrompt = event\n\n            if (!checkForUpdate.updateAvailable) {\n              snackBar\n                .openFromComponent<InstallComponent>(InstallComponent, {\n                  panelClass: 'snack-bar-reposition'\n                })\n                .onAction()\n                .subscribe((): void => {\n                  deferredPrompt.prompt()\n                })\n            }\n          }\n        )\n      }\n\n      const standalone = 'standalone'\n\n      if (\n        !window.navigator[standalone] &&\n        (/iPhone|iPad|iPod/.test(window.navigator.platform) ||\n          (window.navigator.maxTouchPoints > 2 &&\n            /MacIntel/.test(window.navigator.platform))) &&\n        !/Chrome|CriOS|Firefox|FxiOS/.test(window.navigator.userAgent) &&\n        !checkForUpdate.updateAvailable\n      ) {\n        snackBar.openFromComponent<InstallComponent>(InstallComponent, {\n          panelClass: 'snack-bar-reposition'\n        })\n      }\n    }\n  }\n}\n","import { Count, IStatistic, Match, Mode } from './statistic.d'\nimport { Time } from '../time/time'\nimport { ITime } from '../time/time.d'\nimport { MakeProperty } from '../utilities/make-property'\nimport { isNullOrUndefined } from '../utilities/is-null-or-undefined'\n\n/**\n * Statistic model to score.\n */\nexport class Statistic implements IStatistic {\n  /**\n   * KeyID\n   */\n  public keyID?: number\n\n  /**\n   * Complete\n   */\n  @MakeProperty(Time)\n  public complete: Time\n\n  /**\n   * Memory\n   */\n  @MakeProperty(Time)\n  public memory: Time\n\n  /**\n   * Flips\n   */\n  @MakeProperty()\n  public flips: number\n\n  /**\n   * Count\n   */\n  @MakeProperty()\n  public count: Count\n\n  /**\n   * Match\n   */\n  @MakeProperty()\n  public match: Match\n\n  /**\n   * Mode\n   */\n  @MakeProperty()\n  public mode: Mode\n\n  /**\n   * Create Statistic model.\n   *\n   * @param statistic `IStatistic`\n   */\n  constructor(statistic: IStatistic)\n  /**\n   * Create Statistic model.\n   *\n   * @param mode `Mode` Mode\n   * @param match `Match` Match\n   * @param flips `number` Flips\n   * @param count `Count` Count\n   * @param complete `ITime` Complete\n   * @param memory `ITime` Memory\n   */\n  constructor(\n    mode: Mode,\n    match: Match,\n    flips: number,\n    count: Count,\n    complete: ITime,\n    memory: ITime\n  )\n  /**\n   * Create Statistic model.\n   *\n   * @param mode `Mode` Mode\n   * @param match `Match` Match\n   * @param flips `number` Flips\n   * @param count `Count` Count\n   * @param complete `ITime` Complete\n   * @param memory `ITime` Memory\n   * @param keyID `number` KeyID\n   */\n  constructor(\n    mode: Mode,\n    match: Match,\n    flips: number,\n    count: Count,\n    complete: ITime,\n    memory: ITime,\n    keyID: number\n  )\n  /**\n   * Create Statistic model.\n   *\n   * @param mode `Mode` Mode\n   * @param match `Match` Match\n   * @param flips `number` Flips\n   * @param count `Count` Count\n   * @param completeMilliseconds `number` Complete Milliseconds\n   * @param completeSeconds `number` Complete Seconds\n   * @param completeMinutes `number` Complete Minutes\n   * @param completeHours `number` Complete Hours\n   * @param memoryMilliseconds `number` Complete Milliseconds\n   * @param memorySeconds `number` Complete Seconds\n   * @param memoryMinutes` number` Complete Minutes\n   * @param memoryHours `number` Complete Hours\n   */\n  constructor(\n    mode: Mode,\n    match: Match,\n    flips: number,\n    count: Count,\n    completeMilliseconds: number,\n    completeSeconds: number,\n    completeMinutes: number,\n    completeHours: number,\n    memoryMilliseconds: number,\n    memorySeconds: number,\n    memoryMinutes: number,\n    memoryHours: number\n  )\n  /**\n   * Create Statistic model.\n   *\n   * @param mode `Mode` Mode\n   * @param match `Match` Match\n   * @param flips `number` Flips\n   * @param count `Count` Count\n   * @param completeMilliseconds `number` Complete Milliseconds\n   * @param completeSeconds `number` Complete Seconds\n   * @param completeMinutes `number` Complete Minutes\n   * @param completeHours `number` Complete Hours\n   * @param memoryMilliseconds `number` Complete Milliseconds\n   * @param memorySeconds `number` Complete Seconds\n   * @param memoryMinutes` number` Complete Minutes\n   * @param memoryHours `number` Complete Hours\n   * @param keyID `number` KeyID\n   */\n  constructor(\n    mode: Mode,\n    match: Match,\n    flips: number,\n    count: Count,\n    completeMilliseconds: number,\n    completeSeconds: number,\n    completeMinutes: number,\n    completeHours: number,\n    memoryMilliseconds: number,\n    memorySeconds: number,\n    memoryMinutes: number,\n    memoryHours: number,\n    keyID: number\n  )\n  constructor(\n    arg1: Mode | IStatistic,\n    arg2?: Match,\n    arg3?: number,\n    arg4?: Count,\n    arg5?: ITime | number,\n    arg6?: ITime | number,\n    arg7?: number,\n    arg8?: number,\n    arg9?: number,\n    arg10?: number,\n    arg11?: number,\n    arg12?: number,\n    arg13?: number\n  ) {\n    if (typeof arg1 === 'string') {\n      this.mode = arg1\n      this.match = arg2\n      this.flips = arg3\n      this.count = arg4\n\n      if (typeof arg5 === 'number') {\n        this.complete.milliseconds = arg5\n        this.complete.seconds = arg6 as number\n        this.complete.minutes = arg7\n        this.complete.hours = arg8\n\n        this.memory.milliseconds = arg9\n        this.memory.seconds = arg10\n        this.memory.minutes = arg11\n        this.memory.hours = arg12\n\n        if (typeof arg13 === 'number') {\n          this.keyID = arg13\n        }\n      } else {\n        this.complete = arg5\n        this.memory = arg6 as ITime\n\n        if (typeof arg7 === 'number') {\n          this.keyID = arg7\n        }\n      }\n    } else {\n      this.mode = arg1.mode\n      this.match = arg1.match\n      this.flips = arg1.flips\n      this.count = arg1.count\n      this.complete = arg1.complete\n      this.memory = arg1.memory\n\n      if (typeof arg1.keyID === 'number') {\n        this.keyID = arg1.keyID\n      }\n    }\n  }\n\n  /**\n   * Convert Statistic model to JSON.\n   *\n   * @param statistic `IStatistic`\n   */\n  static toJSON(statistic: IStatistic): IStatistic {\n    let temp: IStatistic\n\n    temp = {} as IStatistic\n\n    temp.complete = Time.toJSON(statistic.complete)\n    temp.memory = Time.toJSON(statistic.memory)\n    temp.flips = statistic.flips\n    temp.count = statistic.count\n    temp.match = statistic.match\n    temp.mode = statistic.mode\n\n    if (!isNullOrUndefined(statistic.keyID)) {\n      temp.keyID = statistic.keyID\n    }\n\n    return temp\n  }\n}\n","import { DOCUMENT, isPlatformBrowser } from '@angular/common'\nimport { Inject, Injectable, PLATFORM_ID } from '@angular/core'\nimport { TranslateService } from '@ngx-translate/core'\nimport { BehaviorSubject } from 'rxjs'\n\nimport { MakeArray } from '../utilities/make-array'\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class LanguageService {\n  /**\n   * State of the application language.\n   *\n   * Default: 'en'\n   */\n  public lang: BehaviorSubject<string>\n\n  @MakeArray() public supported: string[]\n\n  constructor(\n    @Inject(PLATFORM_ID) private readonly platformId: string,\n    @Inject(DOCUMENT) private document: Document,\n    translate: TranslateService\n  ) {\n    this.lang = new BehaviorSubject<string>(translate.getDefaultLang())\n    this.supported = ['bn', 'de', 'en', 'es', 'hi']\n  }\n\n  public setBrowser(lang: string, title: string, description: string): void {\n    if (isPlatformBrowser(this.platformId)) {\n      let html: HTMLElement\n\n      html = this.document.documentElement\n\n      html.lang = lang\n      html.querySelector<HTMLTitleElement>('title').innerText = title\n      html.querySelector<HTMLMetaElement>(\n        'meta[name=\"description\"]'\n      ).content = description\n      html.querySelector<HTMLLinkElement>(\n        'link[rel=\"manifest\"]'\n      ).href = `manifest.${lang}.webmanifest`\n    }\n  }\n\n  public setLang(lang: string): void {\n    this.lang.next(lang)\n  }\n}\n","module.exports = __webpack_public_path__ + \"0.f909622bb7caf6b7376d.worker.js\"","import { Flipped, ICard } from './card.d'\nimport { MakeProperty } from '../utilities/make-property'\n\n/**\n * Card model to match.\n */\nexport class Card implements ICard {\n  /**\n   * Flipped\n   */\n  @MakeProperty<Card, Flipped>(null, 0)\n  public flipped: Flipped\n\n  /**\n   * image\n   */\n  @MakeProperty<Card, string>()\n  public image: string\n\n  /**\n   * Name\n   */\n  @MakeProperty<Card, string>()\n  public name: string\n\n  /**\n   * Create Card model.\n   *\n   * @param card `ICard`\n   */\n  constructor(card: ICard)\n  /**\n   * Create Card model.\n   *\n   * @param name `string` Name\n   * @param image `string` Image\n   */\n  constructor(name: string, image: string)\n  constructor(arg1: string | ICard, arg2?: string) {\n    if (typeof arg1 === 'string') {\n      this.name = arg1\n      this.image = arg2\n    } else {\n      this.name = arg1.name\n      this.image = arg1.image\n    }\n  }\n}\n","let week: number\n// Week =\n//   Milliseconds (1000) *\n//   Seconds (60) *\n//   Minutes (60) *\n//   Hours (24) *\n//   Days (7)\nweek = 1000 * 60 * 60 * 24 * 7\n\n// Valentine's Day\nexport function useValentinesDay(): boolean {\n  let today: Date\n  let valentinesDay: Date\n\n  today = new Date()\n  valentinesDay = new Date(`Feb 14 ${today.getFullYear()}`)\n\n  if (\n    today > new Date(valentinesDay.getTime() - week * 2) &&\n    today < new Date(valentinesDay.getTime())\n  ) {\n    return true\n  }\n\n  return false\n}\n\n// St. Patricks's Day\nexport function useStPatricksDay(): boolean {\n  let today: Date\n  let stPatricksDay: Date\n\n  today = new Date()\n  stPatricksDay = new Date(`Mar 17 ${today.getFullYear()}`)\n\n  if (\n    today > new Date(stPatricksDay.getTime() - week * 2) &&\n    today < new Date(stPatricksDay.getTime())\n  ) {\n    return true\n  }\n\n  return false\n}\n\n// Easter\n/**\n * Get the date of Easter for today's year.\n *\n * https://gist.github.com/johndyer/0dffbdd98c2046f41180c051f378f343\n *\n * @param year Use year of today.\n */\nfunction getEaster(year: number): Date {\n  let C: number\n  let G: number\n  let H: number\n  let I: number\n  let J: number\n  let L: number\n  let day: number\n  let f: (x: number) => number\n  let month: number\n\n  f = Math.floor\n  // Golden Number - 1\n  G = year % 19\n  C = f(year / 100)\n  // related to Epact\n  H = (C - f(C / 4) - f((8 * C + 13) / 25) + 19 * G + 15) % 30\n  // number of days from 21 March to the Paschal full moon\n  I = H - f(H / 28) * (1 - f(29 / (H + 1)) * f((21 - G) / 11))\n  // weekday for the Paschal full moon\n  J = (year + f(year / 4) + I + 2 - C + f(C / 4)) % 7\n  // number of days from 21 March to the Sunday on or before the Paschal full moon\n  L = I - J\n\n  month = 3 + f((L + 40) / 44)\n  day = L + 28 - 31 * f(month / 4)\n\n  return new Date(`${month} ${day} ${year}`)\n}\n\nexport function useEaster(): boolean {\n  let today: Date\n  let easter: Date\n\n  today = new Date()\n  easter = getEaster(today.getFullYear())\n\n  if (\n    today > new Date(easter.getTime() - week * 2) &&\n    today < new Date(easter.getTime())\n  ) {\n    return true\n  }\n\n  return false\n}\n\n// 4th of July\nexport function use4thOfJuly(): boolean {\n  let today: Date\n  let july4th: Date\n\n  today = new Date()\n  july4th = new Date(`Jul 04 ${today.getFullYear()}`)\n\n  if (\n    today > new Date(july4th.getTime() - week * 2) &&\n    today < new Date(july4th.getTime() + week / 7)\n  ) {\n    return true\n  }\n\n  return false\n}\n\n// Halloween\nexport function useHalloween(): boolean {\n  let today: Date\n  let halloween: Date\n\n  today = new Date()\n  halloween = new Date(`Oct 31 ${today.getFullYear()}`)\n\n  if (\n    today > new Date(halloween.getTime() - week * 3) &&\n    today < new Date(halloween.getTime())\n  ) {\n    return true\n  }\n\n  return false\n}\n\n// Thanksgiving\n/**\n * Get the date of Thanksgiving for today's year.\n *\n * @param year Use year of today.\n */\nfunction getThanksgiving(year: number): Date {\n  let lastOfNov: number\n  let thanksgivingDay: number\n\n  lastOfNov = new Date(`Nov 30 ${year}`).getDay()\n\n  if (lastOfNov >= 4) {\n    thanksgivingDay = 34 - lastOfNov\n  } else {\n    thanksgivingDay = 27 - lastOfNov\n  }\n\n  return new Date(`Nov ${thanksgivingDay} ${year}`)\n}\n\nexport function useThanksgiving(): boolean {\n  let today: Date\n  let thanksgiving: Date\n\n  today = new Date()\n  thanksgiving = getThanksgiving(today.getFullYear())\n\n  if (\n    today > new Date(thanksgiving.getTime() - week * 3) &&\n    today < new Date(thanksgiving.getTime())\n  ) {\n    return true\n  }\n\n  return false\n}\n\n// Christmas\nexport function useChristmas(): boolean {\n  let today: Date\n  let christmas: Date\n\n  today = new Date()\n  christmas = new Date(`Dec 25 ${today.getFullYear()}`)\n\n  if (\n    today > new Date(christmas.getTime() - week * 3) &&\n    today < new Date(christmas.getTime())\n  ) {\n    return true\n  }\n\n  return false\n}\n","import { Injectable } from '@angular/core'\n\nimport { Card } from '../card/card'\nimport { ICard } from '../card/card.d'\nimport { GameService } from '../game/game.service'\nimport {\n  useValentinesDay,\n  useStPatricksDay,\n  useEaster,\n  use4thOfJuly,\n  useHalloween,\n  useThanksgiving,\n  useChristmas\n} from '../holiday/holiday'\nimport { MakeArray } from '../utilities/make-array'\nimport { MakeProperty } from '../utilities/make-property'\n\n/**\n * Create and make cards available.\n */\n@Injectable({\n  providedIn: 'root'\n})\n/**\n * Create and make cards available.\n */\nexport class CardsService {\n  //#region get\n  //#region cards\n  /**\n   * List of unique cards.\n   */\n  @MakeArray<CardsService, Card>()\n  private cards: Card[]\n  //#endregion cards\n\n  //#region deck\n  /**\n   * Deck of cards.\n   */\n  @MakeArray<CardsService, Card>()\n  public deck: Card[]\n  //#endregion deck\n  //#endregion get\n\n  //#region blank, white images\n  //#region blank\n  /**\n   * Blank image card.\n   */\n  public get blank(): string {\n    return `assets/${this.blankSource}/blank.png`\n  }\n  //#endregion blank\n\n  //#region blankSource\n  /**\n   * BlankSource image folder.\n   */\n  @MakeProperty<CardsService, string>(null, 'regular')\n  public blankSource: string\n  //#endregion blankSource\n\n  //#region white\n  /**\n   * White image card.\n   */\n  public get white(): string {\n    return 'assets/white.png'\n  }\n  //#endregion white\n  //#endregion blank, white images\n\n  //#region constructor\n  constructor(private game: GameService) {\n    this.createDeck()\n  }\n  //#endregion constructor\n\n  //#region createCard\n  //#region overload\n  /**\n   * Add a unique card.\n   *\n   * @param card `Card`.\n   */\n  private createCard(card: Card): void\n  /**\n   * Add a unique card.\n   *\n   * @param cardLike `ICard`.\n   */\n  private createCard(cardLike: ICard): void\n  /**\n   * Add a unique card.\n   *\n   * @param name `string` title.\n   * @param image `string` path.\n   */\n  private createCard(name: string, image: string): void\n  //#endregion overload\n  private createCard(arg1: string | Card | ICard, arg2?: string): void {\n    let card: Card\n    let found: number\n\n    if (typeof arg1 === 'string') {\n      card = new Card(arg1, arg2)\n    } else {\n      card = new Card(arg1)\n    }\n\n    found = this.cards.findIndex((index: Card): boolean => {\n      return index.name === card.name || index.image === card.image\n    })\n\n    if (found === -1) {\n      this.cards.push(card)\n    } else {\n      console.warn('Card is similar to an existing card.')\n      console.warn('Given card: ', card)\n      console.warn('Existing card: ', this.cards[found])\n    }\n  }\n  //#endregion createCard\n\n  //#region createCards\n  /**\n   * Create a unique set of cards.\n   */\n  private createCards(): void {\n    // Clear unique cards.\n    this.cards.splice(0, this.cards.length)\n\n    let holidayCards: boolean\n    holidayCards = false\n\n    // Valentine's Day\n    if (useValentinesDay()) {\n      this.createValentinesDayCards()\n      holidayCards = true\n    }\n\n    // St. Patricks's Day\n    if (useStPatricksDay()) {\n      this.createStPatricksDayCards()\n      holidayCards = true\n    }\n\n    // Easter\n    if (useEaster()) {\n      this.createEasterCards()\n      holidayCards = true\n    }\n\n    // 4th of July\n    if (use4thOfJuly()) {\n      this.create4thOfJulyCards()\n      holidayCards = true\n    }\n\n    // Halloween\n    if (useHalloween()) {\n      this.createHalloweenCards()\n      holidayCards = true\n    }\n\n    // Thanksgiving\n    if (useThanksgiving()) {\n      this.createThanksgivingCards()\n      holidayCards = true\n    }\n\n    // Christmas\n    if (useChristmas()) {\n      this.createChristmasCards()\n      holidayCards = true\n    }\n\n    if (!holidayCards) {\n      this.createRegularCards()\n    }\n  }\n  //#endregion createCards\n\n  //#region createRegularCards\n  /**\n   * Create a unique set of regular cards.\n   */\n  private createRegularCards(): void {\n    let assets: string\n\n    assets = 'assets/regular/'\n\n    this.blankSource = 'regular'\n\n    this.createCard('cheeseburger', `${assets}cheeseburger.png`)\n    this.createCard('fries', `${assets}fries.png`)\n    this.createCard('hotdog', `${assets}hotdog.png`)\n    this.createCard('ice-cream', `${assets}ice-cream.png`)\n    this.createCard('milkshake', `${assets}milkshake.png`)\n    this.createCard('pizza', `${assets}pizza.png`)\n  }\n  //#endregion createRegularCards\n\n  //#region createValentinesDayCards\n  /**\n   * Create a unique set of valentines day cards.\n   */\n  private createValentinesDayCards(): void {\n    let assets: string\n\n    assets = 'assets/valentines-day/'\n\n    this.blankSource = 'valentines-day'\n\n    this.createCard('be my valentine', `${assets}be-my-valentine.png`)\n    this.createCard('bear boy', `${assets}bear-boy.png`)\n    this.createCard('bear girl', `${assets}bear-girl.png`)\n    this.createCard('butterfly', `${assets}butterfly.png`)\n    this.createCard('heart', `${assets}heart.png`)\n    this.createCard('heart box', `${assets}heart-box.png`)\n  }\n  //#endregion createValentinesDayCards\n\n  //#region createStPatricksDayCards\n  /**\n   * Create a unique set of st patricks day cards.\n   */\n  private createStPatricksDayCards(): void {\n    let assets: string\n\n    assets = 'assets/st-patricks-day/'\n\n    this.blankSource = 'st-patricks-day'\n\n    this.createCard('green hat', `${assets}green-hat.png`)\n    this.createCard(\n      'happy saint patricks day',\n      `${assets}happy-saint-patricks-day.png`\n    )\n    this.createCard('lucky', `${assets}lucky.png`)\n    this.createCard('lucky horse shoe', `${assets}lucky-horse-shoe.png`)\n    this.createCard('pot of gold', `${assets}pot-of-gold.png`)\n    this.createCard('shamrock', `${assets}shamrock.png`)\n  }\n  //#endregion createStPatricksDayCards\n\n  //#region createEasterCards\n  /**\n   * Create a unique set of easter cards.\n   */\n  private createEasterCards(): void {\n    let assets: string\n\n    assets = 'assets/easter/'\n\n    this.blankSource = 'easter'\n\n    this.createCard('basket of eggs', `${assets}basket-of-eggs.png`)\n    this.createCard('bear basket', `${assets}bear-basket.png`)\n    this.createCard('bunny carrot', `${assets}bunny-carrot.png`)\n    this.createCard('egg outline', `${assets}egg-outline.png`)\n    this.createCard('egg paisley', `${assets}egg-paisley.png`)\n    this.createCard('rabbit basket', `${assets}rabbit-basket.png`)\n  }\n  //#endregion createEasterCards\n\n  //#region create4thOfJulyCards\n  /**\n   * Create a unique set of 4th of july cards.\n   */\n  private create4thOfJulyCards(): void {\n    let assets: string\n\n    assets = 'assets/4th-of-july/'\n\n    this.blankSource = '4th-of-july'\n\n    this.createCard('flag hat', `${assets}flag-hat.png`)\n    this.createCard('flag horn', `${assets}flag-horn.png`)\n    this.createCard('flag pencil', `${assets}flag-pencil.png`)\n    this.createCard('flag scallop', `${assets}flag-scallop.png`)\n    this.createCard('flag star', `${assets}flag-star.png`)\n    this.createCard('sam smile', `${assets}sam-smile.png`)\n  }\n  //#endregion create4thOfJulyCards\n\n  //#region createHalloweenCards\n  /**\n   * Create a unique set of halloween cards.\n   */\n  private createHalloweenCards(): void {\n    let assets: string\n\n    assets = 'assets/halloween/'\n\n    this.blankSource = 'halloween'\n\n    this.createCard('castle', `${assets}castle.png`)\n    this.createCard('furry monster', `${assets}furry-monster.png`)\n    this.createCard('lantern', `${assets}lantern.png`)\n    this.createCard('pumpkin', `${assets}pumpkin.png`)\n    this.createCard('slug monster', `${assets}slug-monster.png`)\n    this.createCard('witch hat', `${assets}witch-hat.png`)\n  }\n  //#endregion createHalloweenCards\n\n  //#region createThanksgivingCards\n  /**\n   * Create a unique set of thanksgiving cards.\n   */\n  private createThanksgivingCards(): void {\n    let assets: string\n\n    assets = 'assets/thanksgiving/'\n\n    this.blankSource = 'thanksgiving'\n\n    this.createCard('autumn tree', `${assets}autumn-tree.png`)\n    this.createCard('candy corn', `${assets}candy-corn.png`)\n    this.createCard('cornucopia', `${assets}cornucopia.png`)\n    this.createCard('leaf', `${assets}leaf.png`)\n    this.createCard('scarecrow', `${assets}scarecrow.png`)\n    this.createCard('turkey', `${assets}turkey.png`)\n  }\n  //#endregion createThanksgivingCards\n\n  //#region createChristmasCards\n  /**\n   * Create a unique set of christmas cards.\n   */\n  private createChristmasCards(): void {\n    let assets: string\n\n    assets = 'assets/christmas/'\n\n    this.blankSource = 'christmas'\n\n    this.createCard('bell', `${assets}bell.png`)\n    this.createCard('candy cane', `${assets}candy-cane.png`)\n    this.createCard('ornament', `${assets}ornament.png`)\n    this.createCard('sled', `${assets}sled.png`)\n    this.createCard('snowflake', `${assets}snowflake.png`)\n    this.createCard('wreath', `${assets}wreath.png`)\n  }\n  //#endregion createChristmasCards\n\n  //#region createDeck\n  /**\n   * Create a deck pairing each card.\n   */\n  private createDeck(): void {\n    let temp: Card[]\n    temp = []\n\n    // Clear the current deck of any cards.\n    this.deck.splice(0, this.deck.length)\n\n    // Replenish unique cards.\n    // Allows for holiday cards without closing and reopening.\n    this.createCards()\n\n    // Randomise the cards.\n    this.shuffleCards()\n\n    // Take the number of cards based on the game count setting.\n    temp = this.cards.slice(0, this.game.count.value)\n\n    // Loop each individual card.\n    temp.forEach((card: Card): void => {\n      let i: number\n\n      i = 0\n\n      // Create new card(s) based on the setCount.\n      for (; i < this.game.match.value; i++) {\n        // Push each new card to the deck.\n        this.deck.push(new Card(card))\n      }\n    })\n  }\n  //#endregion createDeck\n\n  //#region shuffleCards\n  /**\n   * Shuffle the list of unique cards\n   */\n  private shuffleCards(): void {\n    this.cards.sort((): number => {\n      return 0.5 - Math.random()\n    })\n  }\n  //#endregion shuffleCards\n\n  //#region getCardBack\n  /**\n   * The back of the card to use based on the flip state.\n   *\n   * @param card `Card` given card\n   */\n  public getCardBack(card: Card): string {\n    if (card.flipped === 3 || card.flipped === 1 || card.flipped === 0) {\n      return this.blank\n    } else if (card.flipped === 4) {\n      return card.image\n    } else if (card.flipped === 2) {\n      return this.white\n    }\n  }\n  //#endregion getCardBack\n\n  //#region getCardImage\n  /**\n   * Return what image to use based on card flip state.\n   *\n   * @param card `Card` given card\n   */\n  public getCardImage(card: Card): string {\n    if (card.flipped === 4 || card.flipped === 3 || card.flipped === 1) {\n      return card.image\n    } else if (card.flipped === 2) {\n      return this.white\n    } else if (card.flipped === 0) {\n      return this.blank\n    }\n  }\n  //#endregion getCardImage\n\n  //#region shuffle\n  /**\n   * Shuffle the deck randomly,\n   */\n  public shuffle(): void {\n    // Reset the deck.\n    this.createDeck()\n\n    this.deck.sort((): number => {\n      return 0.5 - Math.random()\n    })\n  }\n  //#endregion shuffle\n}\n","import { HttpClient } from '@angular/common/http'\nimport { InjectionToken } from '@angular/core'\nimport {\n  MissingTranslationHandler,\n  MissingTranslationHandlerParams,\n  TranslateLoader,\n  TranslateModuleConfig,\n  TranslateService\n} from '@ngx-translate/core'\nimport { TranslateHttpLoader } from '@ngx-translate/http-loader'\nimport { Observable, Subscriber, Subscription } from 'rxjs'\n\nexport const ROUTE_TOKEN: InjectionToken<string> = new InjectionToken<string>(\n  'ROUTE_TOKEN'\n)\n\nexport function translateBrowserLoaderFactory(\n  httpClient: HttpClient,\n  route: string\n): TranslateHttpLoader {\n  return new TranslateHttpLoader(httpClient, `assets/i18n/${route}/`, '.json')\n}\n\nexport class MissingBrowserTranslateHandler\n  implements MissingTranslationHandler {\n  private getTranslation(\n    key: string,\n    lang: string,\n    translate: TranslateService\n  ): Observable<string> {\n    return new Observable<string>((subscriber: Subscriber<string>): void => {\n      let fetcher: Subscription\n\n      subscriber.next(key)\n\n      fetcher = translate.getTranslation(lang).subscribe(\n        (val: { [key: string]: string }): void => {\n          translate.use(lang)\n\n          if (val[key]) {\n            subscriber.next(val[key])\n          }\n        },\n        (): void => {\n          subscriber.error(`Translation for ${key} in ${lang} not found`)\n        },\n        (): void => {\n          subscriber.complete()\n\n          if (fetcher && fetcher instanceof Subscription) {\n            fetcher.unsubscribe()\n          }\n\n          if (subscriber) {\n            subscriber.unsubscribe()\n          }\n        }\n      )\n    })\n  }\n\n  public handle(params: MissingTranslationHandlerParams): Observable<string> {\n    let lang: string\n\n    lang =\n      params?.translateService?.currentLang ||\n      params?.translateService?.defaultLang ||\n      params?.translateService?.getBrowserLang() ||\n      'en'\n\n    return this.getTranslation(params.key, lang, params.translateService)\n  }\n}\n\nexport const translateModuleOptions: TranslateModuleConfig = {\n  extend: true,\n  isolate: false,\n  loader: {\n    provide: TranslateLoader,\n    useFactory: translateBrowserLoaderFactory,\n    deps: [HttpClient, ROUTE_TOKEN]\n  },\n  missingTranslationHandler: {\n    provide: MissingTranslationHandler,\n    useClass: MissingBrowserTranslateHandler\n  },\n  useDefaultLang: true\n}\n","import { isPlatformBrowser } from '@angular/common'\nimport { Inject, Injectable, PLATFORM_ID } from '@angular/core'\n\nimport { CheckForUpdateService } from '../check-for-update/check-for-update.service'\nimport { DatabaseService } from '../database/database.service'\nimport { DeviceService } from '../device/device.service'\nimport { LeaderboardService } from '../leaderboard/leaderboard.service'\nimport { GameService } from '../game/game.service'\nimport { HighScoresService } from '../high-scores/high-scores.service'\nimport { RecentScoresService } from '../recent-scores/recent-scores.service'\nimport { SettingsService } from '../settings/settings.service'\nimport { isNullOrUndefined } from '../utilities/is-null-or-undefined'\n\n/**\n * Background service simply used to gather injectables with no calls.\n */\n@Injectable({\n  providedIn: 'root'\n})\n/**\n * Background service simply used to gather injectables with no calls.\n */\nexport class BackgroundService {\n  constructor(\n    @Inject(PLATFORM_ID) readonly platformId: string,\n    checkForUpdate: CheckForUpdateService,\n    database: DatabaseService,\n    device: DeviceService,\n    game: GameService,\n    highScores: HighScoresService,\n    leaderboard: LeaderboardService,\n    recentScores: RecentScoresService,\n    settings: SettingsService\n  ) {\n    this.webWorker(platformId)\n  }\n\n  private webWorker(platformId: string): void {\n    if (isPlatformBrowser(platformId)) {\n      if (!isNullOrUndefined(Worker)) {\n        let worker: Worker\n\n        worker = new Worker('../root/root.worker', { type: 'module' })\n\n        worker.onmessage = (event: MessageEvent): void => {\n          console.log(`page got message: \"${event.data}\"`)\n        }\n\n        worker.postMessage('Hello!')\n      }\n    }\n  }\n}\n","import { NgModule } from '@angular/core'\nimport { MatButtonModule } from '@angular/material/button'\nimport { MatCardModule } from '@angular/material/card'\nimport { MatRippleModule } from '@angular/material/core'\nimport { MatDialogModule } from '@angular/material/dialog'\nimport { MatGridListModule } from '@angular/material/grid-list'\nimport { MatIconModule } from '@angular/material/icon'\nimport { MatSelectModule } from '@angular/material/select'\nimport { MatSliderModule } from '@angular/material/slider'\nimport { MatSnackBarModule } from '@angular/material/snack-bar'\nimport { MatTableModule } from '@angular/material/table'\n\n/**\n * Module to export used Material modules\n */\n@NgModule({\n  exports: [\n    MatButtonModule,\n    MatCardModule,\n    MatDialogModule,\n    MatGridListModule,\n    MatIconModule,\n    MatRippleModule,\n    MatSelectModule,\n    MatSliderModule,\n    MatSnackBarModule,\n    MatTableModule\n  ]\n})\n/**\n * Module to export used Material modules\n */\nexport class MaterialModule {}\n","import { isPlatformBrowser } from '@angular/common'\nimport { EventEmitter, Inject, PLATFORM_ID } from '@angular/core'\n\nimport { AnalyticsService } from '../analytics/analytics.service'\nimport { createTime } from '../create-time/create-time'\nimport { DatabaseService } from '../database/database.service'\nimport { GameService } from '../game/game.service'\nimport { Statistic } from '../statistic/statistic'\nimport { Count, IStatistic, Match, Mode } from '../statistic/statistic.d'\nimport { isNullOrUndefined } from '../utilities/is-null-or-undefined'\n\n/**\n * Functionality for getting, adding, sorting, removing, and clearing\n * for indexeddb and scores list.\n */\nexport abstract class Score {\n  /**\n   * Holder for `scores`\n   */\n  private _scores: Statistic[]\n\n  /**\n   * Indexeddb Store Name\n   */\n  protected storeName: string = 'defaultStore'\n\n  /**\n   * Emit a data change for material table.\n   */\n  public dataChange: EventEmitter<string>\n\n  /**\n   * List of scores.\n   */\n  public get scores(): Statistic[] {\n    if (isNullOrUndefined(this._scores)) {\n      this._scores = []\n    } else if (!Array.isArray(this._scores)) {\n      this._scores = [this._scores]\n    }\n\n    return this._scores\n  }\n\n  constructor(\n    @Inject(PLATFORM_ID) readonly platformId: string,\n    protected analytics: AnalyticsService,\n    protected database: DatabaseService,\n    protected game: GameService\n  ) {\n    this.dataChange = new EventEmitter<string>()\n\n    if (isPlatformBrowser(platformId)) {\n      this.getScores(0)\n    }\n  }\n\n  /**\n   * Get scores by game type\n   *\n   * @param count `Count` number of card matches\n   * @param match `Match` number of cards to match\n   * @param mode `Mode` mode of game\n   */\n  public getScoresBy(count: Count, match: Match, mode: Mode): Statistic[] {\n    return this.scores.filter((score: Statistic): boolean => {\n      return (\n        score.count === count && score.match === match && score.mode === mode\n      )\n    })\n  }\n\n  /**\n   * CompareFn for Statistic[] sort to order by \"weight\"\n   *\n   * @param a `Statistic` compare a\n   * @param b `Statistic` compare b\n   */\n  private compare(a: Statistic, b: Statistic): 1 | -1 | 0 {\n    let aTime: number\n    let bTime: number\n    let aWeight: number\n    let bWeight: number\n\n    aTime = createTime(a.complete)\n    bTime = createTime(b.complete)\n\n    aWeight = a.flips * aTime\n    bWeight = b.flips * bTime\n\n    if (aWeight > bWeight) {\n      return 1\n    }\n    if (aWeight < bWeight) {\n      return -1\n    }\n\n    if (a.flips > b.flips) {\n      return 1\n    }\n    if (a.flips < b.flips) {\n      return -1\n    }\n\n    if (aTime > bTime) {\n      return -1\n    }\n    if (aTime < bTime) {\n      return 1\n    }\n\n    return 0\n  }\n\n  /**\n   * Sort scores by best score.\n   */\n  public sort(): Statistic[]\n  /**\n   * Sort scores by best score.\n   *\n   * @param statistics `Statistic[]` sort the provided statistics array\n   */\n  public sort(statistics: Statistic[]): Statistic[]\n  public sort(arg1?: Statistic[]): Statistic[] {\n    if (isNullOrUndefined(arg1)) {\n      return this.scores.sort(this.compare)\n    } else {\n      return arg1.sort(this.compare)\n    }\n  }\n\n  /**\n   * Get scores from indexeddb then push them to scores list.\n   *\n   * Only On Construction.\n   *\n   * @param count `number` indicator of self call position < 10 otherwise throw error\n   */\n  private getScores(count: number): void {\n    if (isNullOrUndefined(count)) {\n      count = 0\n    }\n\n    if (count > 100) {\n      console.error('Database took too long to initialise')\n      return\n    }\n\n    this.getAll()\n      .then((val: Statistic[]): void => {\n        val.forEach((item: Statistic): void => {\n          this.addScoreStatistic(item)\n        })\n\n        this.dataChange.emit('getAll')\n      })\n      .catch((error: DOMException): void => {\n        if (error.message === 'Database not set') {\n          window.requestAnimationFrame((): void => {\n            this.getScores(++count)\n          })\n        } else {\n          console.error(error.message)\n        }\n      })\n  }\n\n  /**\n   * Append statistic to the scores list.\n   *\n   * @param statistic `Statistic` to add to scores list\n   */\n  public addScoreStatistic(statistic: Statistic): void {\n    this.scores.push(statistic)\n  }\n\n  /**\n   * Clear scores list.\n   */\n  public clearScores(): void {\n    this.scores.splice(0, this.scores.length)\n  }\n\n  /**\n   * Get from indexeddb.\n   * Resolve with Statistic[].\n   * Reject with error.\n   */\n  private getAll(): Promise<Statistic[]> {\n    return new Promise(\n      (\n        resolve: (value: Statistic[]) => void,\n        reject: (reason: DOMException) => void\n      ): void => {\n        if (this.database.database && this.database.ready) {\n          let objectStore: IDBObjectStore\n          let request: IDBRequest<IStatistic[]>\n\n          objectStore = this.database.database\n            .transaction(this.storeName, 'readonly')\n            .objectStore(this.storeName)\n\n          request = objectStore.getAll()\n\n          request.onerror = function (event: Event): void {\n            reject(this.error)\n          }\n\n          request.onsuccess = function (event: Event): void {\n            let result: Statistic[]\n\n            result = this.result.map<Statistic>(\n              (val: IStatistic): Statistic => {\n                return new Statistic(val)\n              }\n            )\n\n            resolve(result)\n          }\n        } else {\n          let error: DOMException\n\n          error = new DOMException('Database not set')\n\n          reject(error)\n        }\n      }\n    )\n  }\n\n  /**\n   * Add to indexeddb.\n   * Resolve with keyID.\n   * Reject with error.\n   *\n   * @param statistic `Statistic` to add to indexeddb\n   */\n  public add(statistic: Statistic): Promise<Statistic> {\n    let gameState: Statistic[]\n    let self: this\n    let shouldAdd: boolean\n\n    gameState = this.getScoresBy(\n      statistic.count,\n      statistic.match,\n      statistic.mode\n    )\n\n    if (gameState.length < 10) {\n      shouldAdd = true\n      this.addScoreStatistic(statistic)\n    } else {\n      if (this.storeName === 'recentScores') {\n        shouldAdd = true\n        this.addScoreStatistic(statistic)\n      } else {\n        gameState = this.sort(gameState)\n\n        let gameStateWeight: number\n        let statisticWeight: number\n\n        gameStateWeight = createTime(gameState[9].complete) * gameState[9].flips\n        statisticWeight = createTime(statistic.complete) * statistic.flips\n\n        if (gameStateWeight > statisticWeight) {\n          shouldAdd = true\n          this.addScoreStatistic(statistic)\n        } else {\n          shouldAdd = false\n        }\n      }\n    }\n\n    self = this\n\n    return new Promise(\n      (\n        resolve: (value: Statistic) => void,\n        reject: (reason: DOMException) => void\n      ): void => {\n        if (!shouldAdd) {\n          if (this.storeName === 'highScores') {\n            self.analytics.gtag('event', 'send_score', {\n              ...Statistic.toJSON(statistic),\n              isHighScore: false\n            })\n          }\n\n          resolve(statistic)\n\n          return\n        }\n\n        if (this.database.database && this.database.ready) {\n          let add: IStatistic\n          let objectStore: IDBObjectStore\n          let request: IDBRequest<IDBValidKey>\n\n          add = Statistic.toJSON(statistic)\n\n          objectStore = this.database.database\n            .transaction(this.storeName, 'readwrite')\n            .objectStore(this.storeName)\n\n          request = objectStore.add(add)\n\n          request.onsuccess = function (event: Event): void {\n            if (self.storeName === 'highScores') {\n              self.analytics.gtag('event', 'send_score', {\n                ...add,\n                isHighScore: false\n              })\n            }\n\n            statistic.keyID = this.result as number\n\n            self.dataChange.emit('add')\n\n            resolve(statistic)\n          }\n\n          request.onerror = function (event: Event): void {\n            reject(this.error)\n          }\n        } else {\n          let error: DOMException\n\n          error = new DOMException('Database not set')\n\n          reject(error)\n        }\n      }\n    )\n  }\n\n  /**\n   * Clear indexeddb.\n   * Resolve with undefined.\n   * Reject with error.\n   */\n  public clear(): Promise<void> {\n    let self: this\n\n    this.clearScores()\n\n    self = this\n\n    return new Promise(\n      (\n        resolve: (value: void) => void,\n        reject: (reason: DOMException) => void\n      ): void => {\n        if (this.database.database && this.database.ready) {\n          let objectStore: IDBObjectStore\n          let request: IDBRequest<undefined>\n\n          objectStore = this.database.database\n            .transaction(this.storeName, 'readwrite')\n            .objectStore(this.storeName)\n\n          request = objectStore.clear()\n\n          request.onsuccess = function (event: Event): void {\n            self.dataChange.emit('clear')\n\n            resolve(this.result)\n          }\n\n          request.onerror = function (event: Event): void {\n            reject(this.error)\n          }\n        } else {\n          let error: DOMException\n\n          error = new DOMException('Database not set')\n\n          reject(error)\n        }\n      }\n    )\n  }\n\n  /**\n   * Delete from indexeddb.\n   * Resolve with undefined.\n   * Reject with error.\n   *\n   * @param key `number` to remove from indexeddb\n   */\n  public delete(key: number): Promise<undefined> {\n    let self: this\n\n    self = this\n\n    return new Promise(\n      (\n        resolve: (value: undefined) => void,\n        reject: (reason: DOMException) => void\n      ): void => {\n        if (this.database.database && this.database.ready) {\n          let objectStore: IDBObjectStore\n          let request: IDBRequest<undefined>\n\n          objectStore = this.database.database\n            .transaction(this.storeName, 'readwrite')\n            .objectStore(this.storeName)\n\n          request = objectStore.delete(key)\n\n          request.onsuccess = function (event: Event): void {\n            self.dataChange.emit('delete')\n\n            resolve(this.result)\n          }\n\n          request.onerror = function (event: Event): void {\n            reject(this.error)\n          }\n        } else {\n          let error: DOMException\n\n          error = new DOMException('Database not set')\n\n          reject(error)\n        }\n      }\n    )\n  }\n}\n","import { Inject, Injectable, PLATFORM_ID } from '@angular/core'\n\nimport { AnalyticsService } from '../analytics/analytics.service'\nimport { DatabaseService } from '../database/database.service'\nimport { GameService } from '../game/game.service'\nimport { Score } from '../score/score'\nimport { Statistic } from '../statistic/statistic'\n\n/**\n * Functionality for getting, adding, sorting, removing, and clearing for indexeddb and scores list.\n *\n * Store is `recentScores`\n */\n@Injectable({\n  providedIn: 'root'\n})\n/**\n * Functionality for getting, adding, sorting, removing, and clearing for indexeddb and scores list.\n *\n * Store is `recentScores`\n */\nexport class RecentScoresService extends Score {\n  /**\n   * Indexeddb Store Name = `recentScores`\n   */\n  protected storeName: string = 'recentScores'\n\n  constructor(\n    @Inject(PLATFORM_ID) readonly platformId: string,\n    analytics: AnalyticsService,\n    database: DatabaseService,\n    game: GameService\n  ) {\n    super(platformId, analytics, database, game)\n  }\n\n  /**\n   * Prepend statistic to the scores list.\n   */\n  public addScoreStatistic(statistic: Statistic): void {\n    this.scores.unshift(statistic)\n  }\n}\n","import { Injectable } from '@angular/core'\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ThemeService {\n  public theme: string = 'theme-blue'\n  public colour: string = '#0336ff'\n\n  constructor() {}\n\n  public setTheme(theme: string): void {\n    if (this.theme !== theme) {\n      let colour: string\n\n      this.theme = theme\n      colour = ''\n\n      switch (theme) {\n        case 'theme-blue':\n          colour = '#5c7cff'\n          break\n        case 'theme-red':\n          colour = '#ff626f'\n          break\n        case 'theme-yellow':\n          colour = '#ffed75'\n          break\n        case 'theme-purple':\n          colour = '#9c27b0'\n          break\n      }\n\n      this.colour = colour\n    }\n  }\n}\n","export class MenuButton {\n  constructor(\n    public icon: string,\n    public label: string,\n    public route: string,\n    public theme: string\n  ) {}\n}\n","<ng-container *ngFor=\"let menu of menuButtons; trackBy: trackBy\">\n  <a\n    mat-button\n    [attr.aria-label]=\"menu.label\"\n    disableRipple=\"true\"\n    (click)=\"setTheme($event, menu.theme, rla)\"\n    [routerLink]=\"['/', language.lang | async, menu.route]\"\n    routerLinkActive=\"router-link-active\"\n    #rla=\"routerLinkActive\"\n  >\n    <mat-icon\n      aria-hidden=\"false\"\n      [fontSet]=\"rla.isActive ? 'material-icons-outlined' : 'material-icons'\"\n      [color]=\"rla.isActive ? 'primary' : ''\"\n      [attr.aria-label]=\"menu.label | translate\"\n    >\n      {{ menu.icon }}\n    </mat-icon>\n    <span>\n      {{ menu.label | translate }}\n    </span>\n  </a>\n</ng-container>\n","import { isPlatformBrowser } from '@angular/common'\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  Inject,\n  Input,\n  OnDestroy,\n  OnInit,\n  PLATFORM_ID\n} from '@angular/core'\nimport { MatRipple } from '@angular/material/core'\nimport { RouterLinkActive } from '@angular/router'\nimport { Subscription } from 'rxjs'\n\nimport { GameService } from '../game/game.service'\nimport { LanguageService } from '../language/language.service'\nimport { MenuButton } from '../menu-button/menu-button'\nimport { RouteLoction } from '../route-location/route-location'\nimport { ThemeService } from '../theme/theme.service'\nimport { MakeArray } from '../utilities/make-array'\nimport { MakeProperty } from '../utilities/make-property'\n\n@Component({\n  selector: 'app-main-menu',\n  templateUrl: './main-menu.component.html',\n  styleUrls: ['./main-menu.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MainMenuComponent implements OnInit, OnDestroy {\n  private sub: Subscription\n\n  @MakeProperty<MainMenuComponent, string>() public lan: string\n\n  @MakeArray<MainMenuComponent, MenuButton>() public menuButtons: MenuButton[]\n\n  @Input() public ripple: MatRipple\n\n  constructor(\n    @Inject(PLATFORM_ID) private readonly platformId: string,\n    private game: GameService,\n    public language: LanguageService,\n    public theme: ThemeService\n  ) {}\n\n  private lang(): void {\n    this.sub = this.language.lang.subscribe((val: string): void => {\n      this.lan = val\n    })\n  }\n\n  public ngOnInit(): void {\n    this.lang()\n\n    this.menuButtons = []\n\n    const game = new MenuButton(\n      'view_module',\n      'GAME',\n      `${RouteLoction.Game}`,\n      'theme-yellow'\n    )\n    const highScores = new MenuButton(\n      'view_headline',\n      'HIGH_SCORES',\n      `${RouteLoction.HighScores}`,\n      'theme-blue'\n    )\n    const recentScores = new MenuButton(\n      'timelapse',\n      'RECENT_SCORES',\n      `${RouteLoction.RecentScores}`,\n      'theme-red'\n    )\n    // const leaderboard = new MenuButton(\n    //   'leaderboard',\n    //   'Leaderboard',\n    //   `${RouteLoction.Leaderboard}`,\n    //   'theme-pink'\n    // )\n    const settings = new MenuButton(\n      'settings',\n      'SETTINGS',\n      `${RouteLoction.Settings}`,\n      'theme-purple'\n    )\n\n    // this.menuButtons = [game, highScores, recentScores, leaderboard, settings]\n    this.menuButtons = [game, highScores, recentScores, settings]\n  }\n\n  private launchRipple(x: number, y: number, colour: string): void {\n    this.ripple\n      .launch(x, y, {\n        persistent: true,\n        animation: {\n          enterDuration: 700,\n          exitDuration: 700\n        }\n      })\n      .fadeOut()\n  }\n\n  public setTheme(\n    event: MouseEvent,\n    theme: string,\n    routerLinkActive: RouterLinkActive\n  ): void {\n    event.preventDefault()\n\n    if (routerLinkActive.isActive || this.game.playing.value) {\n      return\n    }\n\n    if (isPlatformBrowser(this.platformId)) {\n      window.localStorage.removeItem('scroll')\n    }\n\n    let x: number\n    let y: number\n\n    this.theme.setTheme(theme)\n\n    if (!event.clientX && !event.clientY) {\n      let element: DOMRect\n\n      element = (event.target as HTMLAnchorElement).getClientRects().item(0)\n\n      x = Math.floor(element.x + element.width / 2)\n      y = Math.floor(element.y + element.height / 2)\n    } else {\n      x = event.clientX\n      y = event.clientY\n    }\n\n    this.launchRipple(x, y, this.theme.colour)\n  }\n\n  public trackBy(index: number, name: MenuButton): string {\n    return name.route\n  }\n\n  public ngOnDestroy(): void {\n    if (this.sub && this.sub instanceof Subscription) {\n      this.sub.unsubscribe()\n    }\n  }\n}\n","import { isPlatformBrowser } from '@angular/common'\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Inject,\n  PLATFORM_ID,\n  ViewChild\n} from '@angular/core'\nimport { MatRipple } from '@angular/material/core'\nimport { ActivatedRoute, RouterOutlet } from '@angular/router'\n\nimport { BackgroundService } from '../background/background.service'\nimport { CardsService } from '../cards/cards.service'\nimport { fadeAnimation } from '../fade-animation/fade-animation'\nimport { ThemeService } from '../theme/theme.service'\n\n/**\n * Root that holds game and statistics.\n */\n@Component({\n  selector: 'app-root',\n  templateUrl: './root.component.html',\n  styleUrls: ['./root.component.scss'],\n  animations: [fadeAnimation],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\n/**\n * Root that holds game and statistics.\n */\nexport class RootComponent implements AfterViewInit {\n  @ViewChild('contentWrapper', { static: true })\n  public contentWrapper: ElementRef<HTMLDivElement>\n\n  @ViewChild(MatRipple, { static: true }) ripple: MatRipple\n\n  constructor(\n    @Inject(PLATFORM_ID) private readonly platformId: string,\n    public theme: ThemeService,\n    background: BackgroundService,\n    cards: CardsService\n  ) {}\n\n  public getRouterOutletState(outlet: RouterOutlet): ActivatedRoute | string {\n    let result: ActivatedRoute | string\n\n    if (outlet.isActivated) {\n      result = outlet.activatedRoute\n    } else {\n      result = ''\n    }\n\n    return result\n  }\n\n  public ngAfterViewInit(): void {\n    if (isPlatformBrowser(this.platformId)) {\n      let scrollPosition: number\n\n      scrollPosition = parseInt(window.localStorage.getItem('scroll'), 10)\n\n      if (!!scrollPosition) {\n        this.contentWrapper.nativeElement.scrollTop = scrollPosition\n      }\n    }\n  }\n\n  public scroll(event: Event): void {\n    if (isPlatformBrowser(this.platformId)) {\n      let scrollPosition: number\n\n      scrollPosition = (event.target as HTMLDivElement).scrollTop\n\n      window.localStorage.setItem('scroll', scrollPosition.toString())\n    }\n  }\n}\n","<div matRipple [matRippleDisabled]=\"true\"></div>\n<div class=\"container\" [ngClass]=\"theme.theme\">\n  <div #contentWrapper class=\"content-wrapper\" (scroll)=\"scroll($event)\">\n    <div class=\"wrapper\">\n      <mat-card class=\"mat-elevation-z0\">\n        <mat-card-content [@fadeAnimation]=\"getRouterOutletState(o)\">\n          <router-outlet #o=\"outlet\"></router-outlet>\n        </mat-card-content>\n      </mat-card>\n    </div>\n  </div>\n  <app-main-menu class=\"mat-elevation-z4\" [ripple]=\"ripple\"></app-main-menu>\n</div>\n","import { Injectable } from '@angular/core'\nimport { MatSnackBar } from '@angular/material/snack-bar'\nimport { CanDeactivate } from '@angular/router'\nimport { TranslateService } from '@ngx-translate/core'\nimport { Subscription } from 'rxjs'\n\nimport { GameComponent } from '../game/game.component'\nimport { GameService } from '../game/game.service'\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CanDeactivateGameGuard implements CanDeactivate<GameComponent> {\n  constructor(\n    private game: GameService,\n    private snackBar: MatSnackBar,\n    private translate: TranslateService\n  ) {}\n\n  public canDeactivate(): boolean {\n    if (this.game.playing.value) {\n      let keys: string[]\n      let sub: Subscription\n\n      keys = ['PLEASE_FINISH_OR_RESET_GAME', 'FULL_STOP', 'CLOSE']\n\n      sub = this.translate.get(keys).subscribe(\n        (val: { [key: string]: string }): void => {\n          this.snackBar.open(`${val[keys[0]]}${val[keys[1]]}`, val[keys[2]], {\n            duration: 8000,\n            panelClass: 'snack-bar-reposition'\n          })\n        },\n        (): void => {},\n        (): void => {\n          if (sub && sub instanceof Subscription) {\n            sub.unsubscribe()\n          }\n        }\n      )\n    }\n\n    return !this.game.playing.value\n  }\n}\n","export function redirect(): string {\n  if (typeof window === 'undefined') {\n    return\n  }\n\n  let lang: string\n\n  if (window?.localStorage) {\n    lang = window?.localStorage?.getItem('locale')\n  }\n\n  if (lang) {\n    return lang\n  }\n\n  if (window?.navigator?.language) {\n    lang = window?.navigator?.language?.substring(0, 2)\n  }\n\n  if (lang) {\n    return lang\n  }\n\n  return\n}\n","import { isPlatformBrowser } from '@angular/common'\nimport { Inject, Injectable, PLATFORM_ID } from '@angular/core'\nimport {\n  ActivatedRouteSnapshot,\n  CanActivate,\n  Router,\n  UrlSegment\n} from '@angular/router'\nimport { TranslateService } from '@ngx-translate/core'\n\nimport { LanguageService } from '../language/language.service'\nimport { redirect } from '../redirect/redirect'\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RouteGuard implements CanActivate {\n  constructor(\n    @Inject(PLATFORM_ID) private readonly platformId: string,\n    private language: LanguageService,\n    private router: Router,\n    private translate: TranslateService\n  ) {}\n\n  public canActivate(route: ActivatedRouteSnapshot): boolean {\n    let set: string\n    let supported: boolean\n\n    set = route.params?.lang\n\n    supported = this.language.supported.includes(set)\n\n    if (!supported) {\n      let segments: UrlSegment[]\n      let fullPath: string[]\n\n      set = redirect() || this.translate.getDefaultLang()\n\n      segments = this.router.getCurrentNavigation().finalUrl?.root?.children\n        ?.primary?.segments\n\n      fullPath = segments.map<string>((val: UrlSegment): string => {\n        return val.path\n      })\n\n      fullPath[0] = set\n\n      this.router.navigate(fullPath)\n\n      return false\n    }\n\n    if (isPlatformBrowser(this.platformId)) {\n      window.localStorage.setItem('locale', set)\n    }\n\n    this.language.setLang(set)\n\n    return true\n  }\n}\n","import { NgModule } from '@angular/core'\nimport { Routes, RouterModule } from '@angular/router'\n\nimport { CanDeactivateGameGuard } from '../can-deactivate-game/can-deactivate-game.guard'\nimport { redirect } from '../redirect/redirect'\nimport { RouteLoction } from '../route-location/route-location'\nimport { RouteGuard } from '../route/route.guard'\n\nconst routes: Routes = [\n  {\n    path: '',\n    pathMatch: 'full',\n    redirectTo: `${redirect() || 'en'}/${RouteLoction.Game}`\n  },\n  {\n    path: ':lang',\n    canActivate: [RouteGuard],\n    children: [\n      {\n        path: '',\n        pathMatch: 'full',\n        redirectTo: `${redirect() || 'en'}/${RouteLoction.Game}`\n      },\n      {\n        canDeactivate: [CanDeactivateGameGuard],\n        loadChildren: () =>\n          import('../game/game.module').then(m => m.GameModule),\n        path: RouteLoction.Game\n      },\n      {\n        loadChildren: () =>\n          import('../high-scores/high-scores.module').then(\n            m => m.HighScoresModule\n          ),\n        path: RouteLoction.HighScores\n      },\n      {\n        loadChildren: () =>\n          import('../leaderboard/leaderboard.module').then(\n            m => m.LeaderboardModule\n          ),\n        path: RouteLoction.Leaderboard\n      },\n      {\n        loadChildren: () =>\n          import('../recent-scores/recent-scores.module').then(\n            m => m.RecentScoresModule\n          ),\n        path: RouteLoction.RecentScores\n      },\n      {\n        loadChildren: () =>\n          import('../settings/settings.module').then(m => m.SettingsModule),\n        path: RouteLoction.Settings\n      },\n      {\n        path: '**',\n        redirectTo: RouteLoction.Game\n      }\n    ]\n  },\n  {\n    path: '**',\n    redirectTo: `${redirect() || 'en'}/${RouteLoction.Game}`\n  }\n]\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class RootRoutingModule {}\n","import { CommonModule, registerLocaleData } from '@angular/common'\nimport { HttpClientModule } from '@angular/common/http'\nimport localeBn from '@angular/common/locales/bn'\nimport localeBnExtra from '@angular/common/locales/extra/bn'\nimport localeDe from '@angular/common/locales/de'\nimport localeDeExtra from '@angular/common/locales/extra/de'\nimport localeEn from '@angular/common/locales/en'\nimport localeEnExtra from '@angular/common/locales/extra/en'\nimport localeEs from '@angular/common/locales/es'\nimport localeEsExtra from '@angular/common/locales/extra/es'\nimport localeHi from '@angular/common/locales/hi'\nimport localeHiExtra from '@angular/common/locales/extra/hi'\nimport { NgModule } from '@angular/core'\nimport { FormsModule } from '@angular/forms'\nimport {\n  BrowserModule,\n  BrowserTransferStateModule\n} from '@angular/platform-browser'\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations'\nimport { RouterModule } from '@angular/router'\nimport { ServiceWorkerModule } from '@angular/service-worker'\nimport { TranslateModule, TranslateService } from '@ngx-translate/core'\nimport { interval, Subscription } from 'rxjs'\n\nimport { RootComponent } from './root.component'\nimport { CheckForUpdateComponent } from '../check-for-update/check-for-update.component'\nimport { environment } from '../environments/environment'\nimport { InstallComponent } from '../install/install.component'\nimport { LanguageService } from '../language/language.service'\nimport { MainMenuComponent } from '../main-menu/main-menu.component'\nimport { MaterialModule } from '../material/material.module'\nimport { RootRoutingModule } from '../root-routing/root-routing.module'\nimport {\n  ROUTE_TOKEN,\n  translateModuleOptions\n} from '../translate-loader/translate-browser.loader'\nimport { redirect } from '../redirect/redirect'\n\nregisterLocaleData(localeBn, 'bn', localeBnExtra)\nregisterLocaleData(localeDe, 'de', localeDeExtra)\nregisterLocaleData(localeEn, 'en', localeEnExtra)\nregisterLocaleData(localeEs, 'es', localeEsExtra)\nregisterLocaleData(localeHi, 'hi', localeHiExtra)\n\n/**\n * Entry Module\n */\n@NgModule({\n  declarations: [\n    CheckForUpdateComponent,\n    InstallComponent,\n    MainMenuComponent,\n    RootComponent\n  ],\n  imports: [\n    BrowserAnimationsModule,\n    BrowserModule.withServerTransition({ appId: 'MemoryGameApp' }),\n    BrowserTransferStateModule,\n    CommonModule,\n    FormsModule,\n    HttpClientModule,\n    MaterialModule,\n    RootRoutingModule,\n    RouterModule,\n    ServiceWorkerModule.register('./ngsw-worker.js', {\n      enabled: environment.production\n    }),\n    TranslateModule.forRoot(translateModuleOptions)\n  ],\n  providers: [{ provide: ROUTE_TOKEN, useValue: 'main' }],\n  entryComponents: [CheckForUpdateComponent, InstallComponent, RootComponent],\n  bootstrap: [RootComponent]\n})\n/**\n * Entry Module\n */\nexport class RootModule {\n  constructor(language: LanguageService, translate: TranslateService) {\n    let lang: string\n\n    lang = redirect() || translate.getBrowserLang() || 'en'\n\n    translate.setDefaultLang(lang)\n    language.setLang(lang)\n\n    language.lang.subscribe((val: string): void => {\n      let sub: Subscription\n      sub = translate.use(val).subscribe(\n        (): void => {},\n        (): void => {\n          console.error(`Language \"${val}\": at \"RootModule\" not found.`)\n\n          translate.setTranslation(val, {}, true)\n        },\n        (): void => {\n          if (sub && sub instanceof Subscription) {\n            sub.unsubscribe()\n          }\n        }\n      )\n    })\n\n    translate.onLangChange.subscribe(\n      (val: {\n        lang: string\n        translations: { [key: string]: string }\n      }): void => {\n        language.setBrowser(\n          val.lang,\n          val.translations.TITLE,\n          val.translations.DESCRIPTION\n        )\n      }\n    )\n  }\n}\n","import {\n  ApplicationRef,\n  ComponentRef,\n  enableProdMode,\n  NgModuleRef\n} from '@angular/core'\nimport { enableDebugTools } from '@angular/platform-browser'\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic'\n\nimport { environment } from './environments/environment'\nimport { RootComponent } from './root/root.component'\nimport { RootModule } from './root/root.module'\n\nif (environment.production) {\n  enableProdMode()\n}\n\nwindow.document.addEventListener('DOMContentLoaded', (): void => {\n  window.requestAnimationFrame((): void => {\n    platformBrowserDynamic()\n      .bootstrapModule<RootModule>(RootModule)\n      .then((moduleRef: NgModuleRef<RootModule>): void => {\n        if (!environment.production) {\n          let appRef: ApplicationRef\n          let comRef: ComponentRef<RootComponent>\n\n          appRef = moduleRef.injector.get(ApplicationRef)\n          comRef = appRef.components[0]\n\n          enableDebugTools(comRef)\n        }\n      })\n      .catch<void>((error): void => {\n        console.error(error)\n      })\n  })\n})\n","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"zn8P\";"],"sourceRoot":"webpack:///"}