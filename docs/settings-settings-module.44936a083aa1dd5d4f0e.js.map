{"version":3,"sources":["./src/settings/settings.component.html","./src/settings/settings.component.ts","./src/settings-routing/settings-routing.module.ts","./src/settings/settings.module.ts"],"names":["profiler","profile","SettingOption","title","value","key","this","SettingsComponent","changeDetectorRef","game","settings","language","translate","ambientVolume","effectsVolume","masterVolume","count","match","mode","tempRoute","Settings","settingLabels","settingOptions","push","sub","subscriptions","forEach","Subscription","unsubscribe","label","index","subscribe","val","markForCheck","parseInt","String","event","name","put","then","next","catch","error","console","message","routes","component","path","SettingsRoutingModule","forChild","SettingsModule","lang","use","setTranslation","provide","useValue"],"mappings":"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","file":"settings-settings-module.44936a083aa1dd5d4f0e.js","sourcesContent":["<mat-card class=\"mat-elevation-z2\">\n  <mat-card-title>\n    {{ 'SETTINGS' | translate }}\n    <button\n      mat-flat-button\n      color=\"warn\"\n      type=\"button\"\n      (click)=\"profiler.profile()\"\n      *ngIf=\"!profiler.environment\"\n    >\n      {{ 'PROFILE' | translate }}\n    </button>\n  </mat-card-title>\n</mat-card>\n\n<!--\n<mat-card class=\"mat-elevation-z2\">\n  <mat-card-title>{{ 'LANGUAGE' | translate }}</mat-card-title>\n  <mat-card-content>\n    <a [routerLink]=\"['/', 'en', tempRoute]\">EN</a>\n    <br />\n    <a [routerLink]=\"['/', 'es', tempRoute]\">ES</a>\n    <br />\n    <a [routerLink]=\"['/', 'de', tempRoute]\">DE</a>\n    <br />\n    <a [routerLink]=\"['/', 'hi', tempRoute]\">HI</a>\n    <br />\n    <a [routerLink]=\"['/', 'bn', tempRoute]\">BN</a>\n    <br />\n    <a [routerLink]=\"['/', 'bg', tempRoute]\">BG</a>\n  </mat-card-content>\n</mat-card>\n-->\n\n<mat-card class=\"mat-elevation-z2\">\n  <mat-card-title>{{ 'VOLUME' | translate }}</mat-card-title>\n  <!-- [0, 1, 2] -->\n  <!-- 0 = masterVolume -->\n  <!-- 1 = effectsVolume -->\n  <!-- 2 = ambientVolume -->\n  <ng-container *ngFor=\"let item of [0, 1]; trackBy: trackBy\">\n    <mat-card-content>\n      <h3>{{ settingOptions[item].title | translate }}</h3>\n      <mat-slider\n        [min]=\"0\"\n        [thumbLabel]=\"true\"\n        [step]=\"0.02\"\n        [max]=\"1\"\n        [displayWith]=\"formatLabel\"\n        [tickInterval]=\"0.02\"\n        [(ngModel)]=\"settingOptions[item].value\"\n        (input)=\"inputChange($event, settingOptions[item].key)\"\n      ></mat-slider>\n    </mat-card-content>\n  </ng-container>\n</mat-card>\n\n<mat-card class=\"mat-elevation-z2\">\n  <mat-card-title>{{ 'GAME' | translate }}</mat-card-title>\n  <!-- [3, 4, 5] -->\n  <!-- 3 = match -->\n  <!-- 4 = count -->\n  <!-- 5 = mode -->\n  <ng-container *ngFor=\"let item of [3, 4]; trackBy: trackBy\">\n    <mat-card-content>\n      <h3>{{ settingOptions[item].title | translate }}</h3>\n      <mat-form-field>\n        <mat-label>{{ settingOptions[item].title | translate }}</mat-label>\n        <mat-select\n          [(ngModel)]=\"settingOptions[item].value\"\n          (selectionChange)=\"inputChange($event, settingOptions[item].key)\"\n        >\n          <ng-container *ngIf=\"item === 3\">\n            <mat-option *ngFor=\"let val of [2, 3, 4]\" [value]=\"val\">\n              {{ val | number: '1.0':translate.currentLang }}\n            </mat-option>\n          </ng-container>\n          <ng-container *ngIf=\"item === 4\">\n            <mat-option *ngFor=\"let val of [2, 4, 6]\" [value]=\"val\">\n              {{ val | number: '1.0':translate.currentLang }}\n            </mat-option>\n          </ng-container>\n          <ng-container *ngIf=\"item === 5\">\n            <mat-option\n              *ngFor=\"let val of ['memorize', 'regular']\"\n              [value]=\"val\"\n            >\n              {{ val.toUpperCase() | translate }}\n            </mat-option>\n          </ng-container>\n        </mat-select>\n      </mat-form-field>\n    </mat-card-content>\n  </ng-container>\n</mat-card>\n","import { formatNumber } from '@angular/common'\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  OnDestroy,\n  OnInit\n} from '@angular/core'\nimport { MatSelectChange } from '@angular/material/select'\nimport { MatSliderChange } from '@angular/material/slider'\nimport { TranslateService } from '@ngx-translate/core'\nimport { Subscription } from 'rxjs'\n\nimport { SettingsService } from './settings.service'\nimport { GameService } from '../game/game.service'\nimport { LanguageService } from '../language/language.service'\nimport { ProfilerService } from '../profiler/profiler.service'\nimport { RouteLoction } from '../route-location/route-location'\nimport { MakeArray } from '../utilities/make-array'\nimport { MakeProperty } from '../utilities/make-property'\n\nclass SettingOption {\n  @MakeProperty()\n  public title: string\n\n  @MakeProperty()\n  public key: string\n\n  @MakeProperty()\n  public value: number | string\n\n  constructor(title: string, value: number | string, key: string) {\n    this.title = title\n    this.value = value\n    this.key = key\n  }\n}\n\n@Component({\n  selector: 'app-settings',\n  styleUrls: ['./settings.component.scss'],\n  templateUrl: './settings.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class SettingsComponent implements OnDestroy, OnInit {\n  @MakeArray()\n  private settingLabels: string[]\n\n  @MakeArray()\n  private subscriptions: Subscription[]\n\n  @MakeArray()\n  public settingOptions: SettingOption[]\n\n  @MakeProperty()\n  public tempRoute: string\n\n  constructor(\n    private changeDetectorRef: ChangeDetectorRef,\n    private game: GameService,\n    private settings: SettingsService,\n    public language: LanguageService,\n    public profiler: ProfilerService,\n    public translate: TranslateService\n  ) {}\n\n  public ngOnInit(): void {\n    let ambientVolume: SettingOption\n    let effectsVolume: SettingOption\n    let masterVolume: SettingOption\n\n    let count: SettingOption\n    let match: SettingOption\n    let mode: SettingOption\n\n    this.tempRoute = RouteLoction.Settings\n\n    this.settingLabels = [\n      'masterVolume',\n      'effectsVolume',\n      'ambientVolume',\n      'match',\n      'count',\n      'mode'\n    ]\n\n    //#region Volume\n    masterVolume = new SettingOption(\n      'MASTER_VOLUME',\n      this.game.masterVolume.value,\n      'masterVolume'\n    )\n\n    effectsVolume = new SettingOption(\n      'EFFECTS_VOLUME',\n      this.game.effectsVolume.value,\n      'effectsVolume'\n    )\n\n    ambientVolume = new SettingOption(\n      'AMBIENT_VOLUME',\n      this.game.ambientVolume.value,\n      'ambientVolume'\n    )\n    //#endregion Volume\n\n    //#region Game\n    count = new SettingOption(\n      'UNIQUE_CARDS_COUNT',\n      this.game.count.value,\n      'count'\n    )\n\n    match = new SettingOption('CARDS_TO_MATCH', this.game.match.value, 'match')\n\n    mode = new SettingOption('MODE', this.game.mode.value, 'mode')\n    //#endregion Game\n\n    this.settingOptions.push(\n      masterVolume,\n      effectsVolume,\n      ambientVolume,\n      match,\n      count,\n      mode\n    )\n\n    this.sub()\n  }\n\n  public ngOnDestroy(): void {\n    this.subscriptions.forEach((sub: Subscription): void => {\n      if (sub && sub instanceof Subscription) {\n        sub.unsubscribe()\n      }\n    })\n  }\n\n  private sub(): void {\n    this.settingLabels.forEach((label: string, index: number) => {\n      let sub: Subscription\n\n      sub = this.game[label].subscribe((val: number): void => {\n        this.settingOptions[index].value = val\n        this.changeDetectorRef.markForCheck()\n      })\n\n      this.subscriptions.push(sub)\n    })\n  }\n\n  public formatLabel(value: number): number {\n    return parseInt(String(value * 100), 10)\n  }\n\n  public inputChange(\n    event: MatSliderChange | MatSelectChange,\n    name: string\n  ): void {\n    this.settings\n      .put(name, event.value)\n      .then((val: IDBValidKey): void => {\n        this.game[name].next(event.value)\n      })\n      .catch((error: DOMException): void => {\n        console.error(error.message)\n      })\n  }\n\n  public trackBy(index: number, name: SettingOption): number {\n    return index\n  }\n}\n","import { NgModule } from '@angular/core'\nimport { Routes, RouterModule } from '@angular/router'\n\nimport { SettingsComponent } from '../settings/settings.component'\n\nconst routes: Routes = [\n  {\n    component: SettingsComponent,\n    path: ''\n  }\n]\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class SettingsRoutingModule {}\n","import { CommonModule } from '@angular/common'\nimport { NgModule } from '@angular/core'\nimport { FormsModule } from '@angular/forms'\nimport { RouterModule } from '@angular/router'\nimport { TranslateModule, TranslateService } from '@ngx-translate/core'\nimport { Subscription } from 'rxjs'\n\nimport { SettingsComponent } from './settings.component'\nimport { LanguageComponent } from '../language/language.component'\nimport { LanguageService } from '../language/language.service'\nimport { MaterialModule } from '../material/material.module'\nimport { SettingsRoutingModule } from '../settings-routing/settings-routing.module'\nimport {\n  ROUTE_TOKEN,\n  translateModuleOptions\n} from '../translate-loader/translate-browser.loader'\n\n/**\n * Settings Module\n */\n@NgModule({\n  declarations: [LanguageComponent, SettingsComponent],\n  imports: [\n    CommonModule,\n    FormsModule,\n    MaterialModule,\n    SettingsRoutingModule,\n    RouterModule,\n    TranslateModule.forChild(translateModuleOptions)\n  ],\n  providers: [{ provide: ROUTE_TOKEN, useValue: 'settings' }],\n  entryComponents: [SettingsComponent],\n  bootstrap: [SettingsComponent]\n})\n/**\n * Settings Module\n */\nexport class SettingsModule {\n  constructor(language: LanguageService, translate: TranslateService) {\n    language.lang.subscribe((lang: string): void => {\n      let sub: Subscription\n\n      sub = translate.use(lang).subscribe(\n        (): void => {},\n        (): void => {\n          console.error(`Language \"${lang}\": at \"SettingsModule\" not found.`)\n\n          translate.setTranslation(lang, {}, true)\n        },\n        (): void => {\n          if (sub && sub instanceof Subscription) {\n            sub.unsubscribe()\n          }\n        }\n      )\n    })\n  }\n}\n"],"sourceRoot":"webpack:///"}