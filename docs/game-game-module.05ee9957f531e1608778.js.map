{"version":3,"sources":["./src/flip-animation/flip-animation.ts","./src/game-end/game-end.component.html","./src/game-end/game-end.component.ts","./src/stopwatch/stopwatch.component.ts","./src/stopwatch/stopwatch.component.html","./src/statistics/statistics.service.ts","./src/game/game.component.html","./src/game/game.component.ts","./src/game-routing/game-routing.module.ts","./src/game/game.module.ts"],"names":["flipAnimation","opacity","transform","GameEndComponent","data","translate","StopwatchComponent","changeDetectorRef","device","game","this","milliseconds","seconds","minutes","hours","markForCheck","currentTime","timeElapsed","timeBegan","Date","getTime","getUTCHours","getUTCMinutes","getUTCSeconds","getUTCMilliseconds","stop","active","pausedTime","time","unsubscribe","timer","interval","subscribe","val","clockRunning","focusBlur","Subscription","playing","value","continue","clear","reset","StatisticsService","highScoresService","recentScoresService","scores","statistic","add","then","ensureScoresLength","scoreName","gameTypes","statistics","reduce","pv","cv","types","mode","match","count","includes","filter","getScoresBy","sort","push","forEach","ensureGroupLength","length","keyID","pop","delete","found","findIndex","score","splice","catch","error","console","message","arg1","arg2","arg3","arg4","arg5","arg6","arg7","arg8","arg9","arg10","arg11","arg12","arg13","addHighScoreStatistic","addRecentScoreStatistic","profiler","profile","GameComponent","platformId","matDialog","mediaMatcher","cards","settings","masterVolume","effectsVolume","cardCount","num","pair","deck","is","not","mediaMatcherQuery","matches","volume","AC","audioContext","bufferSource","gainNode","window","AudioContext","webkitAudioContext","createGain","createGainNode","gain","createBufferSource","connect","clickSoundBuffer","res","decodeAudioData","decoded","buffer","destination","start","noteOn","log","matchMedia","addListener","mediaQueryListener","bind","id","cardChosen","namesMatch","every","card","index","array","name","pipe","take","cardsWon","flipped","cardsChosenId","map","clickSound","stopwatch","next","flips","addStatistic","open","disableClose","afterClosed","Event","winReveal","unFlipped","unflipped","indexOf","Math","random","event","preventDefault","restart","checking","updateFlipped","checkForMatch","option0","option1","swap0","swap1","item","createMediaMatcher","init","requestAnimationFrame","Promise","resolve","reject","undefined","Array","keys","shuffle","removeListener","routes","component","path","GameRoutingModule","forChild","GameModule","language","lang","sub","use","setTranslation","provide","useValue"],"mappings":"mPAUO,MAAMA,EAA0C,YACrD,gBACA,CACE,YACE,IACA,YAAM,CACJC,QAAS,IACTC,UAAW,mBAGf,YACE,IACA,YAAM,CACJD,QAAS,IACTC,UAAW,qBAGf,YACE,IACA,YAAM,CACJD,QAAS,IACTC,UAAW,mBAGf,YACE,IACA,YAAM,CACJD,QAAS,IACTC,UAAW,qBAGf,YACE,IACA,YAAM,CACJD,QAAS,IACTC,UAAW,qBAGf,YAAW,SAAU,CACnB,YAAM,CACJA,UAAW,gBACXD,QAAS,MAEX,YACE,QACA,YAAU,CACR,YAAM,CACJC,UAAW,gBACXD,QAAS,MAEX,YAAM,CACJC,UAAW,gBACXD,QAAS,a,qDCjDjB,eACE,Q,iBACF,Q,oBADE,wF,yBAEF,eACE,Q,iBACF,Q,oBADE,2F,yBAEF,eAKE,Q,iBACF,Q,oBADE,2F,yBAEF,eAQE,Q,iBACF,Q,oBADE,+FCtBC,Y,MAAME,EACX,YACkCC,EACzBC,GADyB,KAAAD,OACzB,KAAAC,a,6CAHEF,GAAgB,KAEjB,KAAe,Y,uBAFdA,EAAgB,yPDZ7B,eAAqB,Q,oBAAiC,OACtD,gBACE,YACE,Q,wCACF,OACA,YACE,YAAG,S,qBAAyB,OAC3B,cACD,gBAAM,S,kBAAsD,OAC9D,OACA,aACE,aAAG,S,qBAAwB,OAC1B,cACD,wBAGA,wBAGA,wBAOA,wBAUF,OACF,OACA,iBACE,oBAME,S,qBACF,OACF,Q,MA/CqB,mEAGjB,wFAGG,kCAEG,qEAGH,iCAEG,2CAGA,oEAIJ,6FAOA,2HAgBF,yCAEA,4C,wFCjCG,G,gECmBA,Y,MAAMG,EA8CX,YACUC,EACAC,EACAC,EACDJ,GAHC,KAAAE,oBACA,KAAAC,SACA,KAAAC,OACD,KAAAJ,YAMF,QACLK,KAAKC,aAAe,EACpBD,KAAKE,QAAU,EACfF,KAAKG,QAAU,EACfH,KAAKI,MAAQ,EACbJ,KAAKH,kBAAkBQ,eAQjB,eACN,IAAIC,EACAC,EAECP,KAAKQ,YACRR,KAAKQ,UAAY,IAAIC,MAGvBH,EAAc,IAAIG,KAClBF,EAAc,IAAIE,KAAKH,EAAYI,UAAYV,KAAKQ,UAAUE,WAE9DV,KAAKI,MAAQG,EAAYI,cACzBX,KAAKG,QAAUI,EAAYK,gBAC3BZ,KAAKE,QAAUK,EAAYM,gBAC3Bb,KAAKC,aAAeM,EAAYO,qBAGf,KAAfd,KAAKI,OACY,KAAjBJ,KAAKG,SACY,KAAjBH,KAAKE,SACLF,KAAKC,cAAgB,KAErBD,KAAKe,OAGPf,KAAKH,kBAAkBQ,eAMlB,WACL,GAAIL,KAAKgB,OACP,OAGF,IAAIV,EACAW,EACAC,EAEJlB,KAAKmB,cACLnB,KAAKgB,QAAS,EAEdV,EAAc,IAAIG,KAElBS,EAAO,IAAI,IAAKlB,KAAKC,aAAcD,KAAKE,QAASF,KAAKG,QAASH,KAAKI,OAEpEa,EAAa,YAAWC,GAExBlB,KAAKQ,UAAY,IAAIC,KAAKH,EAAYI,UAAYO,GAElDjB,KAAKoB,MAAQ,OAAAC,EAAA,GAAS,IAAIC,UAAWC,IACnCvB,KAAKwB,iBAIF,cACLxB,KAAKmB,cAEDnB,KAAKyB,WAAazB,KAAKyB,qBAAqBC,EAAA,GAC9C1B,KAAKyB,UAAUN,cAIZ,WACLnB,KAAKyB,UAAYzB,KAAKF,OAAOkB,OAAOM,UAAWC,IACxCA,EAIDA,GAAOvB,KAAKD,KAAK4B,QAAQC,OAC3B5B,KAAK6B,WAJL7B,KAAKe,SAYJ,QACLf,KAAKe,OACLf,KAAK8B,QAMA,UACL9B,KAAK+B,QACL/B,KAAK6B,WAMA,OACA7B,KAAKgB,SAIVhB,KAAKgB,QAAS,EAEdhB,KAAKwB,eAELxB,KAAKmB,eAMA,cACDnB,KAAKoB,OAASpB,KAAKoB,iBAAiBM,EAAA,GACtC1B,KAAKoB,MAAMD,e,6CArLJvB,GAAkB,0C,uBAAlBA,EAAkB,2EC/B/B,eACE,Q,wFAQF,Q,MARE,+Q,mDD8BK,G,gEEFA,Y,MAAMoC,EAeX,YACUC,EACAC,GADA,KAAAD,oBACA,KAAAC,sBAbV,iBACE,OAAOlC,KAAKiC,kBAAkBE,OAMhC,mBACE,OAAOnC,KAAKkC,oBAAoBC,OAa1B,sBAAsBC,GAC5BA,EAAY,IAAI,IAAUA,GAE1BpC,KAAKiC,kBAAkBI,IAAID,GAAWE,KAAMf,IAC1CvB,KAAKuC,mBAAmB,gBASpB,mBAAmBC,GACzB,IAAIC,EAEJA,EAAY,CAAEA,UAAW,GAAIC,WAAY,IAEzCD,EAAYzC,KAAKwC,GAAWG,OAC1B,CAACC,EAAkBC,KACjB,IAAIC,EAGJ,GAFAA,EAAQ,GAAGD,EAAGE,QAAQF,EAAGG,SAASH,EAAGI,SAEhCL,EAAGH,UAAUS,SAASJ,GAAQ,CACjC,IAAIK,EAEJA,EAASnD,KAAQwC,EAAH,WAAuBY,YACnCP,EAAGI,MACHJ,EAAGG,MACHH,EAAGE,MAGa,iBAAdP,IACFW,EAASnD,KAAQwC,EAAH,WAAuBa,KAAKF,IAG5CP,EAAGH,UAAUa,KAAKR,GAClBF,EAAGF,WAAWY,KAAKH,GAGrB,OAAOP,GAETH,GAGFA,EAAUC,WAAWa,QAASb,IAC5B1C,KAAKwD,kBAAkBd,EAAYF,KAS/B,kBACNE,EACAF,GAEA,GAAIE,EAAWe,OAAS,GAAI,CAC1B,IAAIC,EACJA,EAAQhB,EAAWiB,MAAMD,MAEzB1D,KAAQwC,EAAH,WACFoB,OAAOF,GACPpB,KAAMf,IACL,IAAIsC,EAEJA,EAAQ7D,KAAKwC,GAAWsB,UAAWC,GAC1BA,EAAML,QAAUA,IAGV,IAAXG,GACF7D,KAAKwC,GAAWwB,OAAOH,EAAO,GAG5BnB,EAAWe,OAAS,IACtBzD,KAAKwD,kBAAkBd,EAAYF,KAGtCyB,MAAOC,IACNC,QAAQD,MAAMA,EAAME,YAUpB,wBAAwBhC,GAC9BA,EAAY,IAAI,IAAUA,GAE1BpC,KAAKkC,oBAAoBG,IAAID,GAAWE,KAAMf,IAC5CvB,KAAKuC,mBAAmB,kBAoHrB,aACL8B,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,GAEA,IAAIrD,EAIAA,EAFgB,iBAATyC,GAAqC,iBAATI,EACjC,YAAkBQ,GACZ,IAAI,IACVZ,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,GAGM,IAAI,IACVX,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,GAGqB,iBAATZ,GAAqC,iBAATI,EACxC,YAAkBE,GACZ,IAAI,IAAUN,EAAMC,EAAMC,EAAMC,EAAMC,EAAMC,GAE5C,IAAI,IAAUL,EAAMC,EAAMC,EAAMC,EAAMC,EAAMC,EAAeC,GAE5DN,aAAgB,IACjBA,EAEA,IAAI,IAAUA,GAGxBrE,KAAKkF,sBAAsBtD,GAC3B5B,KAAKmF,wBAAwBvD,GAMxB,kBACL5B,KAAKiC,kBAAkBH,QACvB9B,KAAKkC,oBAAoBJ,S,6CAnThBE,GAAiB,sB,yBAAjBA,EAAiB,QAAjBA,EAAiB,qBARhB,S,GAQP,G,uGCvBD,mBAIE,+CAASoD,SAAAC,aAGT,Q,oBACF,O,MADE,2C,qBA8BA,wB,4GAHF,QAGE,gCAMA,wBAOE,gBAA0B,kFACxB,gBASE,iBAKA,iBACF,OACF,OACF,OACF,O,gDA/BI,8FAMA,gGASI,yCAA+B,+DAQ7B,iDAAqC,2CAIlC,iD,yBAlCnB,qBACE,2BACE,0BACE,gCAoCF,OACF,OACF,Q,oBAvCmB,+BAEX,qCAAgE,2BCJjE,Y,MAAMC,EA4HX,YACwCC,EAC9B1F,EACA2F,EACAC,EACA/C,EACDgD,EACA3F,EACAqF,EACAO,EACAhG,GAT+B,KAAA4F,aAC9B,KAAA1F,oBACA,KAAA2F,YACA,KAAAC,eACA,KAAA/C,aACD,KAAAgD,QACA,KAAA3F,OACA,KAAAqF,WACA,KAAAO,WACA,KAAAhG,YA5GT,oBACE,OAAOK,KAAKD,KAAK6F,aAAahE,MAAQ5B,KAAKD,KAAK8F,cAAcjE,MAMhE,cACE,IAAIkE,EACAC,EACAC,EAIJ,OAFAF,EAAY9F,KAAK0F,MAAMO,KAAKxC,OAEpBqC,GAQN,KAAK,GACHE,EAAO,CACLE,GAAI,EACJC,IAAK,GAEP,MAEF,KAAK,GACHH,EAAO,CACLE,GAAI,EACJC,IAAK,GAEP,MAEF,KAAK,GACHH,EAAO,CACLE,GAAI,EACJC,IAAK,GAEP,MAEF,KAAK,GACHH,EAAO,CACLE,GAAI,EACJC,IAAK,GAEP,MAEF,KAAK,EACHH,EAAO,CACLE,GAAI,EACJC,IAAK,GAEP,MAEF,KAAK,EACHH,EAAO,CACLE,GAAI,EACJC,IAAK,GAEP,MAEF,KAAK,EAOL,QACEH,EAAO,CACLE,GAAI,EACJC,IAAK,GAKX,OAAKnG,KAAKoG,mBAKRL,EADE/F,KAAKoG,kBAAkBC,QACnBL,EAAKE,GAELF,EAAKG,IAGNJ,GATEC,EAAKE,GA+BR,WAAWI,GACjB,IAAIC,EAIAC,EACAC,EACAC,EAEJH,EAAKI,OAAOC,cAAiBD,OAAeE,mBAE5CL,EAAe,IAAID,EAEdC,EAAaM,aAChBN,EAAaM,WAAcN,EAAqBO,gBAGlDL,EAAWF,EAAaM,aACxBJ,EAASM,KAAKpF,MAAQ0E,EAEtBG,EAAeD,EAAaS,qBAE5BR,EAAaS,QAAQR,GAErB1G,KAAKD,KAAKoH,mBAAmB7E,KAAM8E,IACjCZ,EAAaa,gBACXD,EACCE,IACCb,EAAac,OAASD,EAEtBZ,EAASQ,QAAQV,EAAagB,aAEzBf,EAAagB,QAChBhB,EAAagB,MAAShB,EAAqBiB,QAG7CjB,EAAagB,MAAM,IAEpBvD,IACCC,QAAQwD,IAAIzD,OAMZ,qBACN,OAAOlE,KAAKH,kBAAkBQ,eAGxB,qBACF,YAAkBL,KAAKuF,cACzBvF,KAAKoG,kBAAoBpG,KAAKyF,aAAamC,WACzC,4BAGF5H,KAAKoG,kBAAkByB,YAAY7H,KAAK8H,mBAAmBC,KAAK/H,QAY5D,cAAcgI,GACpB,IAAIC,EACAC,EA+EJ,GA7EAD,EAAaD,EAAGrF,OAAe,CAACC,EAAYC,KAC1CD,EAAGU,KAAKtD,KAAK0F,MAAMO,KAAKpD,IACjBD,GACN,IAEHsF,EAAaD,EAAWE,MACtB,CAACC,EAAYC,EAAeC,IACnBF,EAAKG,OAASD,EAAM,GAAGC,MAI9BL,GACF,OAAA7G,EAAA,GAAS,KACNmH,KAAa,OAAAC,EAAA,GAAa,IAC1BnH,UAAU,MACLtB,KAAKD,KAAK4B,QAAQC,OAAS5B,KAAK0I,SAASjF,UACvCuE,EAAGvE,SAAWzD,KAAKD,KAAKiD,MAAMpB,QAChCqG,EAAW1E,QAAS6E,IAClBA,EAAKO,QAAU,IAGjB,OAAAtH,EAAA,GAAS,KACNmH,KAAa,OAAAC,EAAA,GAAa,IAC1BnH,UAAU,MACLtB,KAAKD,KAAK4B,QAAQC,OAAS5B,KAAK0I,SAASjF,UAC3CwE,EAAW1E,QAAS6E,IAClBA,EAAKO,QAAU,IAGjB3I,KAAKH,kBAAkBQ,mBAK/BL,KAAKH,kBAAkBQ,kBAIzB2H,EAAGvE,SAAWzD,KAAKD,KAAKiD,MAAMpB,QAChC5B,KAAK4I,cAAgB,GAErB5I,KAAK0I,SAASpF,KAAK,IACd2E,EAAWY,IAAaT,GAClBA,EAAKG,WAKlB,OAAAlH,EAAA,GAAS,KACNmH,KAAa,OAAAC,EAAA,GAAa,IAC1BnH,UAAU,KACLtB,KAAKD,KAAK4B,QAAQC,QACpBqG,EAAW1E,QAAS6E,IAClBA,EAAKO,QAAU,IAGjB,OAAAtH,EAAA,GAAS,KACNmH,KAAa,OAAAC,EAAA,GAAa,IAC1BnH,UAAU,KACLtB,KAAKD,KAAK4B,QAAQC,QACpBqG,EAAW1E,QAAS6E,IAClBA,EAAKO,QAAU,IAGjB3I,KAAK8I,WAAW,IAAO9I,KAAK6F,eAE5B7F,KAAKH,kBAAkBQ,kBAI7BL,KAAKH,kBAAkBQ,kBAI7BL,KAAK4I,cAAgB,IAGnB5I,KAAK0I,SAASjF,SAAWzD,KAAKD,KAAKkD,MAAMrB,MAAO,CAClD,IAAIQ,EAEJpC,KAAK+I,UAAUhI,OACff,KAAKD,KAAK4B,QAAQqH,MAAK,GAEvB5G,EAAY,IAAI,IACdpC,KAAKD,KAAKgD,KAAKnB,MACf5B,KAAKD,KAAKiD,MAAMpB,MAChB5B,KAAKiJ,MACLjJ,KAAKD,KAAKkD,MAAMrB,MAChB5B,KAAK+I,UAAU9I,aACfD,KAAK+I,UAAU7I,QACfF,KAAK+I,UAAU5I,QACfH,KAAK+I,UAAU3I,MACf,KACA,KACA,KACA,MAGFJ,KAAK0C,WAAWwG,aAAa9G,GAE7BpC,KAAKH,kBAAkBQ,eAEvB,OAAAgB,EAAA,GAAS,KACNmH,KAAa,OAAAC,EAAA,GAAa,IAC1BnH,UAAU,KACTtB,KAAKwF,UACF2D,KAAK,EAAkB,CACtBzJ,KAAM0C,EACNgH,cAAc,IAEfC,cACA/H,UAAWC,IACE,UAARA,GACFvB,KAAK+B,MAAM,IAAIuH,MAAM,YAI3B,OAAAjI,EAAA,GAAS,KACNmH,KAAa,OAAAC,EAAA,GAAa,IAC1BnH,UAAU,KACTtB,KAAKuJ,iBAMT,cAAclB,GACpB,GAAIrI,KAAKwJ,UAAUtG,SAASmF,GAAQ,CAClC,IAAIoB,EAEJA,EAAYzJ,KAAKwJ,UAAUE,QAAQrB,GACnCrI,KAAKwJ,UAAUxF,OAAOyF,EAAW,GAEjCzJ,KAAKwJ,UAAUnG,KAAK,IACX,GAAMsG,KAAKC,WAWjB,SAASC,EAAmBxB,GAQjC,GAPAwB,EAAMC,iBAED9J,KAAKD,KAAK4B,QAAQC,QACrB5B,KAAKD,KAAK4B,QAAQqH,MAAK,GACvBhJ,KAAK+I,UAAUgB,YAGZ/J,KAAK0F,MAAMO,KAAKoC,GAAOM,UAAY3I,KAAKgK,SAAU,CAarD,GAZAhK,KAAKiJ,QACLjJ,KAAK4I,cAActF,KAAK+E,GAOxBrI,KAAK0F,MAAMO,KAAKoC,GAAOM,QAAU,EAEjC3I,KAAKiK,cAAc5B,GAEfrI,KAAK4I,cAAcnF,OAAS,EAAG,CACjC,IAAIuE,EACJhI,KAAKgK,UAAW,EAEhBhC,EAAK,IAAIhI,KAAK4I,eAEd,OAAAvH,EAAA,GAAS,KACNmH,KAAa,OAAAC,EAAA,GAAa,IAC1BnH,UAAU,KACLtB,KAAKD,KAAK4B,QAAQC,OACpB5B,KAAKkK,cAAclC,GAGrBhI,KAAKgK,UAAW,IAItBhK,KAAK8I,WAAW9I,KAAK6F,gBAIjB,YACD7F,KAAKD,KAAK4B,QAAQC,QACrB5B,KAAK0F,MAAMO,KAAK1C,QAAS6E,IACvBA,EAAKO,QAAU,IAGjB3I,KAAKH,kBAAkBQ,gBAUnB,eAAe8J,EAAiBC,GACtC,GACEpK,KAAK4I,cAAcnF,SAAWzD,KAAKD,KAAKiD,MAAMpB,OAC9C5B,KAAK0F,MAAMO,KAAKkE,GAAS5B,OAASvI,KAAK0F,MAAMO,KAAKmE,GAAS7B,MAC3DvI,KAAKwJ,UAAUtG,SAASkH,GACxB,CACA,IAAIC,EACAC,EACAzG,EAEJwG,EAAQrK,KAAK0F,MAAMO,KAAKmE,GAExBvG,EAAQ7D,KAAKwJ,UAAU1F,UAAWyG,GACzBvK,KAAK0F,MAAMO,KAAKsE,GAAMhC,OAAS8B,EAAM9B,OAG/B,IAAX1E,IACFyG,EAAQtK,KAAK0F,MAAMO,KAAKjG,KAAKwJ,UAAU3F,IACvC7D,KAAK0F,MAAMO,KAAKjG,KAAKwJ,UAAU3F,IAAUwG,EACzCrK,KAAK0F,MAAMO,KAAKmE,GAAWE,IAM1B,WACLtK,KAAKwK,qBACLxK,KAAK+B,MAAM,IAAIuH,MAAM,UACjB,YAAkBtJ,KAAKuF,YACzBvF,KAAKyH,MAAM,GAENzH,KAAK2F,SAASA,UACjB3F,KAAK2F,SAASA,SAASrC,KAAK,IAAI,IAAQ,QAAS,IAM/C,MAAML,GACR,YAAkBA,KACpBA,EAAQ,GAGNA,EAAQ,IACVkB,QAAQD,MAAM,wCAIhBlE,KAAKyK,OACFnI,KAAK,KACJtC,KAAK+B,MAAM,IAAIuH,MAAM,YAEtBrF,MAAOC,IACNyC,OAAO+D,sBAAsB,KAC3B1K,KAAKyH,QAAQxE,OAKb,OACN,OAAO,IAAI0H,QACT,CACEC,EACAC,KAEI7K,KAAK2F,SAASA,SAASlC,OACzBmH,OAAQE,GAERD,OAAOC,KAYR,MAAMjB,GACXA,EAAMC,iBAEN9J,KAAK0F,MAAMO,KAAK1C,QAAS6E,IACvBA,EAAKO,QAAU,IAGjB3I,KAAKwJ,UAAY,IAAIuB,MAAM/K,KAAK0F,MAAMO,KAAKxC,QAAQuH,QACnDhL,KAAKwJ,UAAUnG,KAAK,IACX,GAAMsG,KAAKC,UAEpB5J,KAAK4I,cAAgB,GACrB5I,KAAK0I,SAAW,GAChB1I,KAAKiJ,MAAQ,EAEbjJ,KAAK0F,MAAMuF,UACXjL,KAAK+I,UAAUhI,OACff,KAAK+I,UAAUjH,QACf9B,KAAKD,KAAK4B,QAAQqH,MAAK,GAEvBhJ,KAAKH,kBAAkBQ,eAIlB,QAAQgI,EAAeE,GAC5B,OAAOF,EAIF,cACD,YAAkBrI,KAAKuF,aAEzBvF,KAAKoG,kBAAkB8E,eAAelL,KAAK8H,qB,6CA3gBpCxC,GAAa,KA6Hd,KAAW,0F,uBA7HVA,EAAa,iD,MAAA,K,KAyHb,GAAoB,G,8jBD9JjC,qBACE,+BACE,yBACE,Q,sDAGA,yBASF,OACA,yBACE,Q,uCAEF,OACA,0BACE,yBACF,OACF,OACA,gCACE,6BACE,oBAIE,iCAAS,EAAAvD,MAAA,MAET,S,qBACF,OACF,OACF,OACF,OACA,6B,MAlCM,4KAQE,6CAMF,iGAeE,0CAK2B,kD,u1CCHrB,CAACzC,IAAc,oB,GAGtB,GChCP,MAAM6L,EAAiB,CACrB,CACEC,UAAW,EACXC,KAAM,KAQH,Y,MAAMC,G,8BAAAA,I,oDAAAA,IAAiB,SAHnB,CAAC,IAAaC,SAASJ,IACtB,O,GAEL,G,wCCoBA,Y,MAAMK,EACX,YAAYC,EAA2B9L,GACrC8L,EAASC,KAAKpK,UAAWoK,IACvB,IAAIC,EAEJA,EAAMhM,EAAUiM,IAAIF,GAAMpK,UACxB,OACA,KACE6C,QAAQD,MAAM,aAAawH,kCAE3B/L,EAAUkM,eAAeH,EAAM,IAAI,IAErC,KACMC,GAAOA,aAAejK,EAAA,GACxBiK,EAAIxK,mB,8BAdHqK,EAAU,WALT,K,oDAKDA,GAAU,gCAPV,CAAC,CAAEM,QAAS,IAAaC,SAAU,SAAS,SAP9C,CACP,IACA,EACA,IACA,IACA,IAAgBR,SAAS,S,GAStB","file":"game-game-module.05ee9957f531e1608778.js","sourcesContent":["import {\n  animate,\n  AnimationTriggerMetadata,\n  keyframes,\n  state,\n  style,\n  transition,\n  trigger\n} from '@angular/animations'\n\nexport const flipAnimation: AnimationTriggerMetadata = trigger(\n  'flipAnimation',\n  [\n    state(\n      '0',\n      style({\n        opacity: '1',\n        transform: 'rotateY(0deg)'\n      })\n    ),\n    state(\n      '1',\n      style({\n        opacity: '1',\n        transform: 'rotateY(180deg)'\n      })\n    ),\n    state(\n      '2',\n      style({\n        opacity: '0',\n        transform: 'rotateY(0deg)'\n      })\n    ),\n    state(\n      '3',\n      style({\n        opacity: '1',\n        transform: 'rotateY(180deg)'\n      })\n    ),\n    state(\n      '4',\n      style({\n        opacity: '0',\n        transform: 'rotateY(180deg)'\n      })\n    ),\n    transition('1 => 4', [\n      style({\n        transform: 'rotateY(0deg)',\n        opacity: '1'\n      }),\n      animate(\n        '250ms',\n        keyframes([\n          style({\n            transform: 'rotateY(0deg)',\n            opacity: '1'\n          }),\n          style({\n            transform: 'rotateY(0deg)',\n            opacity: '0'\n          })\n        ])\n      )\n    ])\n  ]\n)\n","<h1 mat-dialog-title>🎉 {{ 'YOU_WON' | translate }} 🎉</h1>\n<div mat-dialog-content>\n  <p>\n    {{ 'YOUR_RESULTS_FOR_THIS_GAME' | translate }}{{ 'FULL_STOP' | translate }}\n  </p>\n  <p>\n    <b>{{ 'FLIPS' | translate }}</b\n    >:\n    <span>{{ data.flips | number: '1.0':translate.currentLang }}</span>\n  </p>\n  <p>\n    <b>{{ 'TIME' | translate }}</b\n    >:\n    <span *ngIf=\"data.complete.hours\">\n      {{ data.complete.hours | number: '2.0':translate.currentLang }} hr\n    </span>\n    <span *ngIf=\"data.complete.minutes || data.complete.hours\">\n      {{ data.complete.minutes | number: '2.0':translate.currentLang }} min\n    </span>\n    <span\n      *ngIf=\"\n        data.complete.seconds || data.complete.minutes || data.complete.hours\n      \"\n    >\n      {{ data.complete.seconds | number: '2.0':translate.currentLang }} sec\n    </span>\n    <span\n      *ngIf=\"\n        data.complete.milliseconds ||\n        data.complete.seconds ||\n        data.complete.minutes ||\n        data.complete.hours\n      \"\n    >\n      {{ data.complete.milliseconds | number: '3.0':translate.currentLang }} ms\n    </span>\n  </p>\n</div>\n<div mat-dialog-actions>\n  <button\n    mat-flat-button\n    color=\"primary\"\n    type=\"button\"\n    [mat-dialog-close]=\"'reset'\"\n  >\n    {{ 'RESET' | translate }}\n  </button>\n</div>\n","import { ChangeDetectionStrategy, Component, Inject } from '@angular/core'\nimport { MAT_DIALOG_DATA } from '@angular/material/dialog'\nimport { TranslateService } from '@ngx-translate/core'\n\nimport { Statistic } from '../statistic/statistic'\n\n@Component({\n  selector: 'app-game-end',\n  templateUrl: './game-end.component.html',\n  styleUrls: ['./game-end.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class GameEndComponent {\n  constructor(\n    @Inject(MAT_DIALOG_DATA) public data: Statistic,\n    public translate: TranslateService\n  ) {}\n}\n","import {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  OnDestroy,\n  OnInit\n} from '@angular/core'\nimport { TranslateService } from '@ngx-translate/core'\nimport { interval, Subscription } from 'rxjs'\n\nimport { createTime } from '../create-time/create-time'\nimport { DeviceService } from '../device/device.service'\nimport { GameService } from '../game/game.service'\nimport { Time } from '../time/time'\n\n/**\n * Display a simple stopwatch with\n * `hours`, `minutes`, `seconds`, `milliseconds`\n * with start, stop, continue, and reset functionality.\n */\n@Component({\n  selector: 'app-stopwatch',\n  templateUrl: './stopwatch.component.html',\n  styleUrls: ['./stopwatch.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\n/**\n * Display a simple stopwatch with\n * `hours`, `minutes`, `seconds`, `milliseconds`\n * with start, stop, continue, and reset functionality.\n */\nexport class StopwatchComponent implements OnDestroy, OnInit {\n  /**\n   * Tells if the stopwatch is paused/stopped or running\n   *\n   * * `true` = running\n   * * `false` = paused/stopped\n   */\n  private active: boolean\n  /**\n   * The time the stopwatch started.\n   */\n  private timeBegan: Date\n  /**\n   * The subscription to the timer.\n   */\n  private timer: Subscription\n  /**\n   * The subscription to the window focus/blur events.\n   */\n  private focusBlur: Subscription\n\n  /**\n   * Hours time. Displayed to 2+ integer places. Shouldn't occur.\n   *\n   * ex. 00, 01, 12, 100\n   */\n  public hours: number\n  /**\n   * Minutes time. Displayed to 2 integer places. Always <60. Rarely occurs.\n   *\n   * ex. 00, 05, 12\n   */\n  public minutes: number\n  /**\n   * Seconds time. Displayed to 2 integer places. Always <60.\n   *\n   * ex. 00, 05, 12\n   */\n  public seconds: number\n  /**\n   * Milliseconds time. Displayed to 3 integer places.\n   *\n   * ex. 000, 024, 050, 120\n   */\n  public milliseconds: number\n\n  constructor(\n    private changeDetectorRef: ChangeDetectorRef,\n    private device: DeviceService,\n    private game: GameService,\n    public translate: TranslateService\n  ) {}\n\n  /**\n   * Set stopwatch back to 0 time.\n   */\n  public clear(): void {\n    this.milliseconds = 0\n    this.seconds = 0\n    this.minutes = 0\n    this.hours = 0\n    this.changeDetectorRef.markForCheck()\n  }\n\n  /**\n   * Update the stopwatch values.\n   *\n   * `hours`, `minutes`, `seconds`, `milliseconds`.\n   */\n  private clockRunning(): void {\n    let currentTime: Date\n    let timeElapsed: Date\n\n    if (!this.timeBegan) {\n      this.timeBegan = new Date()\n    }\n\n    currentTime = new Date()\n    timeElapsed = new Date(currentTime.getTime() - this.timeBegan.getTime())\n\n    this.hours = timeElapsed.getUTCHours()\n    this.minutes = timeElapsed.getUTCMinutes()\n    this.seconds = timeElapsed.getUTCSeconds()\n    this.milliseconds = timeElapsed.getUTCMilliseconds()\n\n    if (\n      this.hours === 23 &&\n      this.minutes === 59 &&\n      this.seconds === 58 &&\n      this.milliseconds >= 900\n    ) {\n      this.stop()\n    }\n\n    this.changeDetectorRef.markForCheck()\n  }\n\n  /**\n   * Continue the stopwatch.\n   */\n  public continue(): void {\n    if (this.active) {\n      return\n    }\n\n    let currentTime: Date\n    let pausedTime: number\n    let time: Time\n\n    this.unsubscribe()\n    this.active = true\n\n    currentTime = new Date()\n\n    time = new Time(this.milliseconds, this.seconds, this.minutes, this.hours)\n\n    pausedTime = createTime(time)\n\n    this.timeBegan = new Date(currentTime.getTime() - pausedTime)\n\n    this.timer = interval(10).subscribe((val: number): void => {\n      this.clockRunning()\n    })\n  }\n\n  public ngOnDestroy(): void {\n    this.unsubscribe()\n\n    if (this.focusBlur && this.focusBlur instanceof Subscription) {\n      this.focusBlur.unsubscribe()\n    }\n  }\n\n  public ngOnInit(): void {\n    this.focusBlur = this.device.active.subscribe((val: boolean): void => {\n      if (!val) {\n        this.stop()\n        return\n      }\n      if (val && this.game.playing.value) {\n        this.continue()\n      }\n    })\n  }\n\n  /**\n   * Stop the stopwatch and set back to 0 time.\n   */\n  public reset(): void {\n    this.stop()\n    this.clear()\n  }\n\n  /**\n   * Reset the stopwatch and start.\n   */\n  public restart(): void {\n    this.reset()\n    this.continue()\n  }\n\n  /**\n   * Stop the stopwatch.\n   */\n  public stop(): void {\n    if (!this.active) {\n      return\n    }\n\n    this.active = false\n\n    this.clockRunning()\n\n    this.unsubscribe()\n  }\n\n  /**\n   * Unsubscribe from the stopwatch timer.\n   */\n  public unsubscribe(): void {\n    if (this.timer && this.timer instanceof Subscription) {\n      this.timer.unsubscribe()\n    }\n  }\n}\n","<span>\n  {{ 'TIME' | translate }}:\n  {{ hours | number: '2.0':translate.currentLang }}\n  :\n  {{ minutes | number: '2.0':translate.currentLang }}\n  :\n  {{ seconds | number: '2.0':translate.currentLang }}\n  :\n  {{ milliseconds | number: '3.0':translate.currentLang }}\n</span>\n","import { Injectable } from '@angular/core'\n\nimport { HighScoresService } from '../high-scores/high-scores.service'\nimport { RecentScoresService } from '../recent-scores/recent-scores.service'\nimport { Statistic } from '../statistic/statistic'\nimport { Count, IStatistic, Match, Mode } from '../statistic/statistic.d'\nimport { ITime } from '../time/time.d'\nimport { isNullOrUndefined } from '../utilities/is-null-or-undefined'\n\ninterface ScoresFilter {\n  gameTypes: string[]\n  statistics: Statistic[][]\n}\n\n/**\n * Statistics Service that allows quick access to\n * `highScores` and `recentScores` and to quickly\n * add statistics and clear statistics for\n * `highScores` and `recentScores` at the same time.\n */\n@Injectable({\n  providedIn: 'root'\n})\n/**\n * Statistics Service that allows quick access to\n * `highScores` and `recentScores` and to quickly\n * add statistics and clear statistics for\n * `highScores` and `recentScores` at the same time.\n */\nexport class StatisticsService {\n  /**\n   * Receive the scores from `HighScoresService`\n   */\n  public get highScores(): Statistic[] {\n    return this.highScoresService.scores\n  }\n\n  /**\n   * Receive the scores from `RecentScoresService`\n   */\n  public get recentScores(): Statistic[] {\n    return this.recentScoresService.scores\n  }\n\n  constructor(\n    private highScoresService: HighScoresService,\n    private recentScoresService: RecentScoresService\n  ) {}\n\n  /**\n   * Add statistic to high scores and remove when length is >10\n   *\n   * @param statistic `Statistic` to add.\n   */\n  private addHighScoreStatistic(statistic: Statistic): void {\n    statistic = new Statistic(statistic)\n\n    this.highScoresService.add(statistic).then((val: Statistic): void => {\n      this.ensureScoresLength('highScores')\n    })\n  }\n\n  /**\n   * Make sure the length of high scores is never more than 10.\n   *\n   * @param `scoreName` 'highScores' | 'recentScores'\n   */\n  private ensureScoresLength(scoreName: 'highScores' | 'recentScores'): void {\n    let gameTypes: ScoresFilter\n\n    gameTypes = { gameTypes: [], statistics: [] }\n\n    gameTypes = this[scoreName].reduce<ScoresFilter>(\n      (pv: ScoresFilter, cv: Statistic): ScoresFilter => {\n        let types: string\n        types = `${cv.mode}_${cv.match}_${cv.count}`\n\n        if (!pv.gameTypes.includes(types)) {\n          let filter: Statistic[]\n\n          filter = this[`${scoreName}Service`].getScoresBy(\n            cv.count,\n            cv.match,\n            cv.mode\n          )\n\n          if (scoreName !== 'recentScores') {\n            filter = this[`${scoreName}Service`].sort(filter)\n          }\n\n          pv.gameTypes.push(types)\n          pv.statistics.push(filter)\n        }\n\n        return pv\n      },\n      gameTypes\n    )\n\n    gameTypes.statistics.forEach((statistics: Statistic[]): void => {\n      this.ensureGroupLength(statistics, scoreName)\n    })\n  }\n\n  /**\n   * ensureGroupLength recursive call\n   *\n   * @param statistics `Statistic[]`\n   */\n  private ensureGroupLength(\n    statistics: Statistic[],\n    scoreName: 'highScores' | 'recentScores'\n  ): void {\n    if (statistics.length > 10) {\n      let keyID: number\n      keyID = statistics.pop().keyID\n\n      this[`${scoreName}Service`]\n        .delete(keyID)\n        .then((val: undefined): void => {\n          let found: number\n\n          found = this[scoreName].findIndex((score): boolean => {\n            return score.keyID === keyID\n          })\n\n          if (found !== -1) {\n            this[scoreName].splice(found, 1)\n          }\n\n          if (statistics.length > 10) {\n            this.ensureGroupLength(statistics, scoreName)\n          }\n        })\n        .catch((error: DOMException): void => {\n          console.error(error.message)\n        })\n    }\n  }\n\n  /**\n   * Add statistic to recent scores and remove when length is >10.\n   *\n   * @param statistic `Statistic` to add.\n   */\n  private addRecentScoreStatistic(statistic: Statistic): void {\n    statistic = new Statistic(statistic)\n\n    this.recentScoresService.add(statistic).then((val: Statistic): void => {\n      this.ensureScoresLength('recentScores')\n    })\n  }\n\n  /**\n   * Add statistic to high scores and recent scores.\n   *\n   * @param statistic `Statistic` to add.\n   */\n  public addStatistic(statistic: Statistic): void\n  /**\n   * Add statistic to high scores and recent scores.\n   *\n   * @param statisticLike `IStatistic` to add.\n   */\n  public addStatistic(statisticLike: IStatistic): void\n  /**\n   * Add statistic to high scores and recent scores.\n   *\n   * @param mode `Mode` Mode\n   * @param match `Match` Match\n   * @param flips `number` Flips\n   * @param count `Count` Count\n   * @param complete `ITime` Complete\n   * @param memory `ITime` Memory\n   */\n  public addStatistic(\n    mode: Mode,\n    match: Match,\n    flips: number,\n    count: Count,\n    complete: ITime,\n    memory: ITime\n  ): void\n  /**\n   * Add statistic to high scores and recent scores.\n   *\n   * @param mode `Mode` Mode\n   * @param match `Match` Match\n   * @param flips `number` Flips\n   * @param count `Count` Count\n   * @param complete `ITime` Complete\n   * @param memory `ITime` Memory\n   * @param keyID `number` KeyID identifier for indexeddb\n   */\n  public addStatistic(\n    mode: Mode,\n    match: Match,\n    flips: number,\n    count: Count,\n    complete: ITime,\n    memory: ITime,\n    keyID: number\n  ): void\n  /**\n   * Add statistic to high scores and recent scores.\n   *\n   * @param mode `Mode` Mode\n   * @param match `Match` Match\n   * @param flips `number` Flips\n   * @param count `Count` Count\n   * @param completeMilliseconds `number` Complete Milliseconds\n   * @param completeSeconds `number` Complete Seconds\n   * @param completeMinutes `number` Complete Minutes\n   * @param completeHours `number` Complete Hours\n   * @param memoryMilliseconds `number` Complete Milliseconds\n   * @param memorySeconds `number` Complete Seconds\n   * @param memoryMinutes` number` Complete Minutes\n   * @param memoryHours `number` Complete Hours\n   */\n  public addStatistic(\n    mode: Mode,\n    match: Match,\n    flips: number,\n    count: Count,\n    completeMilliseconds: number,\n    completeSeconds: number,\n    completeMinutes: number,\n    completeHours: number,\n    memoryMilliseconds: number,\n    memorySeconds: number,\n    memoryMinutes: number,\n    memoryHours: number\n  ): void\n  /**\n   * Add statistic to high scores and recent scores.\n   *\n   * @param mode `Mode` Mode\n   * @param match `Match` Match\n   * @param flips `number` Flips\n   * @param count `Count` Count\n   * @param completeMilliseconds `number` Complete Milliseconds\n   * @param completeSeconds `number` Complete Seconds\n   * @param completeMinutes `number` Complete Minutes\n   * @param completeHours `number` Complete Hours\n   * @param memoryMilliseconds `number` Complete Milliseconds\n   * @param memorySeconds `number` Complete Seconds\n   * @param memoryMinutes` number` Complete Minutes\n   * @param memoryHours `number` Complete Hours\n   * @param keyID `number` KeyID identifier for indexeddb\n   */\n  public addStatistic(\n    mode: Mode,\n    match: Match,\n    flips: number,\n    count: Count,\n    completeMilliseconds: number,\n    completeSeconds: number,\n    completeMinutes: number,\n    completeHours: number,\n    memoryMilliseconds: number,\n    memorySeconds: number,\n    memoryMinutes: number,\n    memoryHours: number,\n    keyID: number\n  ): void\n  public addStatistic(\n    arg1: Mode | Statistic | IStatistic,\n    arg2?: Match,\n    arg3?: number,\n    arg4?: Count,\n    arg5?: ITime | number,\n    arg6?: ITime | number,\n    arg7?: number,\n    arg8?: number,\n    arg9?: number,\n    arg10?: number,\n    arg11?: number,\n    arg12?: number,\n    arg13?: number\n  ): void {\n    let value: Statistic\n\n    if (typeof arg1 === 'string' && typeof arg5 === 'number') {\n      if (isNullOrUndefined(arg13)) {\n        value = new Statistic(\n          arg1,\n          arg2,\n          arg3,\n          arg4,\n          arg5,\n          arg6 as number,\n          arg7,\n          arg8,\n          arg9,\n          arg10,\n          arg11,\n          arg12\n        )\n      } else {\n        value = new Statistic(\n          arg1,\n          arg2,\n          arg3,\n          arg4,\n          arg5,\n          arg6 as number,\n          arg7,\n          arg8,\n          arg9,\n          arg10,\n          arg11,\n          arg12,\n          arg13\n        )\n      }\n    } else if (typeof arg1 === 'string' && typeof arg5 === 'object') {\n      if (isNullOrUndefined(arg7)) {\n        value = new Statistic(arg1, arg2, arg3, arg4, arg5, arg6 as ITime)\n      } else {\n        value = new Statistic(arg1, arg2, arg3, arg4, arg5, arg6 as ITime, arg7)\n      }\n    } else if (arg1 instanceof Statistic) {\n      value = arg1\n    } else {\n      value = new Statistic(arg1 as IStatistic)\n    }\n\n    this.addHighScoreStatistic(value)\n    this.addRecentScoreStatistic(value)\n  }\n\n  /**\n   * Clear scores for High Scores and Recent Scores.\n   */\n  public clearStatistics(): void {\n    this.highScoresService.clear()\n    this.recentScoresService.clear()\n  }\n}\n","<mat-card class=\"mat-elevation-z2\">\n  <mat-card-title-group>\n    <mat-card-title>\n      {{ 'MATCHES' | translate }}:\n      {{ cardsWon.length | number: '1.0':translate.currentLang }} /\n      {{ game.count.value | number: '1.0':translate.currentLang }}\n      <button\n        mat-flat-button\n        color=\"warn\"\n        type=\"button\"\n        (click)=\"profiler.profile()\"\n        *ngIf=\"!profiler.environment\"\n      >\n        {{ 'PROFILE' | translate }}\n      </button>\n    </mat-card-title>\n    <mat-card-title>\n      {{ 'FLIPS' | translate }}:\n      {{ flips | number: '1.0':translate.currentLang }}\n    </mat-card-title>\n    <mat-card-title>\n      <app-stopwatch></app-stopwatch>\n    </mat-card-title>\n  </mat-card-title-group>\n  <mat-card-title-group>\n    <mat-card-subtitle>\n      <button\n        mat-flat-button\n        color=\"primary\"\n        type=\"button\"\n        (click)=\"reset($event)\"\n      >\n        {{ 'RESET' | translate }}\n      </button>\n    </mat-card-subtitle>\n  </mat-card-title-group>\n</mat-card>\n<mat-card class=\"mat-elevation-z2\" *ngIf=\"settings.settings.length\">\n  <mat-card-content>\n    <mat-grid-list [cols]=\"columns\" rowHeight=\"1:1\" gutterSize=\"10px\">\n      <ng-container\n        *ngFor=\"let card of cards.deck; let i = index; trackBy: trackBy\"\n      >\n        <mat-grid-tile\n          *ngIf=\"\n            cards.deck.length === 18 &&\n            ((i === 15 && columns === 5) || (i === 16 && columns === 4))\n          \"\n        ></mat-grid-tile>\n        <mat-grid-tile\n          [style.margin-left]=\"\n            cards.deck.length === 8 && (i === 6 || i === 7)\n              ? 'calc(16.6666% + 2.5px)'\n              : null\n          \"\n        >\n          <div class=\"card-wrapper\" (click)=\"flipCard($event, i)\">\n            <div\n              class=\"card-holder mat-elevation-z4\"\n              [@flipAnimation]=\"card.flipped\"\n              [ngClass]=\"{\n                'f-0-t-1': card.flipped === 1,\n                'f-3-t-0': card.flipped === 3,\n                'f-4-t-0': card.flipped === 4\n              }\"\n            >\n              <img\n                [attr.src]=\"cards.getCardImage(card)\"\n                [attr.aria-label]=\"card.flipped === 0 ? 'blank' : card.name\"\n                class=\"card-action\"\n              />\n              <img [attr.src]=\"cards.getCardBack(card)\" class=\"card-blank\" />\n            </div>\n          </div>\n        </mat-grid-tile>\n      </ng-container>\n    </mat-grid-list>\n  </mat-card-content>\n</mat-card>\n","import { MediaMatcher } from '@angular/cdk/layout'\nimport { isPlatformBrowser } from '@angular/common'\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Inject,\n  OnDestroy,\n  OnInit,\n  PLATFORM_ID,\n  ViewChild\n} from '@angular/core'\nimport { MatDialog } from '@angular/material/dialog'\nimport { TranslateService } from '@ngx-translate/core'\nimport { interval } from 'rxjs'\nimport { take } from 'rxjs/operators'\n\nimport { GameService } from './game.service'\nimport { Card } from '../card/card'\nimport { CardsService } from '../cards/cards.service'\nimport { flipAnimation } from '../flip-animation/flip-animation'\nimport { GameEndComponent } from '../game-end/game-end.component'\nimport { Statistic } from '../statistic/statistic'\nimport { SettingsService } from '../settings/settings.service'\nimport { StatisticsService } from '../statistics/statistics.service'\nimport { StopwatchComponent } from '../stopwatch/stopwatch.component'\nimport { isNullOrUndefined } from '../utilities/is-null-or-undefined'\nimport { Setting } from '../setting/setting'\nimport { ProfilerService } from '../profiler/profiler.service'\n\n@Component({\n  selector: 'app-game',\n  styleUrls: ['./game.component.scss'],\n  templateUrl: './game.component.html',\n  animations: [flipAnimation],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class GameComponent implements OnDestroy, OnInit {\n  /**\n   * Id of cards flipped.\n   */\n  private cardsChosenId: number[]\n  /**\n   * Tell game that checking is in progress.\n   */\n  private checking: boolean\n  /**\n   * Keep track of cards that haven't been flipped.\n   */\n  private unFlipped: number[]\n  /**\n   * Chosen card matches.\n   */\n  public cardsWon: string[][]\n  /**\n   * Number of flips.\n   */\n  public flips: number\n  public mediaMatcherQuery: MediaQueryList\n\n  /**\n   * The total value of effects volume.\n   */\n  private get effectsVolume(): number {\n    return this.game.masterVolume.value * this.game.effectsVolume.value\n  }\n\n  /**\n   * Columns to display cards in by screen size and deck card count.\n   */\n  public get columns(): number {\n    let cardCount: number\n    let num: number\n    let pair: { is: number; not: number }\n\n    cardCount = this.cards.deck.length\n\n    switch (cardCount) {\n      // case 27:\n      //   pair = {\n      //     is: 5,\n      //     not: 4\n      //   }\n      //   break\n\n      case 24:\n        pair = {\n          is: 6,\n          not: 4\n        }\n        break\n\n      case 18:\n        pair = {\n          is: 5,\n          not: 4\n        }\n        break\n\n      case 16:\n        pair = {\n          is: 4,\n          not: 4\n        }\n        break\n\n      case 12:\n        pair = {\n          is: 4,\n          not: 3\n        }\n        break\n\n      case 8:\n        pair = {\n          is: 3,\n          not: 3\n        }\n        break\n\n      case 6:\n        pair = {\n          is: 3,\n          not: 2\n        }\n        break\n\n      case 4:\n        pair = {\n          is: 2,\n          not: 2\n        }\n        break\n\n      default:\n        pair = {\n          is: 2,\n          not: 2\n        }\n        break\n    }\n\n    if (!this.mediaMatcherQuery) {\n      return pair.is\n    }\n\n    if (this.mediaMatcherQuery.matches) {\n      num = pair.is\n    } else {\n      num = pair.not\n    }\n\n    return num\n  }\n\n  /**\n   * Stopwatch component.\n   */\n  @ViewChild(StopwatchComponent, { static: true })\n  public stopwatch: StopwatchComponent\n\n  constructor(\n    @Inject(PLATFORM_ID) private readonly platformId: string,\n    private changeDetectorRef: ChangeDetectorRef,\n    private matDialog: MatDialog,\n    private mediaMatcher: MediaMatcher,\n    private statistics: StatisticsService,\n    public cards: CardsService,\n    public game: GameService,\n    public profiler: ProfilerService,\n    public settings: SettingsService,\n    public translate: TranslateService\n  ) {}\n\n  private clickSound(volume: number): void {\n    let AC: {\n      new (contextOptions?: AudioContextOptions): AudioContext\n      prototype: AudioContext\n    }\n    let audioContext: AudioContext\n    let bufferSource: AudioBufferSourceNode\n    let gainNode: GainNode\n\n    AC = window.AudioContext || (window as any).webkitAudioContext\n\n    audioContext = new AC()\n\n    if (!audioContext.createGain) {\n      audioContext.createGain = (audioContext as any).createGainNode\n    }\n\n    gainNode = audioContext.createGain()\n    gainNode.gain.value = volume\n\n    bufferSource = audioContext.createBufferSource()\n\n    bufferSource.connect(gainNode)\n\n    this.game.clickSoundBuffer().then((res: ArrayBuffer): void => {\n      audioContext.decodeAudioData(\n        res,\n        (decoded: AudioBuffer): void => {\n          bufferSource.buffer = decoded\n\n          gainNode.connect(audioContext.destination)\n\n          if (!bufferSource.start) {\n            bufferSource.start = (bufferSource as any).noteOn\n          }\n\n          bufferSource.start(0)\n        },\n        (error): void => {\n          console.log(error)\n        }\n      )\n    })\n  }\n\n  private mediaQueryListener(): void {\n    return this.changeDetectorRef.markForCheck()\n  }\n\n  private createMediaMatcher(): void {\n    if (isPlatformBrowser(this.platformId)) {\n      this.mediaMatcherQuery = this.mediaMatcher.matchMedia(\n        '(min-aspect-ratio: 7/10)'\n      )\n      // tslint:disable-next-line: deprecation\n      this.mediaMatcherQuery.addListener(this.mediaQueryListener.bind(this))\n      // `addListener` is deprecated but Safari doesn't support `addEventListener`\n      // this.mediaMatcherQuery.addEventListener(\n      //   'change',\n      //   this.mediaQueryListener.bind(this)\n      // )\n    }\n  }\n\n  /**\n   * Check for a match\n   */\n  private checkForMatch(id: number[]): void {\n    let cardChosen: Card[]\n    let namesMatch: boolean\n\n    cardChosen = id.reduce<Card[]>((pv: Card[], cv: number): Card[] => {\n      pv.push(this.cards.deck[cv])\n      return pv\n    }, [])\n\n    namesMatch = cardChosen.every(\n      (card: Card, index: number, array: Card[]): boolean => {\n        return card.name === array[0].name\n      }\n    )\n\n    if (namesMatch) {\n      interval(100)\n        .pipe<number>(take<number>(1))\n        .subscribe((): void => {\n          if (this.game.playing.value || this.cardsWon.length) {\n            if (id.length === this.game.match.value) {\n              cardChosen.forEach((card: Card): void => {\n                card.flipped = 4\n              })\n\n              interval(600)\n                .pipe<number>(take<number>(1))\n                .subscribe((): void => {\n                  if (this.game.playing.value || this.cardsWon.length) {\n                    cardChosen.forEach((card: Card): void => {\n                      card.flipped = 2\n                    })\n\n                    this.changeDetectorRef.markForCheck()\n                  }\n                })\n            }\n\n            this.changeDetectorRef.markForCheck()\n          }\n        })\n\n      if (id.length === this.game.match.value) {\n        this.cardsChosenId = []\n\n        this.cardsWon.push([\n          ...cardChosen.map<string>((card: Card): string => {\n            return card.name\n          })\n        ])\n      }\n    } else {\n      interval(100)\n        .pipe<number>(take<number>(1))\n        .subscribe((): void => {\n          if (this.game.playing.value) {\n            cardChosen.forEach((card: Card): void => {\n              card.flipped = 3\n            })\n\n            interval(600)\n              .pipe<number>(take<number>(1))\n              .subscribe((): void => {\n                if (this.game.playing.value) {\n                  cardChosen.forEach((card: Card): void => {\n                    card.flipped = 0\n                  })\n\n                  this.clickSound(0.25 * this.effectsVolume)\n\n                  this.changeDetectorRef.markForCheck()\n                }\n              })\n\n            this.changeDetectorRef.markForCheck()\n          }\n        })\n\n      this.cardsChosenId = []\n    }\n\n    if (this.cardsWon.length === this.game.count.value) {\n      let statistic: Statistic\n\n      this.stopwatch.stop()\n      this.game.playing.next(false)\n\n      statistic = new Statistic(\n        this.game.mode.value,\n        this.game.match.value,\n        this.flips,\n        this.game.count.value,\n        this.stopwatch.milliseconds,\n        this.stopwatch.seconds,\n        this.stopwatch.minutes,\n        this.stopwatch.hours,\n        null,\n        null,\n        null,\n        null\n      )\n\n      this.statistics.addStatistic(statistic)\n\n      this.changeDetectorRef.markForCheck()\n\n      interval(500)\n        .pipe<number>(take<number>(1))\n        .subscribe((): void => {\n          this.matDialog\n            .open(GameEndComponent, {\n              data: statistic,\n              disableClose: true\n            })\n            .afterClosed()\n            .subscribe((val: string): void => {\n              if (val === 'reset') {\n                this.reset(new Event('click') as MouseEvent)\n              }\n            })\n\n          interval(250)\n            .pipe<number>(take<number>(1))\n            .subscribe((): void => {\n              this.winReveal()\n            })\n        })\n    }\n  }\n\n  private updateFlipped(index: number): void {\n    if (this.unFlipped.includes(index)) {\n      let unflipped: number\n\n      unflipped = this.unFlipped.indexOf(index)\n      this.unFlipped.splice(unflipped, 1)\n\n      this.unFlipped.sort((): number => {\n        return 0.5 - Math.random()\n      })\n    }\n  }\n\n  /**\n   * Flip card and check properties.\n   *\n   * @param event event that flipped the card\n   * @param index card number\n   */\n  public flipCard(event: MouseEvent, index: number): void {\n    event.preventDefault()\n\n    if (!this.game.playing.value) {\n      this.game.playing.next(true)\n      this.stopwatch.restart()\n    }\n\n    if (!this.cards.deck[index].flipped && !this.checking) {\n      this.flips++\n      this.cardsChosenId.push(index)\n\n      // Swap cards if matched on first flip\n      // if (this.game.mode.value === 'regular' && this.game.match.value === 2) {\n      //   this.swapFirstMatch(option0, option1)\n      // }\n\n      this.cards.deck[index].flipped = 1\n\n      this.updateFlipped(index)\n\n      if (this.cardsChosenId.length > 1) {\n        let id: number[]\n        this.checking = true\n\n        id = [...this.cardsChosenId]\n\n        interval(250)\n          .pipe<number>(take<number>(1))\n          .subscribe((): void => {\n            if (this.game.playing.value) {\n              this.checkForMatch(id)\n            }\n\n            this.checking = false\n          })\n      }\n\n      this.clickSound(this.effectsVolume)\n    }\n  }\n\n  private winReveal(): void {\n    if (!this.game.playing.value) {\n      this.cards.deck.forEach((card: Card): void => {\n        card.flipped = 1\n      })\n\n      this.changeDetectorRef.markForCheck()\n    }\n  }\n\n  /**\n   * Swap cards if cards match on the very first flip\n   *\n   * @param option0 `number` index of card deck\n   * @param option1 `number` index of card deck\n   */\n  private swapFirstMatch(option0: number, option1: number): void {\n    if (\n      this.cardsChosenId.length === this.game.match.value &&\n      this.cards.deck[option0].name === this.cards.deck[option1].name &&\n      this.unFlipped.includes(option1)\n    ) {\n      let swap0: Card\n      let swap1: Card\n      let found: number\n\n      swap0 = this.cards.deck[option1]\n\n      found = this.unFlipped.findIndex((item: number): boolean => {\n        return this.cards.deck[item].name !== swap0.name\n      })\n\n      if (found !== -1) {\n        swap1 = this.cards.deck[this.unFlipped[found]]\n        this.cards.deck[this.unFlipped[found]] = swap0\n        this.cards.deck[option1] = swap1\n      }\n    }\n  }\n\n  //#region ngOnInit\n  public ngOnInit(): void {\n    this.createMediaMatcher()\n    this.reset(new Event('click') as MouseEvent)\n    if (isPlatformBrowser(this.platformId)) {\n      this.start(0)\n    } else {\n      if (!this.settings.settings) {\n        this.settings.settings.push(new Setting('match', 2))\n      }\n    }\n  }\n  //#endregion ngOnInit\n\n  private start(count: number): void {\n    if (isNullOrUndefined(count)) {\n      count = 0\n    }\n\n    if (count > 100) {\n      console.error('Database took too long to initialise')\n      return\n    }\n\n    this.init()\n      .then((): void => {\n        this.reset(new Event('click') as MouseEvent)\n      })\n      .catch((error: DOMException): void => {\n        window.requestAnimationFrame((): void => {\n          this.start(++count)\n        })\n      })\n  }\n\n  private init(): Promise<void> {\n    return new Promise(\n      (\n        resolve: (value: undefined) => void,\n        reject: (reason: undefined) => void\n      ): void => {\n        if (this.settings.settings.length) {\n          resolve(undefined)\n        } else {\n          reject(undefined)\n        }\n      }\n    )\n  }\n\n  //#region reset\n  /**\n   * Reset the game play.\n   *\n   * @param event event that initiated the reset.\n   */\n  public reset(event: MouseEvent): void {\n    event.preventDefault()\n\n    this.cards.deck.forEach((card: Card): void => {\n      card.flipped = 0\n    })\n\n    this.unFlipped = [...Array(this.cards.deck.length).keys()]\n    this.unFlipped.sort((): number => {\n      return 0.5 - Math.random()\n    })\n    this.cardsChosenId = []\n    this.cardsWon = []\n    this.flips = 0\n\n    this.cards.shuffle()\n    this.stopwatch.stop()\n    this.stopwatch.clear()\n    this.game.playing.next(false)\n\n    this.changeDetectorRef.markForCheck()\n  }\n  //#endregion reset\n\n  public trackBy(index: number, name: Card): number {\n    return index\n  }\n\n  //#region ngOnDestroy\n  public ngOnDestroy(): void {\n    if (isPlatformBrowser(this.platformId)) {\n      // tslint:disable-next-line: deprecation\n      this.mediaMatcherQuery.removeListener(this.mediaQueryListener)\n      // `removeListener` is deprecated but Safari doesn't support `removeEventListener`\n      // this.mediaMatcherQuery.removeEventListener(\n      //   'change',\n      //   this.mediaQueryListener\n      // )\n    }\n  }\n  //#endregion ngOnDestroy\n}\n","import { NgModule } from '@angular/core'\nimport { Routes, RouterModule } from '@angular/router'\n\nimport { GameComponent } from '../game/game.component'\n\nconst routes: Routes = [\n  {\n    component: GameComponent,\n    path: ''\n  }\n]\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class GameRoutingModule {}\n","import { CommonModule } from '@angular/common'\nimport { NgModule } from '@angular/core'\nimport { RouterModule } from '@angular/router'\nimport { TranslateModule, TranslateService } from '@ngx-translate/core'\nimport { Subscription } from 'rxjs'\n\nimport { GameComponent } from '../game/game.component'\nimport { GameEndComponent } from '../game-end/game-end.component'\nimport { GameRoutingModule } from '../game-routing/game-routing.module'\nimport { LanguageService } from '../language/language.service'\nimport { MaterialModule } from '../material/material.module'\nimport { StopwatchComponent } from '../stopwatch/stopwatch.component'\nimport {\n  ROUTE_TOKEN,\n  translateModuleOptions\n} from '../translate-loader/translate-browser.loader'\n\n/**\n * Entry Module\n */\n@NgModule({\n  declarations: [GameComponent, GameEndComponent, StopwatchComponent],\n  imports: [\n    CommonModule,\n    GameRoutingModule,\n    MaterialModule,\n    RouterModule,\n    TranslateModule.forChild(translateModuleOptions)\n  ],\n  providers: [{ provide: ROUTE_TOKEN, useValue: 'game' }],\n  entryComponents: [GameEndComponent],\n  bootstrap: [GameComponent]\n})\n/**\n * Entry Module\n */\nexport class GameModule {\n  constructor(language: LanguageService, translate: TranslateService) {\n    language.lang.subscribe((lang: string): void => {\n      let sub: Subscription\n\n      sub = translate.use(lang).subscribe(\n        (): void => {},\n        (): void => {\n          console.error(`Language \"${lang}\": at \"GameModule\" not found.`)\n\n          translate.setTranslation(lang, {}, true)\n        },\n        (): void => {\n          if (sub && sub instanceof Subscription) {\n            sub.unsubscribe()\n          }\n        }\n      )\n    })\n  }\n}\n"],"sourceRoot":"webpack:///"}