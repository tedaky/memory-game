{"version":3,"sources":["./projects/the-application/src/settings/settings.component.html","./projects/the-application/src/settings/settings.component.ts","./projects/the-application/src/settings-routing/settings-routing.module.ts","./projects/the-application/src/settings/settings.module.ts"],"names":["profiler","profile","SettingOption","title","value","key","this","SettingsComponent","changeDetectorRef","game","router","settings","language","translate","ambientVolume","effectsVolume","masterVolume","count","match","mode","currentLang","lang","getValue","tempRoute","Settings","settingLabels","settingOptions","push","sub","subscriptions","forEach","Subscription","unsubscribe","label","index","subscribe","val","markForCheck","parseInt","String","event","navigate","name","put","then","next","catch","error","console","message","trackBy","routes","component","path","SettingsRoutingModule","forChild","SettingsModule","super","langChange","provide","useValue"],"mappings":"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","file":"settings-settings-module.7da83efbb8a31a31aacd.js","sourcesContent":["<mat-card class=\"mat-elevation-z2\">\n  <mat-card-title>\n    {{ 'SETTINGS' | translate }}\n    <button\n      mat-flat-button\n      color=\"warn\"\n      type=\"button\"\n      (click)=\"profiler.profile()\"\n      *ngIf=\"!profiler.environment\"\n    >\n      {{ 'PROFILE' | translate }}\n    </button>\n  </mat-card-title>\n</mat-card>\n\n<ng-container *ngIf=\"language.supported.length > 1\">\n  <mat-card class=\"mat-elevation-z2\">\n    <mat-card-title>{{ 'LANGUAGE' | translate }}</mat-card-title>\n    <mat-card-content>\n      <h3>{{ 'LANGUAGE' | translate }}</h3>\n      <mat-form-field>\n        <mat-label>{{ 'LANGUAGE' | translate }}</mat-label>\n        <mat-select\n          [(ngModel)]=\"currentLang\"\n          (selectionChange)=\"languageChange($event)\"\n        >\n          <mat-option\n            *ngFor=\"let val of language.supported; let i = index\"\n            [value]=\"val\"\n          >\n            {{ language.description[i] }}\n          </mat-option>\n        </mat-select>\n      </mat-form-field>\n    </mat-card-content>\n  </mat-card>\n</ng-container>\n\n<mat-card class=\"mat-elevation-z2\">\n  <mat-card-title>{{ 'VOLUME' | translate }}</mat-card-title>\n  <!-- [0, 1, 2] -->\n  <!-- 0 = masterVolume -->\n  <!-- 1 = effectsVolume -->\n  <!-- 2 = ambientVolume -->\n  <ng-container *ngFor=\"let item of [0, 1]; trackBy: trackBy\">\n    <mat-card-content>\n      <h3>{{ settingOptions[item].title | translate }}</h3>\n      <mat-slider\n        [min]=\"0\"\n        [thumbLabel]=\"true\"\n        [step]=\"0.02\"\n        [max]=\"1\"\n        [displayWith]=\"formatLabel\"\n        [tickInterval]=\"0.02\"\n        [(ngModel)]=\"settingOptions[item].value\"\n        (input)=\"inputChange($event, settingOptions[item].key)\"\n      ></mat-slider>\n    </mat-card-content>\n  </ng-container>\n</mat-card>\n\n<mat-card class=\"mat-elevation-z2\">\n  <mat-card-title>{{ 'GAME' | translate }}</mat-card-title>\n  <!-- [3, 4, 5] -->\n  <!-- 3 = match -->\n  <!-- 4 = count -->\n  <!-- 5 = mode -->\n  <ng-container *ngFor=\"let item of [3, 4]; trackBy: trackBy\">\n    <mat-card-content>\n      <h3>{{ settingOptions[item].title | translate }}</h3>\n      <mat-form-field>\n        <mat-label>{{ settingOptions[item].title | translate }}</mat-label>\n        <mat-select\n          [(ngModel)]=\"settingOptions[item].value\"\n          (selectionChange)=\"inputChange($event, settingOptions[item].key)\"\n        >\n          <ng-container *ngIf=\"item === 3\">\n            <mat-option *ngFor=\"let val of [2, 3, 4]\" [value]=\"val\">\n              {{ val | number: '1.0':translate.currentLang }}\n            </mat-option>\n          </ng-container>\n          <ng-container *ngIf=\"item === 4\">\n            <mat-option *ngFor=\"let val of [2, 4, 6]\" [value]=\"val\">\n              {{ val | number: '1.0':translate.currentLang }}\n            </mat-option>\n          </ng-container>\n          <ng-container *ngIf=\"item === 5\">\n            <mat-option\n              *ngFor=\"let val of ['memorize', 'regular']\"\n              [value]=\"val\"\n            >\n              {{ val.toUpperCase() | translate }}\n            </mat-option>\n          </ng-container>\n        </mat-select>\n      </mat-form-field>\n    </mat-card-content>\n  </ng-container>\n</mat-card>\n","import { formatNumber } from '@angular/common'\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  OnDestroy,\n  OnInit\n} from '@angular/core'\nimport { MatSelectChange } from '@angular/material/select'\nimport { MatSliderChange } from '@angular/material/slider'\nimport { TranslateService } from '@ngx-translate/core'\nimport { Subscription } from 'rxjs'\n\nimport { SettingsService } from './settings.service'\nimport { GameService } from '../game/game.service'\nimport { LanguageService } from '../language/language.service'\nimport { ProfilerService } from '../profiler/profiler.service'\nimport { RouteLoction } from '../route-location/route-location'\nimport { MakeArray } from '../utilities/make-array'\nimport { MakeProperty } from '../utilities/make-property'\nimport { Router } from '@angular/router'\n\nclass SettingOption {\n  @MakeProperty()\n  public title: string\n\n  @MakeProperty()\n  public key: string\n\n  @MakeProperty()\n  public value: number | string\n\n  constructor(title: string, value: number | string, key: string) {\n    this.title = title\n    this.value = value\n    this.key = key\n  }\n}\n\n@Component({\n  selector: 'app-settings',\n  styleUrls: ['./settings.component.scss'],\n  templateUrl: './settings.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class SettingsComponent implements OnDestroy, OnInit {\n  @MakeArray<SettingsComponent, string>()\n  private settingLabels: string[]\n\n  @MakeArray<SettingsComponent, Subscription>()\n  private subscriptions: Subscription[]\n\n  @MakeArray<SettingsComponent, SettingOption>()\n  public settingOptions: SettingOption[]\n\n  @MakeProperty<SettingsComponent, string>()\n  public tempRoute: string\n\n  @MakeProperty<SettingsComponent, string>()\n  public currentLang: string\n\n  constructor(\n    private changeDetectorRef: ChangeDetectorRef,\n    private game: GameService,\n    private router: Router,\n    private settings: SettingsService,\n    public language: LanguageService,\n    public profiler: ProfilerService,\n    public translate: TranslateService\n  ) {}\n\n  public ngOnInit(): void {\n    let ambientVolume: SettingOption\n    let effectsVolume: SettingOption\n    let masterVolume: SettingOption\n\n    let count: SettingOption\n    let match: SettingOption\n    let mode: SettingOption\n\n    this.currentLang = this.language.lang.getValue()\n    this.tempRoute = RouteLoction.Settings\n\n    this.settingLabels = [\n      'masterVolume',\n      'effectsVolume',\n      'ambientVolume',\n      'match',\n      'count',\n      'mode'\n    ]\n\n    //#region Volume\n    masterVolume = new SettingOption(\n      'MASTER_VOLUME',\n      this.game.masterVolume.value,\n      'masterVolume'\n    )\n\n    effectsVolume = new SettingOption(\n      'EFFECTS_VOLUME',\n      this.game.effectsVolume.value,\n      'effectsVolume'\n    )\n\n    ambientVolume = new SettingOption(\n      'AMBIENT_VOLUME',\n      this.game.ambientVolume.value,\n      'ambientVolume'\n    )\n    //#endregion Volume\n\n    //#region Game\n    count = new SettingOption(\n      'UNIQUE_CARDS_COUNT',\n      this.game.count.value,\n      'count'\n    )\n\n    match = new SettingOption('CARDS_TO_MATCH', this.game.match.value, 'match')\n\n    mode = new SettingOption('MODE', this.game.mode.value, 'mode')\n    //#endregion Game\n\n    this.settingOptions.push(\n      masterVolume,\n      effectsVolume,\n      ambientVolume,\n      match,\n      count,\n      mode\n    )\n\n    this.sub()\n  }\n\n  public ngOnDestroy(): void {\n    this.subscriptions.forEach((sub: Subscription): void => {\n      if (sub && sub instanceof Subscription) {\n        sub.unsubscribe()\n      }\n    })\n  }\n\n  private sub(): void {\n    this.settingLabels.forEach((label: string, index: number) => {\n      let sub: Subscription\n\n      sub = this.game[label].subscribe((val: number): void => {\n        this.settingOptions[index].value = val\n        this.changeDetectorRef.markForCheck()\n      })\n\n      this.subscriptions.push(sub)\n    })\n  }\n\n  public formatLabel(value: number): number {\n    return parseInt(String(value * 100), 10)\n  }\n\n  public languageChange(event: MatSelectChange): void {\n    this.router.navigate(['/', event.value, this.tempRoute])\n  }\n\n  public inputChange(\n    event: MatSliderChange | MatSelectChange,\n    name: string\n  ): void {\n    this.settings\n      .put(name, event.value)\n      .then((val: IDBValidKey): void => {\n        this.game[name].next(event.value)\n      })\n      .catch((error: DOMException): void => {\n        console.error(error.message)\n      })\n  }\n\n  public trackBy(index: number, name: SettingOption): number {\n    return index\n  }\n}\n","import { NgModule } from '@angular/core'\nimport { Routes, RouterModule } from '@angular/router'\n\nimport { SettingsComponent } from '../settings/settings.component'\n\nconst routes: Routes = [\n  {\n    component: SettingsComponent,\n    path: ''\n  }\n]\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class SettingsRoutingModule {}\n","import { CommonModule } from '@angular/common'\nimport { NgModule } from '@angular/core'\nimport { FormsModule } from '@angular/forms'\nimport { RouterModule } from '@angular/router'\nimport { TranslateModule, TranslateService } from '@ngx-translate/core'\n\nimport { SettingsComponent } from './settings.component'\nimport { LanguageComponent } from '../language/language.component'\nimport { LanguageModule } from '../language/language.module'\nimport { LanguageService } from '../language/language.service'\nimport { MaterialModule } from '../material/material.module'\nimport { SettingsRoutingModule } from '../settings-routing/settings-routing.module'\nimport {\n  ROUTE_TOKEN,\n  translateModuleOptions\n} from '../translate-loader/translate-browser.loader'\n\n/**\n * Settings Module\n */\n@NgModule({\n  declarations: [LanguageComponent, SettingsComponent],\n  imports: [\n    CommonModule,\n    FormsModule,\n    MaterialModule,\n    SettingsRoutingModule,\n    RouterModule,\n    TranslateModule.forChild(translateModuleOptions)\n  ],\n  providers: [{ provide: ROUTE_TOKEN, useValue: 'settings' }],\n  entryComponents: [SettingsComponent],\n  bootstrap: [SettingsComponent]\n})\n/**\n * Settings Module\n */\nexport class SettingsModule extends LanguageModule {\n  constructor(language: LanguageService, translate: TranslateService) {\n    super()\n\n    this.langChange(language, translate, 'SettingsModule')\n  }\n}\n"],"sourceRoot":"webpack:///"}