{"version":3,"sources":["./projects/the-application/src/stopwatch/worker/stopwatch.worker.ts","./projects/the-application/src/flip-animation/flip-animation.ts","./projects/the-application/src/game-end/game-end.component.html","./projects/the-application/src/game-end/game-end.component.ts","./projects/the-application/src/stopwatch/stopwatch.component.ts","./projects/the-application/src/stopwatch/stopwatch.component.html","./projects/the-application/src/statistics/statistics.service.ts","./projects/the-application/src/game/game.component.html","./projects/the-application/src/game/game.component.ts","./projects/the-application/src/game-routing/game-routing.module.ts","./projects/the-application/src/game/game.module.ts","./projects/the-application/src/stopwatch/stopwatch.service.ts"],"names":["module","exports","flipAnimation","opacity","transform","GameEndComponent","data","translate","StopwatchComponent","changeDetectorRef","device","game","stopwatch","this","start","unsubscribe","sub","refresh","subscribe","markForCheck","active","val","playing","value","continue","stop","reset","restart","pause","forEach","item","Subscription","StatisticsService","highScoresService","recentScoresService","scores","statistic","add","then","ensureScoresLength","scoreName","gameTypes","statistics","reduce","pv","cv","types","mode","match","count","includes","filter","getScoresBy","sort","push","ensureGroupLength","length","keyID","pop","delete","found","findIndex","score","splice","catch","error","console","message","arg1","arg2","arg3","arg4","arg5","arg6","arg7","arg8","arg9","arg10","arg11","arg12","arg13","addHighScoreStatistic","addRecentScoreStatistic","clear","profiler","profile","GameComponent","platformId","matDialog","mediaMatcher","cards","settings","masterVolume","effectsVolume","cardCount","num","pair","deck","is","not","mediaMatcherQuery","matches","volume","AC","audioContext","bufferSource","gainNode","window","AudioContext","webkitAudioContext","createGain","createGainNode","gain","createBufferSource","connect","clickSoundBuffer","res","decodeAudioData","decoded","buffer","destination","noteOn","log","matchMedia","addListener","mediaQueryListener","bind","id","cardChosen","namesMatch","every","card","index","array","name","interval","pipe","take","cardsWon","flipped","cardsChosenId","map","clickSound","next","flips","milliseconds","seconds","minutes","hours","addStatistic","open","disableClose","afterClosed","Event","winReveal","unFlipped","unflipped","indexOf","Math","random","event","preventDefault","checking","updateFlipped","checkForMatch","option0","option1","swap0","swap1","createMediaMatcher","refreshOnNewCards","init","requestAnimationFrame","Promise","resolve","reject","undefined","Array","keys","shuffle","removeListener","routes","component","path","GameRoutingModule","forChild","GameModule","language","super","langChange","provide","useValue","StopwatchService","registerWorker","Worker","worker","type","addEventListener","postMessage","post"],"mappings":"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","file":"game-game-module.32a9aa5879cc5c75a606.js","sourcesContent":["module.exports = __webpack_public_path__ + \"stopwatch.b72ab056eec032df0b79.worker.js\"","import {\n  animate,\n  AnimationTriggerMetadata,\n  keyframes,\n  state,\n  style,\n  transition,\n  trigger\n} from '@angular/animations'\n\nexport const flipAnimation: AnimationTriggerMetadata = trigger(\n  'flipAnimation',\n  [\n    state(\n      '0',\n      style({\n        opacity: '1',\n        transform: 'rotateY(0deg)'\n      })\n    ),\n    state(\n      '1',\n      style({\n        opacity: '1',\n        transform: 'rotateY(180deg)'\n      })\n    ),\n    state(\n      '2',\n      style({\n        opacity: '0',\n        transform: 'rotateY(0deg)'\n      })\n    ),\n    state(\n      '3',\n      style({\n        opacity: '1',\n        transform: 'rotateY(180deg)'\n      })\n    ),\n    state(\n      '4',\n      style({\n        opacity: '0',\n        transform: 'rotateY(180deg)'\n      })\n    ),\n    transition('1 => 4', [\n      style({\n        transform: 'rotateY(0deg)',\n        opacity: '1'\n      }),\n      animate(\n        '250ms',\n        keyframes([\n          style({\n            transform: 'rotateY(0deg)',\n            opacity: '1'\n          }),\n          style({\n            transform: 'rotateY(0deg)',\n            opacity: '0'\n          })\n        ])\n      )\n    ])\n  ]\n)\n","<h1 mat-dialog-title>🎉 {{ 'YOU_WON' | translate }} 🎉</h1>\n<div mat-dialog-content>\n  <p>\n    {{ 'YOUR_RESULTS_FOR_THIS_GAME' | translate }}{{ 'FULL_STOP' | translate }}\n  </p>\n  <p>\n    <b>{{ 'FLIPS' | translate }}</b\n    >:\n    <span>{{ data.flips | number: '1.0':translate.currentLang }}</span>\n  </p>\n  <p>\n    <b>{{ 'TIME' | translate }}</b\n    >:\n    <span *ngIf=\"data.complete.hours\">\n      {{ data.complete.hours | number: '2.0':translate.currentLang }} hr\n    </span>\n    <span *ngIf=\"data.complete.minutes || data.complete.hours\">\n      {{ data.complete.minutes | number: '2.0':translate.currentLang }} min\n    </span>\n    <span\n      *ngIf=\"\n        data.complete.seconds || data.complete.minutes || data.complete.hours\n      \"\n    >\n      {{ data.complete.seconds | number: '2.0':translate.currentLang }} sec\n    </span>\n    <span\n      *ngIf=\"\n        data.complete.milliseconds ||\n        data.complete.seconds ||\n        data.complete.minutes ||\n        data.complete.hours\n      \"\n    >\n      {{ data.complete.milliseconds | number: '3.0':translate.currentLang }} ms\n    </span>\n  </p>\n</div>\n<div mat-dialog-actions>\n  <button\n    mat-flat-button\n    color=\"primary\"\n    type=\"button\"\n    [mat-dialog-close]=\"'reset'\"\n  >\n    {{ 'RESET' | translate }}\n  </button>\n</div>\n","import { ChangeDetectionStrategy, Component, Inject } from '@angular/core'\nimport { MAT_DIALOG_DATA } from '@angular/material/dialog'\nimport { TranslateService } from '@ngx-translate/core'\n\nimport { Statistic } from '../statistic/statistic'\n\n@Component({\n  selector: 'app-game-end',\n  templateUrl: './game-end.component.html',\n  styleUrls: ['./game-end.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class GameEndComponent {\n  constructor(\n    @Inject(MAT_DIALOG_DATA) public data: Statistic,\n    public translate: TranslateService\n  ) {}\n}\n","import {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  OnDestroy,\n  OnInit\n} from '@angular/core'\nimport { TranslateService } from '@ngx-translate/core'\nimport { Subscription } from 'rxjs'\n\nimport { StopwatchService } from './stopwatch.service'\nimport { DeviceService } from '../device/device.service'\nimport { GameService } from '../game/game.service'\nimport { MakeArray } from '../utilities/make-array'\n\n/**\n * Display a simple stopwatch with\n * `hours`, `minutes`, `seconds`, `milliseconds`\n * with start, stop, continue, and reset functionality.\n */\n@Component({\n  selector: 'app-stopwatch',\n  templateUrl: './stopwatch.component.html',\n  styleUrls: ['./stopwatch.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\n/**\n * Display a simple stopwatch with\n * `hours`, `minutes`, `seconds`, `milliseconds`\n * with start, stop, continue, and reset functionality.\n */\nexport class StopwatchComponent implements OnDestroy, OnInit {\n  /**\n   * The subscription to the stopwatch refresh.\n   */\n  @MakeArray<StopwatchComponent, Subscription>() private sub: Subscription[]\n\n  constructor(\n    private changeDetectorRef: ChangeDetectorRef,\n    private device: DeviceService,\n    private game: GameService,\n    public stopwatch: StopwatchService,\n    public translate: TranslateService\n  ) {}\n\n  /**\n   * Continue the stopwatch.\n   */\n  public continue(): void {\n    this.stopwatch.start()\n  }\n\n  public ngOnDestroy(): void {\n    this.unsubscribe()\n  }\n\n  public ngOnInit(): void {\n    this.sub[0] = this.stopwatch.refresh.subscribe((): void => {\n      this.changeDetectorRef.markForCheck()\n    })\n\n    this.sub[1] = this.device.active.subscribe((val: boolean): void => {\n      if (!val) {\n        this.stop()\n        return\n      }\n      if (val && this.game.playing.value) {\n        this.continue()\n      }\n    })\n  }\n\n  /**\n   * Stop the stopwatch and set back to 0 time.\n   */\n  public reset(): void {\n    this.stopwatch.reset()\n  }\n\n  /**\n   * Reset the stopwatch and start.\n   */\n  public restart(): void {\n    this.stopwatch.restart()\n  }\n\n  /**\n   * Stop the stopwatch.\n   */\n  public stop(): void {\n    this.stopwatch.pause()\n  }\n\n  /**\n   * Unsubscribe from the stopwatch timer.\n   */\n  public unsubscribe(): void {\n    this.sub.forEach((item: Subscription): void => {\n      if (item && item instanceof Subscription) {\n        item.unsubscribe()\n      }\n    })\n  }\n}\n","<span>\n  {{ 'TIME' | translate }}:\n  {{ stopwatch.hours | number: '2.0':translate.currentLang }}\n  :\n  {{ stopwatch.minutes | number: '2.0':translate.currentLang }}\n  :\n  {{ stopwatch.seconds | number: '2.0':translate.currentLang }}\n  :\n  {{ stopwatch.milliseconds | number: '3.0':translate.currentLang }}\n</span>\n","import { Injectable } from '@angular/core'\n\nimport { HighScoresService } from '../high-scores/high-scores.service'\nimport { RecentScoresService } from '../recent-scores/recent-scores.service'\nimport { Statistic } from '../statistic/statistic'\nimport { Count, IStatistic, Match, Mode } from '../statistic/statistic.d'\nimport { ITime } from '../time/time.d'\nimport { isNullOrUndefined } from '../utilities/is-null-or-undefined'\n\ninterface ScoresFilter {\n  gameTypes: string[]\n  statistics: Statistic[][]\n}\n\n/**\n * Statistics Service that allows quick access to\n * `highScores` and `recentScores` and to quickly\n * add statistics and clear statistics for\n * `highScores` and `recentScores` at the same time.\n */\n@Injectable({\n  providedIn: 'root'\n})\n/**\n * Statistics Service that allows quick access to\n * `highScores` and `recentScores` and to quickly\n * add statistics and clear statistics for\n * `highScores` and `recentScores` at the same time.\n */\nexport class StatisticsService {\n  /**\n   * Receive the scores from `HighScoresService`\n   */\n  public get highScores(): Statistic[] {\n    return this.highScoresService.scores\n  }\n\n  /**\n   * Receive the scores from `RecentScoresService`\n   */\n  public get recentScores(): Statistic[] {\n    return this.recentScoresService.scores\n  }\n\n  constructor(\n    private highScoresService: HighScoresService,\n    private recentScoresService: RecentScoresService\n  ) {}\n\n  /**\n   * Add statistic to high scores and remove when length is >10\n   *\n   * @param statistic `Statistic` to add.\n   */\n  private addHighScoreStatistic(statistic: Statistic): void {\n    statistic = new Statistic(statistic)\n\n    this.highScoresService.add(statistic).then((val: Statistic): void => {\n      this.ensureScoresLength('highScores')\n    })\n  }\n\n  /**\n   * Make sure the length of high scores is never more than 10.\n   *\n   * @param `scoreName` 'highScores' | 'recentScores'\n   */\n  private ensureScoresLength(scoreName: 'highScores' | 'recentScores'): void {\n    let gameTypes: ScoresFilter\n\n    gameTypes = { gameTypes: [], statistics: [] }\n\n    gameTypes = this[scoreName].reduce<ScoresFilter>(\n      (pv: ScoresFilter, cv: Statistic): ScoresFilter => {\n        let types: string\n        types = `${cv.mode}_${cv.match}_${cv.count}`\n\n        if (!pv.gameTypes.includes(types)) {\n          let filter: Statistic[]\n\n          filter = this[`${scoreName}Service`].getScoresBy(\n            cv.count,\n            cv.match,\n            cv.mode\n          )\n\n          if (scoreName !== 'recentScores') {\n            filter = this[`${scoreName}Service`].sort(filter)\n          }\n\n          pv.gameTypes.push(types)\n          pv.statistics.push(filter)\n        }\n\n        return pv\n      },\n      gameTypes\n    )\n\n    gameTypes.statistics.forEach((statistics: Statistic[]): void => {\n      this.ensureGroupLength(statistics, scoreName)\n    })\n  }\n\n  /**\n   * ensureGroupLength recursive call\n   *\n   * @param statistics `Statistic[]`\n   */\n  private ensureGroupLength(\n    statistics: Statistic[],\n    scoreName: 'highScores' | 'recentScores'\n  ): void {\n    if (statistics.length > 10) {\n      let keyID: number\n      keyID = statistics.pop().keyID\n\n      this[`${scoreName}Service`]\n        .delete(keyID)\n        .then((val: undefined): void => {\n          let found: number\n\n          found = this[scoreName].findIndex((score): boolean => {\n            return score.keyID === keyID\n          })\n\n          if (found !== -1) {\n            this[scoreName].splice(found, 1)\n          }\n\n          if (statistics.length > 10) {\n            this.ensureGroupLength(statistics, scoreName)\n          }\n        })\n        .catch((error: DOMException): void => {\n          console.error(error.message)\n        })\n    }\n  }\n\n  /**\n   * Add statistic to recent scores and remove when length is >10.\n   *\n   * @param statistic `Statistic` to add.\n   */\n  private addRecentScoreStatistic(statistic: Statistic): void {\n    statistic = new Statistic(statistic)\n\n    this.recentScoresService.add(statistic).then((val: Statistic): void => {\n      this.ensureScoresLength('recentScores')\n    })\n  }\n\n  /**\n   * Add statistic to high scores and recent scores.\n   *\n   * @param statistic `Statistic` to add.\n   */\n  public addStatistic(statistic: Statistic): void\n  /**\n   * Add statistic to high scores and recent scores.\n   *\n   * @param statisticLike `IStatistic` to add.\n   */\n  public addStatistic(statisticLike: IStatistic): void\n  /**\n   * Add statistic to high scores and recent scores.\n   *\n   * @param mode `Mode` Mode\n   * @param match `Match` Match\n   * @param flips `number` Flips\n   * @param count `Count` Count\n   * @param complete `ITime` Complete\n   * @param memory `ITime` Memory\n   */\n  public addStatistic(\n    mode: Mode,\n    match: Match,\n    flips: number,\n    count: Count,\n    complete: ITime,\n    memory: ITime\n  ): void\n  /**\n   * Add statistic to high scores and recent scores.\n   *\n   * @param mode `Mode` Mode\n   * @param match `Match` Match\n   * @param flips `number` Flips\n   * @param count `Count` Count\n   * @param complete `ITime` Complete\n   * @param memory `ITime` Memory\n   * @param keyID `number` KeyID identifier for indexeddb\n   */\n  public addStatistic(\n    mode: Mode,\n    match: Match,\n    flips: number,\n    count: Count,\n    complete: ITime,\n    memory: ITime,\n    keyID: number\n  ): void\n  /**\n   * Add statistic to high scores and recent scores.\n   *\n   * @param mode `Mode` Mode\n   * @param match `Match` Match\n   * @param flips `number` Flips\n   * @param count `Count` Count\n   * @param completeMilliseconds `number` Complete Milliseconds\n   * @param completeSeconds `number` Complete Seconds\n   * @param completeMinutes `number` Complete Minutes\n   * @param completeHours `number` Complete Hours\n   * @param memoryMilliseconds `number` Complete Milliseconds\n   * @param memorySeconds `number` Complete Seconds\n   * @param memoryMinutes` number` Complete Minutes\n   * @param memoryHours `number` Complete Hours\n   */\n  public addStatistic(\n    mode: Mode,\n    match: Match,\n    flips: number,\n    count: Count,\n    completeMilliseconds: number,\n    completeSeconds: number,\n    completeMinutes: number,\n    completeHours: number,\n    memoryMilliseconds: number,\n    memorySeconds: number,\n    memoryMinutes: number,\n    memoryHours: number\n  ): void\n  /**\n   * Add statistic to high scores and recent scores.\n   *\n   * @param mode `Mode` Mode\n   * @param match `Match` Match\n   * @param flips `number` Flips\n   * @param count `Count` Count\n   * @param completeMilliseconds `number` Complete Milliseconds\n   * @param completeSeconds `number` Complete Seconds\n   * @param completeMinutes `number` Complete Minutes\n   * @param completeHours `number` Complete Hours\n   * @param memoryMilliseconds `number` Complete Milliseconds\n   * @param memorySeconds `number` Complete Seconds\n   * @param memoryMinutes` number` Complete Minutes\n   * @param memoryHours `number` Complete Hours\n   * @param keyID `number` KeyID identifier for indexeddb\n   */\n  public addStatistic(\n    mode: Mode,\n    match: Match,\n    flips: number,\n    count: Count,\n    completeMilliseconds: number,\n    completeSeconds: number,\n    completeMinutes: number,\n    completeHours: number,\n    memoryMilliseconds: number,\n    memorySeconds: number,\n    memoryMinutes: number,\n    memoryHours: number,\n    keyID: number\n  ): void\n  public addStatistic(\n    arg1: Mode | Statistic | IStatistic,\n    arg2?: Match,\n    arg3?: number,\n    arg4?: Count,\n    arg5?: ITime | number,\n    arg6?: ITime | number,\n    arg7?: number,\n    arg8?: number,\n    arg9?: number,\n    arg10?: number,\n    arg11?: number,\n    arg12?: number,\n    arg13?: number\n  ): void {\n    let value: Statistic\n\n    if (typeof arg1 === 'string' && typeof arg5 === 'number') {\n      if (isNullOrUndefined(arg13)) {\n        value = new Statistic(\n          arg1,\n          arg2,\n          arg3,\n          arg4,\n          arg5,\n          arg6 as number,\n          arg7,\n          arg8,\n          arg9,\n          arg10,\n          arg11,\n          arg12\n        )\n      } else {\n        value = new Statistic(\n          arg1,\n          arg2,\n          arg3,\n          arg4,\n          arg5,\n          arg6 as number,\n          arg7,\n          arg8,\n          arg9,\n          arg10,\n          arg11,\n          arg12,\n          arg13\n        )\n      }\n    } else if (typeof arg1 === 'string' && typeof arg5 === 'object') {\n      if (isNullOrUndefined(arg7)) {\n        value = new Statistic(arg1, arg2, arg3, arg4, arg5, arg6 as ITime)\n      } else {\n        value = new Statistic(arg1, arg2, arg3, arg4, arg5, arg6 as ITime, arg7)\n      }\n    } else if (arg1 instanceof Statistic) {\n      value = arg1\n    } else {\n      value = new Statistic(arg1 as IStatistic)\n    }\n\n    this.addHighScoreStatistic(value)\n    this.addRecentScoreStatistic(value)\n  }\n\n  /**\n   * Clear scores for High Scores and Recent Scores.\n   */\n  public clearStatistics(): void {\n    this.highScoresService.clear()\n    this.recentScoresService.clear()\n  }\n}\n","<mat-card class=\"mat-elevation-z2\">\n  <mat-card-title-group>\n    <mat-card-title>\n      {{ 'MATCHES' | translate }}:\n      {{ cardsWon.length | number: '1.0':translate.currentLang }} /\n      {{ game.count.value | number: '1.0':translate.currentLang }}\n      <button\n        mat-flat-button\n        color=\"warn\"\n        type=\"button\"\n        (click)=\"profiler.profile()\"\n        *ngIf=\"!profiler.environment\"\n      >\n        {{ 'PROFILE' | translate }}\n      </button>\n    </mat-card-title>\n    <mat-card-title>\n      {{ 'FLIPS' | translate }}:\n      {{ flips | number: '1.0':translate.currentLang }}\n    </mat-card-title>\n    <mat-card-title>\n      <app-stopwatch></app-stopwatch>\n    </mat-card-title>\n  </mat-card-title-group>\n  <mat-card-title-group>\n    <mat-card-subtitle>\n      <button\n        mat-flat-button\n        color=\"primary\"\n        type=\"button\"\n        (click)=\"reset($event)\"\n      >\n        {{ 'RESET' | translate }}\n      </button>\n    </mat-card-subtitle>\n  </mat-card-title-group>\n</mat-card>\n<mat-card class=\"mat-elevation-z2\" *ngIf=\"settings.settings.length\">\n  <mat-card-content>\n    <mat-grid-list [cols]=\"columns\" rowHeight=\"1:1\" gutterSize=\"10px\">\n      <ng-container\n        *ngFor=\"let card of cards.deck; let i = index; trackBy: trackBy\"\n      >\n        <mat-grid-tile\n          *ngIf=\"\n            cards.deck.length === 18 &&\n            ((i === 15 && columns === 5) || (i === 16 && columns === 4))\n          \"\n        ></mat-grid-tile>\n        <mat-grid-tile\n          [style.margin-left]=\"\n            cards.deck.length === 8 && (i === 6 || i === 7)\n              ? 'calc(16.6666% + 2.5px)'\n              : null\n          \"\n        >\n          <div class=\"card-wrapper\" (click)=\"flipCard($event, i)\">\n            <div\n              class=\"card-holder mat-elevation-z4\"\n              [@flipAnimation]=\"card.flipped\"\n              [ngClass]=\"{\n                'f-0-t-1': card.flipped === 1,\n                'f-3-t-0': card.flipped === 3,\n                'f-4-t-0': card.flipped === 4\n              }\"\n            >\n              <img\n                [attr.src]=\"cards.getCardImage(card)\"\n                [attr.aria-label]=\"card.flipped === 0 ? 'blank' : card.name\"\n                class=\"card-action\"\n              />\n              <img [attr.src]=\"cards.getCardBack(card)\" class=\"card-blank\" />\n            </div>\n          </div>\n        </mat-grid-tile>\n      </ng-container>\n    </mat-grid-list>\n  </mat-card-content>\n</mat-card>\n","import { MediaMatcher } from '@angular/cdk/layout'\nimport { isPlatformBrowser } from '@angular/common'\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Inject,\n  OnDestroy,\n  OnInit,\n  PLATFORM_ID,\n  ViewChild\n} from '@angular/core'\nimport { MatDialog } from '@angular/material/dialog'\nimport { TranslateService } from '@ngx-translate/core'\nimport { interval, Subscription } from 'rxjs'\nimport { take } from 'rxjs/operators'\n\nimport { GameService } from './game.service'\nimport { ICard } from '../card/card.d'\nimport { CardsService } from '../cards/cards.service'\nimport { flipAnimation } from '../flip-animation/flip-animation'\nimport { GameEndComponent } from '../game-end/game-end.component'\nimport { Statistic } from '../statistic/statistic'\nimport { SettingsService } from '../settings/settings.service'\nimport { StatisticsService } from '../statistics/statistics.service'\nimport { StopwatchComponent } from '../stopwatch/stopwatch.component'\nimport { isNullOrUndefined } from '../utilities/is-null-or-undefined'\nimport { Setting } from '../setting/setting'\nimport { ProfilerService } from '../profiler/profiler.service'\n\n@Component({\n  selector: 'app-game',\n  styleUrls: ['./game.component.scss'],\n  templateUrl: './game.component.html',\n  animations: [flipAnimation],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class GameComponent implements OnDestroy, OnInit {\n  /**\n   * Id of cards flipped.\n   */\n  private cardsChosenId: number[]\n  /**\n   * Tell game that checking is in progress.\n   */\n  private checking: boolean\n  /**\n   * Keep track of cards that haven't been flipped.\n   */\n  private unFlipped: number[]\n  /**\n   * Subscribe to cards update.\n   */\n  private sub: Subscription\n  /**\n   * Chosen card matches.\n   */\n  public cardsWon: string[][]\n  /**\n   * Number of flips.\n   */\n  public flips: number\n  public mediaMatcherQuery: MediaQueryList\n\n  /**\n   * The total value of effects volume.\n   */\n  private get effectsVolume(): number {\n    return this.game.masterVolume.value * this.game.effectsVolume.value\n  }\n\n  /**\n   * Columns to display cards in by screen size and deck card count.\n   */\n  public get columns(): number {\n    let cardCount: number\n    let num: number\n    let pair: { is: number; not: number }\n\n    cardCount = this.cards.deck.length\n\n    switch (cardCount) {\n      // case 27:\n      //   pair = {\n      //     is: 5,\n      //     not: 4\n      //   }\n      //   break\n\n      case 24:\n        pair = {\n          is: 6,\n          not: 4\n        }\n        break\n\n      case 18:\n        pair = {\n          is: 5,\n          not: 4\n        }\n        break\n\n      case 16:\n        pair = {\n          is: 4,\n          not: 4\n        }\n        break\n\n      case 12:\n        pair = {\n          is: 4,\n          not: 3\n        }\n        break\n\n      case 8:\n        pair = {\n          is: 3,\n          not: 3\n        }\n        break\n\n      case 6:\n        pair = {\n          is: 3,\n          not: 2\n        }\n        break\n\n      case 4:\n        pair = {\n          is: 2,\n          not: 2\n        }\n        break\n\n      default:\n        pair = {\n          is: 2,\n          not: 2\n        }\n        break\n    }\n\n    if (!this.mediaMatcherQuery) {\n      return pair.is\n    }\n\n    if (this.mediaMatcherQuery.matches) {\n      num = pair.is\n    } else {\n      num = pair.not\n    }\n\n    return num\n  }\n\n  /**\n   * Stopwatch component.\n   */\n  @ViewChild(StopwatchComponent, { static: true })\n  public stopwatch: StopwatchComponent\n\n  constructor(\n    @Inject(PLATFORM_ID) private readonly platformId: string,\n    private changeDetectorRef: ChangeDetectorRef,\n    private matDialog: MatDialog,\n    private mediaMatcher: MediaMatcher,\n    private statistics: StatisticsService,\n    public cards: CardsService,\n    public game: GameService,\n    public profiler: ProfilerService,\n    public settings: SettingsService,\n    public translate: TranslateService\n  ) {}\n\n  private clickSound(volume: number): void {\n    let AC: {\n      new (contextOptions?: AudioContextOptions): AudioContext\n      prototype: AudioContext\n    }\n    let audioContext: AudioContext\n    let bufferSource: AudioBufferSourceNode\n    let gainNode: GainNode\n\n    AC = window.AudioContext || (window as any).webkitAudioContext\n\n    audioContext = new AC()\n\n    if (!audioContext.createGain) {\n      audioContext.createGain = (audioContext as any).createGainNode\n    }\n\n    gainNode = audioContext.createGain()\n    gainNode.gain.value = volume\n\n    bufferSource = audioContext.createBufferSource()\n\n    bufferSource.connect(gainNode)\n\n    this.game.clickSoundBuffer().then((res: ArrayBuffer): void => {\n      audioContext.decodeAudioData(\n        res,\n        (decoded: AudioBuffer): void => {\n          bufferSource.buffer = decoded\n\n          gainNode.connect(audioContext.destination)\n\n          if (!bufferSource.start) {\n            bufferSource.start = (bufferSource as any).noteOn\n          }\n\n          bufferSource.start(0)\n        },\n        (error): void => {\n          console.log(error)\n        }\n      )\n    })\n  }\n\n  private mediaQueryListener(): void {\n    return this.changeDetectorRef.markForCheck()\n  }\n\n  private createMediaMatcher(): void {\n    if (isPlatformBrowser(this.platformId)) {\n      this.mediaMatcherQuery = this.mediaMatcher.matchMedia(\n        '(min-aspect-ratio: 7/10)'\n      )\n      // tslint:disable-next-line: deprecation\n      this.mediaMatcherQuery.addListener(this.mediaQueryListener.bind(this))\n      // `addListener` is deprecated but Safari doesn't support `addEventListener`\n      // this.mediaMatcherQuery.addEventListener(\n      //   'change',\n      //   this.mediaQueryListener.bind(this)\n      // )\n    }\n  }\n\n  /**\n   * Check for a match\n   */\n  private checkForMatch(id: number[]): void {\n    let cardChosen: ICard[]\n    let namesMatch: boolean\n\n    cardChosen = id.reduce<ICard[]>((pv: ICard[], cv: number): ICard[] => {\n      pv.push(this.cards.deck[cv])\n      return pv\n    }, [])\n\n    namesMatch = cardChosen.every(\n      (card: ICard, index: number, array: ICard[]): boolean => {\n        return card.name === array[0].name\n      }\n    )\n\n    if (namesMatch) {\n      interval(100)\n        .pipe<number>(take<number>(1))\n        .subscribe((): void => {\n          if (this.game.playing.value || this.cardsWon.length) {\n            if (id.length === this.game.match.value) {\n              cardChosen.forEach((card: ICard): void => {\n                card.flipped = 4\n              })\n\n              interval(600)\n                .pipe<number>(take<number>(1))\n                .subscribe((): void => {\n                  if (this.game.playing.value || this.cardsWon.length) {\n                    cardChosen.forEach((card: ICard): void => {\n                      card.flipped = 2\n                    })\n\n                    this.changeDetectorRef.markForCheck()\n                  }\n                })\n            }\n\n            this.changeDetectorRef.markForCheck()\n          }\n        })\n\n      if (id.length === this.game.match.value) {\n        this.cardsChosenId = []\n\n        this.cardsWon.push([\n          ...cardChosen.map<string>((card: ICard): string => {\n            return card.name\n          })\n        ])\n      }\n    } else {\n      interval(100)\n        .pipe<number>(take<number>(1))\n        .subscribe((): void => {\n          if (this.game.playing.value) {\n            cardChosen.forEach((card: ICard): void => {\n              card.flipped = 3\n            })\n\n            interval(600)\n              .pipe<number>(take<number>(1))\n              .subscribe((): void => {\n                if (this.game.playing.value) {\n                  cardChosen.forEach((card: ICard): void => {\n                    card.flipped = 0\n                  })\n\n                  this.clickSound(0.25 * this.effectsVolume)\n\n                  this.changeDetectorRef.markForCheck()\n                }\n              })\n\n            this.changeDetectorRef.markForCheck()\n          }\n        })\n\n      this.cardsChosenId = []\n    }\n\n    if (this.cardsWon.length === this.game.count.value) {\n      let statistic: Statistic\n\n      this.stopwatch.stop()\n      this.game.playing.next(false)\n\n      statistic = new Statistic(\n        this.game.mode.value,\n        this.game.match.value,\n        this.flips,\n        this.game.count.value,\n        this.stopwatch.stopwatch.milliseconds,\n        this.stopwatch.stopwatch.seconds,\n        this.stopwatch.stopwatch.minutes,\n        this.stopwatch.stopwatch.hours,\n        null,\n        null,\n        null,\n        null\n      )\n\n      this.statistics.addStatistic(statistic)\n\n      this.changeDetectorRef.markForCheck()\n\n      interval(500)\n        .pipe<number>(take<number>(1))\n        .subscribe((): void => {\n          this.matDialog\n            .open(GameEndComponent, {\n              data: statistic,\n              disableClose: true\n            })\n            .afterClosed()\n            .subscribe((val: string): void => {\n              if (val === 'reset') {\n                this.reset(new Event('click') as MouseEvent)\n              }\n            })\n\n          interval(250)\n            .pipe<number>(take<number>(1))\n            .subscribe((): void => {\n              this.winReveal()\n            })\n        })\n    }\n  }\n\n  private updateFlipped(index: number): void {\n    if (this.unFlipped.includes(index)) {\n      let unflipped: number\n\n      unflipped = this.unFlipped.indexOf(index)\n      this.unFlipped.splice(unflipped, 1)\n\n      this.unFlipped.sort((): number => {\n        return 0.5 - Math.random()\n      })\n    }\n  }\n\n  /**\n   * Flip card and check properties.\n   *\n   * @param event event that flipped the card\n   * @param index card number\n   */\n  public flipCard(event: MouseEvent, index: number): void {\n    event.preventDefault()\n\n    if (!this.game.playing.value) {\n      this.game.playing.next(true)\n      this.stopwatch.restart()\n    }\n\n    if (!this.cards.deck[index].flipped && !this.checking) {\n      this.flips++\n      this.cardsChosenId.push(index)\n\n      // Swap cards if matched on first flip\n      // if (this.game.mode.value === 'regular' && this.game.match.value === 2) {\n      //   this.swapFirstMatch(option0, option1)\n      // }\n\n      this.cards.deck[index].flipped = 1\n\n      this.updateFlipped(index)\n\n      if (this.cardsChosenId.length > 1) {\n        let id: number[]\n        this.checking = true\n\n        id = [...this.cardsChosenId]\n\n        interval(250)\n          .pipe<number>(take<number>(1))\n          .subscribe((): void => {\n            if (this.game.playing.value) {\n              this.checkForMatch(id)\n            }\n\n            this.checking = false\n          })\n      }\n\n      this.clickSound(this.effectsVolume)\n    }\n  }\n\n  private winReveal(): void {\n    if (!this.game.playing.value) {\n      this.cards.deck.forEach((card: ICard): void => {\n        card.flipped = 1\n      })\n\n      this.changeDetectorRef.markForCheck()\n    }\n  }\n\n  /**\n   * Swap cards if cards match on the very first flip\n   *\n   * @param option0 `number` index of card deck\n   * @param option1 `number` index of card deck\n   */\n  private swapFirstMatch(option0: number, option1: number): void {\n    if (\n      this.cardsChosenId.length === this.game.match.value &&\n      this.cards.deck[option0].name === this.cards.deck[option1].name &&\n      this.unFlipped.includes(option1)\n    ) {\n      let swap0: ICard\n      let swap1: ICard\n      let found: number\n\n      swap0 = this.cards.deck[option1]\n\n      found = this.unFlipped.findIndex((item: number): boolean => {\n        return this.cards.deck[item].name !== swap0.name\n      })\n\n      if (found !== -1) {\n        swap1 = this.cards.deck[this.unFlipped[found]]\n        this.cards.deck[this.unFlipped[found]] = swap0\n        this.cards.deck[option1] = swap1\n      }\n    }\n  }\n\n  //#region ngOnInit\n  public ngOnInit(): void {\n    this.createMediaMatcher()\n    this.reset(new Event('click') as MouseEvent)\n    this.refreshOnNewCards()\n    if (isPlatformBrowser(this.platformId)) {\n      this.start(0)\n    } else {\n      if (!this.settings.settings) {\n        this.settings.settings.push(new Setting('match', 2))\n      }\n    }\n  }\n  //#endregion ngOnInit\n\n  private refreshOnNewCards(): void {\n    this.sub = this.cards.refresh.subscribe((): void => {\n      this.changeDetectorRef.markForCheck()\n    })\n  }\n\n  private start(count: number): void {\n    if (isNullOrUndefined(count)) {\n      count = 0\n    }\n\n    if (count > 100) {\n      console.error('Database took too long to initialise')\n      return\n    }\n\n    this.init()\n      .then((): void => {\n        this.reset(new Event('click') as MouseEvent)\n      })\n      .catch((error: DOMException): void => {\n        window.requestAnimationFrame((): void => {\n          this.start(++count)\n        })\n      })\n  }\n\n  private init(): Promise<void> {\n    return new Promise(\n      (\n        resolve: (value: undefined) => void,\n        reject: (reason: undefined) => void\n      ): void => {\n        if (this.settings.settings.length) {\n          resolve(undefined)\n        } else {\n          reject(undefined)\n        }\n      }\n    )\n  }\n\n  //#region reset\n  /**\n   * Reset the game play.\n   *\n   * @param event event that initiated the reset.\n   */\n  public reset(event: MouseEvent): void {\n    event.preventDefault()\n\n    this.cards.deck.forEach((card: ICard): void => {\n      card.flipped = 0\n    })\n\n    this.unFlipped = [...Array(this.cards.deck.length).keys()]\n    this.unFlipped.sort((): number => {\n      return 0.5 - Math.random()\n    })\n    this.cardsChosenId = []\n    this.cardsWon = []\n    this.flips = 0\n\n    this.cards.shuffle()\n    this.stopwatch.reset()\n    this.game.playing.next(false)\n\n    this.changeDetectorRef.markForCheck()\n  }\n  //#endregion reset\n\n  public trackBy(index: number, name: ICard): number {\n    return index\n  }\n\n  //#region ngOnDestroy\n  public ngOnDestroy(): void {\n    if (isPlatformBrowser(this.platformId)) {\n      // tslint:disable-next-line: deprecation\n      this.mediaMatcherQuery.removeListener(this.mediaQueryListener)\n      // `removeListener` is deprecated but Safari doesn't support `removeEventListener`\n      // this.mediaMatcherQuery.removeEventListener(\n      //   'change',\n      //   this.mediaQueryListener\n      // )\n    }\n    if (this.sub && this.sub instanceof Subscription) {\n      this.sub.unsubscribe()\n    }\n  }\n  //#endregion ngOnDestroy\n}\n","import { NgModule } from '@angular/core'\nimport { Routes, RouterModule } from '@angular/router'\n\nimport { GameComponent } from '../game/game.component'\n\nconst routes: Routes = [\n  {\n    component: GameComponent,\n    path: ''\n  }\n]\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class GameRoutingModule {}\n","import { CommonModule } from '@angular/common'\nimport { NgModule } from '@angular/core'\nimport { RouterModule } from '@angular/router'\nimport { TranslateModule, TranslateService } from '@ngx-translate/core'\n\nimport { GameComponent } from '../game/game.component'\nimport { GameEndComponent } from '../game-end/game-end.component'\nimport { GameRoutingModule } from '../game-routing/game-routing.module'\nimport { LanguageModule } from '../language/language.module'\nimport { LanguageService } from '../language/language.service'\nimport { MaterialModule } from '../material/material.module'\nimport { StopwatchComponent } from '../stopwatch/stopwatch.component'\nimport {\n  ROUTE_TOKEN,\n  translateModuleOptions\n} from '../translate-loader/translate-browser.loader'\nimport { StopwatchService } from '../stopwatch/stopwatch.service'\n\n/**\n * Entry Module\n */\n@NgModule({\n  declarations: [GameComponent, GameEndComponent, StopwatchComponent],\n  imports: [\n    CommonModule,\n    GameRoutingModule,\n    MaterialModule,\n    RouterModule,\n    TranslateModule.forChild(translateModuleOptions)\n  ],\n  providers: [{ provide: ROUTE_TOKEN, useValue: 'game' }, StopwatchService],\n  entryComponents: [GameEndComponent],\n  bootstrap: [GameComponent]\n})\n/**\n * Entry Module\n */\nexport class GameModule extends LanguageModule {\n  constructor(language: LanguageService, translate: TranslateService) {\n    super()\n\n    this.langChange(language, translate, 'GameModule')\n  }\n}\n","import { isPlatformBrowser } from '@angular/common'\nimport { Inject, Injectable, PLATFORM_ID } from '@angular/core'\nimport { BehaviorSubject } from 'rxjs'\n\nimport { ITime, StopwatchState } from '../time/time.d'\nimport { isNullOrUndefined } from '../utilities/is-null-or-undefined'\n\n@Injectable()\nexport class StopwatchService {\n  /**\n   * The worker for generating a random deck of cards\n   */\n  private worker: Worker\n  /**\n   * Milliseconds\n   */\n  public milliseconds: number\n  /**\n   * Seconds\n   */\n  public seconds: number\n  /**\n   * Minutes\n   */\n  public minutes: number\n  /**\n   * Hours\n   */\n  public hours: number\n  /**\n   * Refresh the stopwatch.\n   */\n  public refresh: BehaviorSubject<'refresh'>\n\n  constructor(@Inject(PLATFORM_ID) private readonly platformId: string) {\n    this.refresh = new BehaviorSubject<'refresh'>('refresh')\n    this.registerWorker()\n  }\n\n  /**\n   * register the worker\n   */\n  private registerWorker(): void {\n    if (isPlatformBrowser(this.platformId)) {\n      if (!isNullOrUndefined(Worker)) {\n        this.worker = new Worker('./worker/stopwatch.worker', {\n          type: 'module',\n          name: 'stopwatch'\n        })\n\n        this.worker.addEventListener(\n          'message',\n          (event: MessageEvent<ITime>): void => {\n            this.hours = event.data.hours\n            this.minutes = event.data.minutes\n            this.seconds = event.data.seconds\n            this.milliseconds = event.data.milliseconds\n            this.refresh.next('refresh')\n          }\n        )\n      }\n    }\n  }\n\n  private post(type: StopwatchState): void {\n    if (isPlatformBrowser(this.platformId)) {\n      if (!isNullOrUndefined(Worker) && !isNullOrUndefined(this.worker)) {\n        this.worker.postMessage(type)\n      }\n    }\n  }\n\n  public pause(): void {\n    this.post('pause')\n  }\n  public reset(): void {\n    this.post('reset')\n  }\n  public restart(): void {\n    this.post('restart')\n  }\n  public start(): void {\n    this.post('start')\n  }\n}\n"],"sourceRoot":"webpack:///"}