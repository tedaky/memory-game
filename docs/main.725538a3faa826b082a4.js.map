{"version":3,"sources":["./projects/the-application/src/check-for-update/check-for-update.component.ts","./projects/the-application/src/check-for-update/check-for-update.component.html","./projects/the-application/src/fade-animation/fade-animation.ts","./projects/the-application/src/statistic/statistic.ts","./projects/the-application/src/time/time.ts","./projects/the-application/src/high-scores/high-scores.service.ts","./projects/the-application/src/language/language.module.ts","./projects/the-application/src/environments/environment.ts","./projects/the-application/src/recent-scores/recent-scores.service.ts","./projects/the-application/src/utilities/make-array.ts","./projects/the-application/src/theme/theme.service.ts","./projects/the-application/src/menu-button/menu-button.ts","./projects/the-application/src/main-menu/main-menu.component.html","./projects/the-application/src/main-menu/main-menu.component.ts","./projects/the-application/src/root/root.component.ts","./projects/the-application/src/root/root.component.html","./projects/the-application/src/redirect/redirect.ts","./projects/the-application/src/can-deactivate-game/can-deactivate-game.guard.ts","./projects/the-application/src/route/route.guard.ts","./projects/the-application/src/root-routing/root-routing.module.ts","./projects/the-application/src/root/root.module.ts","./projects/the-application/src/main.ts","./projects/the-application/src/root/root.worker.ts","./projects/the-application/src/utilities/make-property.ts","./projects/the-application/$_lazy_route_resource lazy namespace object","./projects/the-application/src/cards/cards.service.ts","./projects/the-application/src/leaderboard/leaderboard.service.ts","./projects/the-application/src/database/database.service.ts","./projects/the-application/src/settings/settings.service.ts","./projects/the-application/src/device-size/device-size.ts","./projects/the-application/src/install/install.component.html","./projects/the-application/src/install/install.component.ts","./projects/the-application/src/device/device.service.ts","./projects/the-application/src/analytics/analytics.service.ts","./projects/the-application/src/setting/setting.ts","./projects/the-application/src/background/background.service.ts","./projects/the-application/src/utilities/is-null-or-undefined.ts","./projects/the-application/src/utilities/is-null.ts","./projects/the-application/src/utilities/is-undefined.ts","./projects/the-application/src/cards/worker/cards.worker.ts","./projects/the-application/src/create-time/create-time.ts","./projects/the-application/src/score/score.ts","./projects/the-application/src/translate-loader/translate-browser.loader.ts","./projects/the-application/src/material/material.module.ts","./projects/the-application/src/game/game.service.ts","./projects/the-application/src/language/language.service.ts","./projects/the-application/src/route-location/route-location.ts","./projects/the-application/src/check-for-update/check-for-update.service.ts"],"names":["CheckForUpdateComponent","snack","this","dismissWithAction","dismiss","fadeAnimation","opacity","optional","Statistic","arg1","arg2","arg3","arg4","arg5","arg6","arg7","arg8","arg9","arg10","arg11","arg12","arg13","mode","match","flips","count","complete","milliseconds","seconds","minutes","hours","memory","keyID","statistic","temp","toJSON","Time","time","HighScoresService","platformId","analytics","database","game","super","storeName","LanguageModule","language","translate","module","lang","subscribe","val","sub","use","console","error","setTranslation","unsubscribe","environment","location","production","RecentScoresService","scores","unshift","MakeArray","target","key","backingField","Object","defineProperty","writable","enumerable","configurable","get","set","newVal","Array","isArray","push","splice","length","ThemeService","theme","colour","MenuButton","icon","label","route","MainMenuComponent","lan","menuButtons","Game","highScores","HighScores","recentScores","RecentScores","settings","Settings","x","y","ripple","launch","persistent","animation","enterDuration","exitDuration","fadeOut","event","routerLinkActive","preventDefault","isActive","playing","value","window","localStorage","removeItem","setTheme","clientX","clientY","element","getClientRects","item","Math","floor","width","height","launchRipple","index","name","Subscription","trackBy","RootComponent","background","cards","outlet","result","isActivated","activatedRoute","scrollPosition","parseInt","getItem","contentWrapper","nativeElement","scrollTop","setItem","toString","scroll","redirect","navigator","substring","CanDeactivateGameGuard","snackBar","keys","open","duration","panelClass","RouteGuard","router","supported","params","includes","segments","fullPath","getDefaultLang","getCurrentNavigation","finalUrl","root","children","primary","map","path","navigate","setLang","routes","pathMatch","redirectTo","canActivate","canDeactivate","loadChildren","GameModule","HighScoresModule","RecentScoresModule","SettingsModule","RootRoutingModule","forRoot","RootModule","default","langChange","registerLocaleData","translateChange","getBrowserLang","setDefaultLang","onLangChange","setBrowser","translations","TITLE","DESCRIPTION","provide","useValue","withServerTransition","appId","register","enabled","document","addEventListener","requestAnimationFrame","then","moduleRef","appRef","comRef","injector","components","w","d","s","l","i","dl","f","j","Date","getTime","getElementsByTagName","createElement","async","src","parentNode","insertBefore","createGoogleTag","catch","exports","MakeProperty","Model","base","setter","getter","primitiveGetter","webpackEmptyAsyncContext","req","Promise","resolve","e","Error","code","id","CardsService","refresh","registerWorker","Worker","worker","type","blank","data","deck","white","next","postMessage","card","flipped","image","LeaderboardService","DatabaseService","openDatabase","version","ready","message","objectStoreNames","contains","warn","createObjectStore","keyPath","autoIncrement","reject","request","self","indexedDB","onerror","close","onblocked","log","onsuccess","onversionchange","event1","openFromComponent","onAction","reload","onclose","onupgradeneeded","newVersion","request1","promises","completeCase3vCase4","resolve1","reject1","transaction","objectStore","request2","getAll","promises1","forEach","res","promise","resolve2","reject2","json","update","put","event2","all","updateCase3vCase4","oldVersion","names","reduce","pv","cv","found","findIndex","setting","add","group","DOMException","index1","SettingsService","getSettings","_settings","addSetting","DeviceSize","InstallComponent","test","platform","maxTouchPoints","userAgent","withAction","DeviceService","checkForUpdate","active","BehaviorSubject","deviceScreen","beforeunload","createActiveListener","createResizeListener","emitResizeFirst","install","emit","screen","deferredPrompt","updateAvailable","prompt","AnalyticsService","dataLayer","arguments","Setting","BackgroundService","device","leaderboard","webWorker","onmessage","isNullOrUndefined","arg","isNull","undefined","isUndefined","createTime","Score","dataChange","getScores","_scores","filter","score","a","b","aTime","bTime","aWeight","bWeight","sort","compare","addScoreStatistic","gameState","shouldAdd","getScoresBy","gameStateWeight","statisticWeight","gtag","isHighScore","clearScores","clear","delete","ROUTE_TOKEN","translateModuleOptions","extend","isolate","loader","useFactory","httpClient","deps","missingTranslationHandler","useClass","subscriber","fetcher","getTranslation","translateService","currentLang","defaultLang","useDefaultLang","MaterialModule","GameService","masterVolume","effectsVolume","ambientVolume","responseType","pipe","LanguageService","description","title","html","documentElement","querySelector","innerText","content","href","RouteLoction","CheckForUpdateService","isEnabled","available","activated","timer","notify","previous","current","activateUpdate","appData","hash","appIsStable$","everySixHours$","everySixHoursOnceAppIsStable$","isStable"],"mappings":"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","file":"main.725538a3faa826b082a4.js","sourcesContent":["import { ChangeDetectionStrategy, Component, HostBinding } from '@angular/core'\nimport { MatSnackBarRef } from '@angular/material/snack-bar'\n\n@Component({\n  selector: 'app-check-for-update',\n  templateUrl: './check-for-update.component.html',\n  styleUrls: ['./check-for-update.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class CheckForUpdateComponent {\n  @HostBinding('class.mat-simple-snackbar') private get simple(): true {\n    return true\n  }\n\n  constructor(private snack: MatSnackBarRef<CheckForUpdateComponent>) {}\n\n  public dismiss(): void {\n    this.snack.dismissWithAction()\n  }\n}\n","<span>\n  {{ 'UPDATE_AVAILABLE' | translate }}{{ 'FULL_STOP' | translate }}\n  {{ 'PLEASE_RELOAD' | translate }}{{ 'FULL_STOP' | translate }}\n</span>\n<div class=\"mat-simple-snackbar-action\">\n  <button mat-button (click)=\"dismiss()\">\n    <mat-icon aria-hidden=\"false\" [attr.aria-label]=\"'REFRESH' | translate\">\n      refresh\n    </mat-icon>\n  </button>\n</div>\n","import {\n  animate,\n  AnimationTriggerMetadata,\n  query,\n  style,\n  transition,\n  trigger\n} from '@angular/animations'\n\nexport const fadeAnimation: AnimationTriggerMetadata = trigger(\n  'fadeAnimation',\n  [\n    transition('* => *', [\n      query(':enter', [style({ opacity: 0 })], { optional: true }),\n\n      query(\n        ':leave',\n        [style({ opacity: 1 }), animate('350ms', style({ opacity: 0 }))],\n        { optional: true }\n      ),\n\n      query(\n        ':enter',\n        [style({ opacity: 0 }), animate('350ms', style({ opacity: 1 }))],\n        { optional: true }\n      )\n    ])\n  ]\n)\n","import { Count, IStatistic, Match, Mode } from './statistic.d'\nimport { Time } from '../time/time'\nimport { ITime } from '../time/time.d'\nimport { MakeProperty } from '../utilities/make-property'\nimport { isNullOrUndefined } from '../utilities/is-null-or-undefined'\n\n/**\n * Statistic model to score.\n */\nexport class Statistic implements IStatistic {\n  /**\n   * KeyID\n   */\n  public keyID?: number\n\n  /**\n   * Complete\n   */\n  @MakeProperty(Time)\n  public complete: Time\n\n  /**\n   * Memory\n   */\n  @MakeProperty(Time)\n  public memory: Time\n\n  /**\n   * Flips\n   */\n  @MakeProperty()\n  public flips: number\n\n  /**\n   * Count\n   */\n  @MakeProperty()\n  public count: Count\n\n  /**\n   * Match\n   */\n  @MakeProperty()\n  public match: Match\n\n  /**\n   * Mode\n   */\n  @MakeProperty()\n  public mode: Mode\n\n  /**\n   * Create Statistic model.\n   *\n   * @param statistic `IStatistic`\n   */\n  constructor(statistic: IStatistic)\n  /**\n   * Create Statistic model.\n   *\n   * @param mode `Mode` Mode\n   * @param match `Match` Match\n   * @param flips `number` Flips\n   * @param count `Count` Count\n   * @param complete `ITime` Complete\n   * @param memory `ITime` Memory\n   */\n  constructor(\n    mode: Mode,\n    match: Match,\n    flips: number,\n    count: Count,\n    complete: ITime,\n    memory: ITime\n  )\n  /**\n   * Create Statistic model.\n   *\n   * @param mode `Mode` Mode\n   * @param match `Match` Match\n   * @param flips `number` Flips\n   * @param count `Count` Count\n   * @param complete `ITime` Complete\n   * @param memory `ITime` Memory\n   * @param keyID `number` KeyID\n   */\n  constructor(\n    mode: Mode,\n    match: Match,\n    flips: number,\n    count: Count,\n    complete: ITime,\n    memory: ITime,\n    keyID: number\n  )\n  /**\n   * Create Statistic model.\n   *\n   * @param mode `Mode` Mode\n   * @param match `Match` Match\n   * @param flips `number` Flips\n   * @param count `Count` Count\n   * @param completeMilliseconds `number` Complete Milliseconds\n   * @param completeSeconds `number` Complete Seconds\n   * @param completeMinutes `number` Complete Minutes\n   * @param completeHours `number` Complete Hours\n   * @param memoryMilliseconds `number` Complete Milliseconds\n   * @param memorySeconds `number` Complete Seconds\n   * @param memoryMinutes` number` Complete Minutes\n   * @param memoryHours `number` Complete Hours\n   */\n  constructor(\n    mode: Mode,\n    match: Match,\n    flips: number,\n    count: Count,\n    completeMilliseconds: number,\n    completeSeconds: number,\n    completeMinutes: number,\n    completeHours: number,\n    memoryMilliseconds: number,\n    memorySeconds: number,\n    memoryMinutes: number,\n    memoryHours: number\n  )\n  /**\n   * Create Statistic model.\n   *\n   * @param mode `Mode` Mode\n   * @param match `Match` Match\n   * @param flips `number` Flips\n   * @param count `Count` Count\n   * @param completeMilliseconds `number` Complete Milliseconds\n   * @param completeSeconds `number` Complete Seconds\n   * @param completeMinutes `number` Complete Minutes\n   * @param completeHours `number` Complete Hours\n   * @param memoryMilliseconds `number` Complete Milliseconds\n   * @param memorySeconds `number` Complete Seconds\n   * @param memoryMinutes` number` Complete Minutes\n   * @param memoryHours `number` Complete Hours\n   * @param keyID `number` KeyID\n   */\n  constructor(\n    mode: Mode,\n    match: Match,\n    flips: number,\n    count: Count,\n    completeMilliseconds: number,\n    completeSeconds: number,\n    completeMinutes: number,\n    completeHours: number,\n    memoryMilliseconds: number,\n    memorySeconds: number,\n    memoryMinutes: number,\n    memoryHours: number,\n    keyID: number\n  )\n  constructor(\n    arg1: Mode | IStatistic,\n    arg2?: Match,\n    arg3?: number,\n    arg4?: Count,\n    arg5?: ITime | number,\n    arg6?: ITime | number,\n    arg7?: number,\n    arg8?: number,\n    arg9?: number,\n    arg10?: number,\n    arg11?: number,\n    arg12?: number,\n    arg13?: number\n  ) {\n    if (typeof arg1 === 'string') {\n      this.mode = arg1\n      this.match = arg2\n      this.flips = arg3\n      this.count = arg4\n\n      if (typeof arg5 === 'number') {\n        this.complete.milliseconds = arg5\n        this.complete.seconds = arg6 as number\n        this.complete.minutes = arg7\n        this.complete.hours = arg8\n\n        this.memory.milliseconds = arg9\n        this.memory.seconds = arg10\n        this.memory.minutes = arg11\n        this.memory.hours = arg12\n\n        if (typeof arg13 === 'number') {\n          this.keyID = arg13\n        }\n      } else {\n        this.complete = arg5\n        this.memory = arg6 as ITime\n\n        if (typeof arg7 === 'number') {\n          this.keyID = arg7\n        }\n      }\n    } else {\n      this.mode = arg1.mode\n      this.match = arg1.match\n      this.flips = arg1.flips\n      this.count = arg1.count\n      this.complete = arg1.complete\n      this.memory = arg1.memory\n\n      if (typeof arg1.keyID === 'number') {\n        this.keyID = arg1.keyID\n      }\n    }\n  }\n\n  /**\n   * Convert Statistic model to JSON.\n   *\n   * @param statistic `IStatistic`\n   */\n  static toJSON(statistic: IStatistic): IStatistic {\n    let temp: IStatistic\n\n    temp = {} as IStatistic\n\n    temp.complete = Time.toJSON(statistic.complete)\n    temp.memory = Time.toJSON(statistic.memory)\n    temp.flips = statistic.flips\n    temp.count = statistic.count\n    temp.match = statistic.match\n    temp.mode = statistic.mode\n\n    if (!isNullOrUndefined(statistic.keyID)) {\n      temp.keyID = statistic.keyID\n    }\n\n    return temp\n  }\n}\n","import { ITime } from './time.d'\nimport { isNullOrUndefined } from '../utilities/is-null-or-undefined'\nimport { MakeProperty } from '../utilities/make-property'\n\nexport class Time implements ITime {\n  /**\n   * Milliseconds\n   */\n  @MakeProperty(null, 0)\n  public milliseconds: number\n\n  /**\n   * Seconds\n   */\n  @MakeProperty(null, 0)\n  public seconds: number\n\n  /**\n   * Minutes\n   */\n  @MakeProperty(null, 0)\n  public minutes: number\n\n  /**\n   * Hours\n   */\n  @MakeProperty(null, 0)\n  public hours: number\n\n  /**\n   * Create Time model.\n   */\n  constructor()\n  /**\n   * Create Time model.\n   *\n   * @param time `ITime`\n   */\n  constructor(time: ITime)\n  /**\n   * Create Time model.\n   *\n   * @param milliseconds `number` Milliseconds\n   * @param seconds `number` Seconds\n   * @param minutes `number` Minutes\n   * @param hours `number` Hours\n   */\n  constructor(\n    milliseconds: number,\n    seconds: number,\n    minutes: number,\n    hours: number\n  )\n  constructor(\n    arg1?: number | ITime,\n    arg2?: number,\n    arg3?: number,\n    arg4?: number\n  ) {\n    if (!isNullOrUndefined(arg1)) {\n      if (typeof arg1 === 'number') {\n        this.milliseconds = arg1\n        this.seconds = arg2\n        this.minutes = arg3\n        this.hours = arg4\n      } else {\n        this.milliseconds = arg1.milliseconds\n        this.seconds = arg1.seconds\n        this.minutes = arg1.minutes\n        this.hours = arg1.hours\n      }\n    }\n  }\n\n  static toJSON(time: ITime): ITime {\n    let temp: ITime\n\n    temp = {} as ITime\n\n    temp.milliseconds = time.milliseconds\n    temp.seconds = time.seconds\n    temp.minutes = time.minutes\n    temp.hours = time.hours\n\n    return temp\n  }\n}\n","import { Inject, Injectable, PLATFORM_ID } from '@angular/core'\n\nimport { AnalyticsService } from '../analytics/analytics.service'\nimport { DatabaseService } from '../database/database.service'\nimport { GameService } from '../game/game.service'\nimport { Score } from '../score/score'\n\n/**\n * Functionality for getting, adding, sorting, removing, and clearing for indexeddb and scores list.\n *\n * Store is `highScores`\n */\n@Injectable({\n  providedIn: 'root'\n})\n/**\n * Functionality for getting, adding, sorting, removing, and clearing for indexeddb and scores list.\n *\n * Store is `highScores`\n */\nexport class HighScoresService extends Score {\n  /**\n   * Indexeddb Store Name = `highScores`\n   */\n  protected storeName: string = 'highScores'\n\n  constructor(\n    @Inject(PLATFORM_ID) readonly platformId: string,\n    analytics: AnalyticsService,\n    database: DatabaseService,\n    game: GameService\n  ) {\n    super(platformId, analytics, database, game)\n  }\n}\n","import { TranslateService } from '@ngx-translate/core'\nimport { Subscription } from 'rxjs'\n\nimport { LanguageService } from './language.service'\n\nexport abstract class LanguageModule {\n  protected langChange(\n    language: LanguageService,\n    translate: TranslateService,\n    module: string\n  ): void {\n    language.lang.subscribe((val: string): void => {\n      let sub: Subscription\n\n      sub = translate.use(val).subscribe(\n        (): void => {},\n        (): void => {\n          console.error(`Language \"${val}\": at \"${module}\" not found.`)\n\n          translate.setTranslation(val, {}, true)\n        },\n        (): void => {\n          if (sub && sub instanceof Subscription) {\n            sub.unsubscribe()\n          }\n        }\n      )\n    })\n  }\n}\n","/**\n * Environment properties.\n */\nexport const environment = {\n  analytics: false,\n  location: '/memory-game/',\n  production: true\n}\n","import { Inject, Injectable, PLATFORM_ID } from '@angular/core'\n\nimport { AnalyticsService } from '../analytics/analytics.service'\nimport { DatabaseService } from '../database/database.service'\nimport { GameService } from '../game/game.service'\nimport { Score } from '../score/score'\nimport { Statistic } from '../statistic/statistic'\n\n/**\n * Functionality for getting, adding, sorting, removing, and clearing for indexeddb and scores list.\n *\n * Store is `recentScores`\n */\n@Injectable({\n  providedIn: 'root'\n})\n/**\n * Functionality for getting, adding, sorting, removing, and clearing for indexeddb and scores list.\n *\n * Store is `recentScores`\n */\nexport class RecentScoresService extends Score {\n  /**\n   * Indexeddb Store Name = `recentScores`\n   */\n  protected storeName: string = 'recentScores'\n\n  constructor(\n    @Inject(PLATFORM_ID) readonly platformId: string,\n    analytics: AnalyticsService,\n    database: DatabaseService,\n    game: GameService\n  ) {\n    super(platformId, analytics, database, game)\n  }\n\n  /**\n   * Prepend statistic to the scores list.\n   */\n  public addScoreStatistic(statistic: Statistic): void {\n    this.scores.unshift(statistic)\n  }\n}\n","import { isNullOrUndefined } from './is-null-or-undefined'\n\n/**\n * Decorator Function for creating class property get and set for Array.\n *\n * Creates or assigns an array if one doesn't exist.\n * If an array exists, that array is emptied then new array items are pushed.\n *\n * ### Example:\n *\n * ```ts\n * export class MyClass {\n *   ＠MakeArray<MyClass, string>()\n *   public myProperty: string[]\n * }\n * ```\n *\n * ### Same as:\n *\n * ```ts\n * import { isNullOrUndefined } from '@nexplore/utilities'\n * export class MyClass {\n *   private _myProperty: string[]\n *   public get myProperty(): string[] {\n *     if (isNullOrUndefined(this._myProperty)) {\n *       this.myProperty = null\n *     }\n *     return this._myProperty\n *   }\n *   public set myProperty(val: string[]) {\n *     if (isNullOrUndefined(this._myProperty)) {\n *       if (!Array.isArray(val)) {\n *         this._myProperty = []\n *         if (!isNullOrUndefined(val)) {\n *           this._myProperty.push(val)\n *         }\n *       } else {\n *         this._myProperty = val\n *       }\n *     } else {\n *       this._myProperty.splice(0, this._myProperty.length)\n *       if (!Array.isArray(val)) {\n *         if (!isNullOrUndefined(val)) {\n *           this._myProperty.push(val)\n *         }\n *       } else {\n *         this._myProperty.push(...val)\n *       }\n *     }\n *  }\n * }\n * ```\n */\nexport function MakeArray<T, S>(): (target: T, key: string) => void {\n  return (target: T, key: string): void => {\n    //#region Create Writable\n    let backingField: string\n\n    backingField = '_' + key\n\n    Object.defineProperty(target, backingField, {\n      writable: true,\n      enumerable: true,\n      configurable: true\n    })\n    //#endregion Create Writable\n\n    //#region Create Getter and Setter for Array\n    // property getter\n    function getter(this: T): S[] {\n      if (isNullOrUndefined(this[backingField])) {\n        this[key] = null\n      }\n\n      return this[backingField]\n    }\n\n    // property setter\n    function setter(this: T, newVal: S[]): void {\n      // Check if _queued is already set\n      if (isNullOrUndefined(this[backingField])) {\n        // check if newVal is an array\n        if (!Array.isArray(newVal)) {\n          // assign array\n          this[backingField] = []\n\n          // add newVal if newVal is defined\n          if (!isNullOrUndefined(newVal)) {\n            // push newVal\n            this[backingField].push(newVal)\n          }\n        } else {\n          // assign as newVal\n          this[backingField] = newVal\n        }\n      } else {\n        // Clear array\n        this[backingField].splice(0, this[backingField].length)\n\n        if (!Array.isArray(newVal)) {\n          // only push if newVal is defined\n          if (!isNullOrUndefined(newVal)) {\n            this[backingField].push(newVal)\n          }\n        } else {\n          // push all of val array\n          this[backingField].push(...newVal)\n        }\n      }\n    }\n    //#endregion Create Getter and Setter for Array\n\n    // Create new property with getter and setter\n    Object.defineProperty(target, key, {\n      get: getter,\n      set: setter,\n      enumerable: true,\n      configurable: true\n    })\n  }\n}\n","import { Injectable } from '@angular/core'\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ThemeService {\n  public theme: string = 'theme-blue'\n  public colour: string = '#0336ff'\n\n  constructor() {}\n\n  public setTheme(theme: string): void {\n    if (this.theme !== theme) {\n      let colour: string\n\n      this.theme = theme\n      colour = ''\n\n      switch (theme) {\n        case 'theme-blue':\n          colour = '#5c7cff'\n          break\n        case 'theme-red':\n          colour = '#ff626f'\n          break\n        case 'theme-yellow':\n          colour = '#ffed75'\n          break\n        case 'theme-purple':\n          colour = '#9c27b0'\n          break\n      }\n\n      this.colour = colour\n    }\n  }\n}\n","export class MenuButton {\n  constructor(\n    public icon: string,\n    public label: string,\n    public route: string,\n    public theme: string\n  ) {}\n}\n","<ng-container *ngFor=\"let menu of menuButtons; trackBy: trackBy\">\n  <a\n    mat-button\n    [attr.aria-label]=\"menu.label\"\n    disableRipple=\"true\"\n    (click)=\"setTheme($event, menu.theme, rla)\"\n    [routerLink]=\"['/', language.lang | async, menu.route]\"\n    routerLinkActive=\"router-link-active\"\n    #rla=\"routerLinkActive\"\n  >\n    <mat-icon\n      aria-hidden=\"false\"\n      [fontSet]=\"rla.isActive ? 'material-icons-outlined' : 'material-icons'\"\n      [color]=\"rla.isActive ? 'primary' : ''\"\n      [attr.aria-label]=\"menu.label | translate\"\n    >\n      {{ menu.icon }}\n    </mat-icon>\n    <span>\n      {{ menu.label | translate }}\n    </span>\n  </a>\n</ng-container>\n","import { isPlatformBrowser } from '@angular/common'\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  Inject,\n  Input,\n  OnDestroy,\n  OnInit,\n  PLATFORM_ID\n} from '@angular/core'\nimport { MatRipple } from '@angular/material/core'\nimport { RouterLinkActive } from '@angular/router'\nimport { Subscription } from 'rxjs'\n\nimport { GameService } from '../game/game.service'\nimport { LanguageService } from '../language/language.service'\nimport { MenuButton } from '../menu-button/menu-button'\nimport { RouteLoction } from '../route-location/route-location'\nimport { ThemeService } from '../theme/theme.service'\nimport { MakeArray } from '../utilities/make-array'\nimport { MakeProperty } from '../utilities/make-property'\n\n@Component({\n  selector: 'app-main-menu',\n  templateUrl: './main-menu.component.html',\n  styleUrls: ['./main-menu.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MainMenuComponent implements OnInit, OnDestroy {\n  private sub: Subscription\n\n  @MakeProperty<MainMenuComponent, string>() public lan: string\n\n  @MakeArray<MainMenuComponent, MenuButton>() public menuButtons: MenuButton[]\n\n  @Input() public ripple: MatRipple\n\n  constructor(\n    @Inject(PLATFORM_ID) private readonly platformId: string,\n    private game: GameService,\n    public language: LanguageService,\n    public theme: ThemeService\n  ) {}\n\n  private lang(): void {\n    this.sub = this.language.lang.subscribe((val: string): void => {\n      this.lan = val\n    })\n  }\n\n  public ngOnInit(): void {\n    this.lang()\n\n    this.menuButtons = []\n\n    const game = new MenuButton(\n      'view_module',\n      'GAME',\n      `${RouteLoction.Game}`,\n      'theme-yellow'\n    )\n    const highScores = new MenuButton(\n      'view_headline',\n      'HIGH_SCORES',\n      `${RouteLoction.HighScores}`,\n      'theme-blue'\n    )\n    const recentScores = new MenuButton(\n      'timelapse',\n      'RECENT_SCORES',\n      `${RouteLoction.RecentScores}`,\n      'theme-red'\n    )\n    // const leaderboard = new MenuButton(\n    //   'leaderboard',\n    //   'Leaderboard',\n    //   `${RouteLoction.Leaderboard}`,\n    //   'theme-pink'\n    // )\n    const settings = new MenuButton(\n      'settings',\n      'SETTINGS',\n      `${RouteLoction.Settings}`,\n      'theme-purple'\n    )\n\n    // this.menuButtons = [game, highScores, recentScores, leaderboard, settings]\n    this.menuButtons = [game, highScores, recentScores, settings]\n  }\n\n  private launchRipple(x: number, y: number, colour: string): void {\n    this.ripple\n      .launch(x, y, {\n        persistent: true,\n        animation: {\n          enterDuration: 700,\n          exitDuration: 700\n        }\n      })\n      .fadeOut()\n  }\n\n  public setTheme(\n    event: MouseEvent,\n    theme: string,\n    routerLinkActive: RouterLinkActive\n  ): void {\n    event.preventDefault()\n\n    if (routerLinkActive.isActive || this.game.playing.value) {\n      return\n    }\n\n    if (isPlatformBrowser(this.platformId)) {\n      window.localStorage.removeItem('scroll')\n    }\n\n    let x: number\n    let y: number\n\n    this.theme.setTheme(theme)\n\n    if (!event.clientX && !event.clientY) {\n      let element: DOMRect\n\n      element = (event.target as HTMLAnchorElement).getClientRects().item(0)\n\n      x = Math.floor(element.x + element.width / 2)\n      y = Math.floor(element.y + element.height / 2)\n    } else {\n      x = event.clientX\n      y = event.clientY\n    }\n\n    this.launchRipple(x, y, this.theme.colour)\n  }\n\n  public trackBy(index: number, name: MenuButton): string {\n    return name.route\n  }\n\n  public ngOnDestroy(): void {\n    if (this.sub && this.sub instanceof Subscription) {\n      this.sub.unsubscribe()\n    }\n  }\n}\n","import { isPlatformBrowser } from '@angular/common'\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Inject,\n  PLATFORM_ID,\n  ViewChild\n} from '@angular/core'\nimport { MatRipple } from '@angular/material/core'\nimport { ActivatedRoute, RouterOutlet } from '@angular/router'\n\nimport { BackgroundService } from '../background/background.service'\nimport { CardsService } from '../cards/cards.service'\nimport { fadeAnimation } from '../fade-animation/fade-animation'\nimport { ThemeService } from '../theme/theme.service'\n\n/**\n * Root that holds game and statistics.\n */\n@Component({\n  selector: 'app-root',\n  templateUrl: './root.component.html',\n  styleUrls: ['./root.component.scss'],\n  animations: [fadeAnimation],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\n/**\n * Root that holds game and statistics.\n */\nexport class RootComponent implements AfterViewInit {\n  @ViewChild('contentWrapper', { static: true })\n  public contentWrapper: ElementRef<HTMLDivElement>\n\n  @ViewChild(MatRipple, { static: true }) ripple: MatRipple\n\n  constructor(\n    @Inject(PLATFORM_ID) private readonly platformId: string,\n    public theme: ThemeService,\n    background: BackgroundService,\n    cards: CardsService\n  ) {}\n\n  public getRouterOutletState(outlet: RouterOutlet): ActivatedRoute | string {\n    let result: ActivatedRoute | string\n\n    if (outlet.isActivated) {\n      result = outlet.activatedRoute\n    } else {\n      result = ''\n    }\n\n    return result\n  }\n\n  public ngAfterViewInit(): void {\n    if (isPlatformBrowser(this.platformId)) {\n      let scrollPosition: number\n\n      scrollPosition = parseInt(window.localStorage.getItem('scroll'), 10)\n\n      if (!!scrollPosition) {\n        this.contentWrapper.nativeElement.scrollTop = scrollPosition\n      }\n    }\n  }\n\n  public scroll(event: Event): void {\n    if (isPlatformBrowser(this.platformId)) {\n      let scrollPosition: number\n\n      scrollPosition = (event.target as HTMLDivElement).scrollTop\n\n      window.localStorage.setItem('scroll', scrollPosition.toString())\n    }\n  }\n}\n","<div matRipple [matRippleDisabled]=\"true\"></div>\n<div class=\"container\" [ngClass]=\"theme.theme\">\n  <div #contentWrapper class=\"content-wrapper\" (scroll)=\"scroll($event)\">\n    <div class=\"wrapper\">\n      <mat-card class=\"mat-elevation-z0\">\n        <mat-card-content [@fadeAnimation]=\"getRouterOutletState(o)\">\n          <router-outlet #o=\"outlet\"></router-outlet>\n        </mat-card-content>\n      </mat-card>\n    </div>\n  </div>\n  <app-main-menu class=\"mat-elevation-z4\" [ripple]=\"ripple\"></app-main-menu>\n</div>\n","export function redirect(): string {\n  if (typeof window === 'undefined') {\n    return\n  }\n\n  let lang: string\n\n  if (window?.localStorage) {\n    lang = window?.localStorage?.getItem('locale')\n  }\n\n  if (lang) {\n    return lang\n  }\n\n  if (window?.navigator?.language) {\n    lang = window?.navigator?.language?.substring(0, 2)\n  }\n\n  if (lang) {\n    return lang\n  }\n\n  return\n}\n","import { Injectable } from '@angular/core'\nimport { MatSnackBar } from '@angular/material/snack-bar'\nimport { CanDeactivate } from '@angular/router'\nimport { TranslateService } from '@ngx-translate/core'\nimport { Subscription } from 'rxjs'\n\nimport { GameComponent } from '../game/game.component'\nimport { GameService } from '../game/game.service'\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CanDeactivateGameGuard implements CanDeactivate<GameComponent> {\n  constructor(\n    private game: GameService,\n    private snackBar: MatSnackBar,\n    private translate: TranslateService\n  ) {}\n\n  public canDeactivate(): boolean {\n    if (this.game.playing.value) {\n      let keys: string[]\n      let sub: Subscription\n\n      keys = ['PLEASE_FINISH_OR_RESET_GAME', 'FULL_STOP', 'CLOSE']\n\n      sub = this.translate.get(keys).subscribe(\n        (val: { [key: string]: string }): void => {\n          this.snackBar.open(`${val[keys[0]]}${val[keys[1]]}`, val[keys[2]], {\n            duration: 8000,\n            panelClass: 'snack-bar-reposition'\n          })\n        },\n        (): void => {},\n        (): void => {\n          if (sub && sub instanceof Subscription) {\n            sub.unsubscribe()\n          }\n        }\n      )\n    }\n\n    return !this.game.playing.value\n  }\n}\n","import { isPlatformBrowser } from '@angular/common'\nimport { Inject, Injectable, PLATFORM_ID } from '@angular/core'\nimport {\n  ActivatedRouteSnapshot,\n  CanActivate,\n  Router,\n  UrlSegment\n} from '@angular/router'\nimport { TranslateService } from '@ngx-translate/core'\n\nimport { LanguageService } from '../language/language.service'\nimport { redirect } from '../redirect/redirect'\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RouteGuard implements CanActivate {\n  constructor(\n    @Inject(PLATFORM_ID) private readonly platformId: string,\n    private language: LanguageService,\n    private router: Router,\n    private translate: TranslateService\n  ) {}\n\n  public canActivate(route: ActivatedRouteSnapshot): boolean {\n    let set: string\n    let supported: boolean\n\n    set = route.params?.lang\n\n    supported = this.language.supported.includes(set)\n\n    if (!supported) {\n      let segments: UrlSegment[]\n      let fullPath: string[]\n\n      set = redirect() || this.translate.getDefaultLang()\n\n      segments = this.router.getCurrentNavigation().finalUrl?.root?.children\n        ?.primary?.segments\n\n      fullPath = segments.map<string>((val: UrlSegment): string => {\n        return val.path\n      })\n\n      fullPath[0] = set\n\n      this.router.navigate(fullPath)\n\n      return false\n    }\n\n    if (isPlatformBrowser(this.platformId)) {\n      window.localStorage.setItem('locale', set)\n    }\n\n    this.language.setLang(set)\n\n    return true\n  }\n}\n","import { NgModule } from '@angular/core'\nimport { Routes, RouterModule } from '@angular/router'\n\nimport { CanDeactivateGameGuard } from '../can-deactivate-game/can-deactivate-game.guard'\nimport { GameModule } from '../game/game.module'\nimport { HighScoresModule } from '../high-scores/high-scores.module'\nimport { LeaderboardModule } from '../leaderboard/leaderboard.module'\nimport { RecentScoresModule } from '../recent-scores/recent-scores.module'\nimport { redirect } from '../redirect/redirect'\nimport { RouteLoction } from '../route-location/route-location'\nimport { RouteGuard } from '../route/route.guard'\nimport { SettingsModule } from '../settings/settings.module'\n\nconst routes: Routes = [\n  {\n    path: '',\n    pathMatch: 'full',\n    redirectTo: `${redirect() || 'en'}/${RouteLoction.Game}`\n  },\n  {\n    path: ':lang',\n    canActivate: [RouteGuard],\n    children: [\n      {\n        path: '',\n        pathMatch: 'full',\n        redirectTo: `${redirect() || 'en'}/${RouteLoction.Game}`\n      },\n      {\n        canDeactivate: [CanDeactivateGameGuard],\n        loadChildren: async (): Promise<typeof GameModule> => {\n          const m = await import('../game/game.module')\n          return m.GameModule\n        },\n        path: RouteLoction.Game\n      },\n      {\n        loadChildren: async (): Promise<typeof HighScoresModule> => {\n          const m = await import('../high-scores/high-scores.module')\n          return m.HighScoresModule\n        },\n        path: RouteLoction.HighScores\n      },\n      // {\n      //   loadChildren: async (): Promise<typeof LeaderboardModule> => {\n      //     const m = await import('../leaderboard/leaderboard.module')\n      //     return m.LeaderboardModule\n      //   },\n      //   path: RouteLoction.Leaderboard\n      // },\n      {\n        loadChildren: async (): Promise<typeof RecentScoresModule> => {\n          const m = await import('../recent-scores/recent-scores.module')\n          return m.RecentScoresModule\n        },\n        path: RouteLoction.RecentScores\n      },\n      {\n        loadChildren: async (): Promise<typeof SettingsModule> => {\n          const m = await import('../settings/settings.module')\n          return m.SettingsModule\n        },\n        path: RouteLoction.Settings\n      },\n      {\n        path: '**',\n        redirectTo: RouteLoction.Game\n      }\n    ]\n  },\n  {\n    path: '**',\n    redirectTo: `${redirect() || 'en'}/${RouteLoction.Game}`\n  }\n]\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class RootRoutingModule {}\n","import { CommonModule, registerLocaleData } from '@angular/common'\nimport { HttpClientModule } from '@angular/common/http'\nimport localeBn from '@angular/common/locales/bn'\nimport localeBnExtra from '@angular/common/locales/extra/bn'\nimport localeDe from '@angular/common/locales/de'\nimport localeDeExtra from '@angular/common/locales/extra/de'\nimport localeEn from '@angular/common/locales/en'\nimport localeEnExtra from '@angular/common/locales/extra/en'\nimport localeEs from '@angular/common/locales/es'\nimport localeEsExtra from '@angular/common/locales/extra/es'\nimport localeHi from '@angular/common/locales/hi'\nimport localeHiExtra from '@angular/common/locales/extra/hi'\nimport { NgModule } from '@angular/core'\nimport { FormsModule } from '@angular/forms'\nimport {\n  BrowserModule,\n  BrowserTransferStateModule\n} from '@angular/platform-browser'\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations'\nimport { RouterModule } from '@angular/router'\nimport { ServiceWorkerModule } from '@angular/service-worker'\nimport { TranslateModule, TranslateService } from '@ngx-translate/core'\n\nimport { RootComponent } from './root.component'\nimport { CheckForUpdateComponent } from '../check-for-update/check-for-update.component'\nimport { environment } from '../environments/environment'\nimport { InstallComponent } from '../install/install.component'\nimport { LanguageModule } from '../language/language.module'\nimport { LanguageService } from '../language/language.service'\nimport { MainMenuComponent } from '../main-menu/main-menu.component'\nimport { MaterialModule } from '../material/material.module'\nimport { redirect } from '../redirect/redirect'\nimport { RootRoutingModule } from '../root-routing/root-routing.module'\nimport {\n  ROUTE_TOKEN,\n  translateModuleOptions\n} from '../translate-loader/translate-browser.loader'\n\n/**\n * Entry Module\n */\n@NgModule({\n  declarations: [\n    CheckForUpdateComponent,\n    InstallComponent,\n    MainMenuComponent,\n    RootComponent\n  ],\n  imports: [\n    BrowserAnimationsModule,\n    BrowserModule.withServerTransition({ appId: 'MemoryGameApp' }),\n    BrowserTransferStateModule,\n    CommonModule,\n    FormsModule,\n    HttpClientModule,\n    MaterialModule,\n    RootRoutingModule,\n    RouterModule,\n    ServiceWorkerModule.register('./ngsw-worker.js', {\n      enabled: environment.production\n    }),\n    TranslateModule.forRoot(translateModuleOptions)\n  ],\n  providers: [{ provide: ROUTE_TOKEN, useValue: 'main' }],\n  entryComponents: [CheckForUpdateComponent, InstallComponent, RootComponent],\n  bootstrap: [RootComponent]\n})\n/**\n * Entry Module\n */\nexport class RootModule extends LanguageModule {\n  constructor(language: LanguageService, translate: TranslateService) {\n    super()\n\n    this.default(language, translate)\n    this.langChange(language, translate, 'RootModule')\n    this.registerLocaleData()\n    this.translateChange(language, translate)\n  }\n\n  private default(\n    language: LanguageService,\n    translate: TranslateService\n  ): void {\n    let lang: string\n\n    lang = redirect() || translate.getBrowserLang() || 'en'\n\n    translate.setDefaultLang(lang)\n    language.setLang(lang)\n  }\n\n  private registerLocaleData(): void {\n    registerLocaleData(localeBn, 'bn', localeBnExtra)\n    registerLocaleData(localeDe, 'de', localeDeExtra)\n    registerLocaleData(localeEn, 'en', localeEnExtra)\n    registerLocaleData(localeEs, 'es', localeEsExtra)\n    registerLocaleData(localeHi, 'hi', localeHiExtra)\n  }\n\n  private translateChange(\n    language: LanguageService,\n    translate: TranslateService\n  ): void {\n    translate.onLangChange.subscribe(\n      (val: {\n        lang: string\n        translations: { [key: string]: string }\n      }): void => {\n        language.setBrowser(\n          val.lang,\n          val.translations.TITLE,\n          val.translations.DESCRIPTION\n        )\n      }\n    )\n  }\n}\n","import {\n  ApplicationRef,\n  ComponentRef,\n  enableProdMode,\n  NgModuleRef\n} from '@angular/core'\nimport { enableDebugTools } from '@angular/platform-browser'\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic'\n\nimport { environment } from './environments/environment'\nimport { RootComponent } from './root/root.component'\nimport { RootModule } from './root/root.module'\n\nif (environment.production) {\n  enableProdMode()\n}\n\nwindow.document.addEventListener('DOMContentLoaded', (): void => {\n  window.requestAnimationFrame((): void => {\n    platformBrowserDynamic()\n      .bootstrapModule<RootModule>(RootModule)\n      .then((moduleRef: NgModuleRef<RootModule>): void => {\n        if (!environment.production) {\n          let appRef: ApplicationRef\n          let comRef: ComponentRef<RootComponent>\n\n          appRef = moduleRef.injector.get<ApplicationRef>(ApplicationRef)\n          comRef = appRef.components[0]\n\n          enableDebugTools(comRef)\n        }\n\n        if (environment.analytics) {\n          function createGoogleTag(\n            w: Window & typeof globalThis,\n            d: Document,\n            s: 'script',\n            l: 'dataLayer',\n            i: 'GTM-KWJDQHW'\n          ): void {\n            w[l] = w[l] || []\n            w[l].push({\n              'gtm.start': new Date().getTime(),\n              event: 'gtm.js'\n            })\n            let dl: string\n            let f: HTMLScriptElement\n            let j: HTMLScriptElement\n\n            f = d.getElementsByTagName<'script'>(s)[0]\n            j = d.createElement<'script'>(s)\n            dl = l !== 'dataLayer' ? '&l=' + l : ''\n            j.async = true\n            j.src = 'https://www.googletagmanager.com/gtm.js?id=' + i + dl\n            f.parentNode.insertBefore<HTMLScriptElement>(j, f)\n          }\n\n          createGoogleTag(\n            window,\n            document,\n            'script',\n            'dataLayer',\n            'GTM-KWJDQHW'\n          )\n        }\n      })\n      .catch<void>((error): void => {\n        console.error(error)\n      })\n  })\n})\n","module.exports = __webpack_public_path__ + \"root.f11baed73f20b044a6d0.worker.js\"","import { Constructor } from './constructor'\nimport { isNullOrUndefined } from './is-null-or-undefined'\n\n/**\n * Decorator Function for creating class property get and set for primitive types.\n *\n * ### Example:\n *\n * ```ts\n * export class MyClass {\n *   ＠MakeGetSet<MyClass, string>()\n *   public myProperty: string\n * }\n * ```\n *\n * ### Same as:\n *\n * ```ts\n * export class MyClass {\n *   private _myProperty: string\n *   public get myProperty(): string {\n *     return this._myProperty\n *   }\n *   public set myProperty(val: string) {\n *     this._myProperty = val\n *   }\n * }\n * ```\n */\nexport function MakeProperty<T, S>(): (target: T, key: string) => void\n/**\n * Decorator Function for creating class property get and set for `Model` types.\n *\n * Your `Model` should be able to handle zero or more constructor arguments.\n *\n * ### Example:\n *\n * ```ts\n * export class MyModel {\n *   prop1: string\n *   prop2: number\n *   constructor(arg1?: string, arg2?: number) {\n *     this.prop1 = arg1\n *     this.prop2 = arg2\n *   }\n * }\n * export class MyClass {\n *   ＠MakeGetSet<MyClass, MyModel>(MyModel)\n *   public myProperty: MyModel\n * }\n * ```\n *\n * ### Same as:\n *\n * ```ts\n * import { isNullOrUndefined } from '../utilities/is-null-or-undefined'\n * export class MyModel {\n *   prop1: string\n *   prop2: number\n *   constructor(arg1?: string, arg2?: number) {\n *     this.prop1 = arg1\n *     this.prop2 = arg2\n *   }\n * }\n * export class MyClass {\n *   private _myProperty: MyModel\n *   public get myProperty(): MyModel {\n *     if (isNullOrUndefined(this._myProperty)) {\n *       this.myProperty = null\n *     }\n *     return this._myProperty\n *   }\n *   public set myProperty(val: MyModel) {\n *     if (val instanceof MyModel) {\n *       this._myProperty = val\n *     } else if (Array.isArray(val)) {\n *       this._myProperty = new MyModel(...val)\n *     } else if (isNullOrUndefined(val)) {\n *       this._myProperty = new MyModel()\n *     } else {\n *       this._myProperty = new MyModel(val)\n *     }\n *   }\n * }\n * ```\n *\n * @param Model `S` - `Get` will return `Model`; `Set` will assign `Model`\n */\nexport function MakeProperty<T, S>(\n  Model: Constructor<S>\n): (target: T, key: string) => void\n/**\n * Decorator Function for creating class property get and set for primitive types.\n *\n * ### Example:\n *\n * ```ts\n * export class MyClass {\n *   ＠MakeGetSet<MyClass, string>(null, 'default')\n *   public myProperty: string\n * }\n * ```\n *\n * ### Same as:\n *\n * ```ts\n * import { isNullOrUndefined } from '../utilities/is-null-or-undefined'\n * export class MyClass {\n *   private _myProperty: string\n *   public get myProperty(): string {\n *     if (isNullOrUndefined(this._myProperty)) {\n *       this.myProperty = 'default'\n *     }\n *     return this._myProperty\n *   }\n *   public set myProperty(val: string) {\n *     this._myProperty = val\n *   }\n * }\n * ```\n *\n * @param Model is `null` to indicate primitives\n * @param base `any` default value for `get`\n */\nexport function MakeProperty<T, S>(\n  Model: null,\n  base: any\n): (target: T, key: string) => void\n/**\n * Decorator Function for creating class property get and set for `Model` types.\n *\n * Your `Model` should be able to handle zero or more constructor arguments.\n *\n * ### Example:\n *\n * ```ts\n * export class MyModel {\n *   prop1: string\n *   prop2: number\n *   constructor(arg1?: string, arg2?: number) {\n *     this.prop1 = arg1\n *     this.prop2 = arg2\n *   }\n * }\n * export class MyClass {\n *   ＠MakeGetSet<MyClass, MyModel>(MyModel, ['default', 10])\n *   public myProperty: MyModel\n * }\n * ```\n *\n * ### Same as:\n *\n * ```ts\n * import { isNullOrUndefined } from '../utilities/is-null-or-undefined'\n * export class MyModel {\n *   prop1: string\n *   prop2: number\n *   constructor(arg1?: string, arg2?: number) {\n *     this.prop1 = arg1\n *     this.prop2 = arg2\n *   }\n * }\n * export class MyClass {\n *   private _myProperty: MyModel\n *   public get myProperty(): MyModel {\n *     if (isNullOrUndefined(this._myProperty)) {\n *       this.myProperty = ['default', 10] // or\n *       this.myProperty = new MyModel('default', 10)\n *     }\n *     return this._myProperty\n *   }\n *   public set myProperty(val: MyModel) {\n *     if (val instanceof MyModel) {\n *       this._myProperty = val\n *     } else if (Array.isArray(val)) {\n *       this._myProperty = new MyModel(...val)\n *     } else if (isNullOrUndefined(val)) {\n *       this._myProperty = new MyModel()\n *     } else {\n *       this._myProperty = new MyModel(val)\n *     }\n *   }\n * }\n * ```\n *\n * @param Model `S` - `Get` will return `Model`; `Set` will assign `Model`\n * @param base `any` default value for `get`\n */\nexport function MakeProperty<T, S>(\n  Model: Constructor<S>,\n  base: any\n): (target: T, key: string) => void\n\nexport function MakeProperty<T, S>(\n  Model?: Constructor<S> | null,\n  base?: any\n): (target: T, key: string) => void {\n  return (target: T, key: string): void => {\n    //#region Create Writable\n    let backingField: string\n\n    backingField = '_' + key\n\n    Object.defineProperty(target, backingField, {\n      writable: true,\n      enumerable: true,\n      configurable: true\n    })\n    //#endregion Create Writable\n\n    let setter: (this: T, newVal: S) => void\n    let getter: (this: T) => S\n\n    if (isNullOrUndefined(Model)) {\n      if (isNullOrUndefined(base)) {\n        //#region Create Getter for Primitives without a default\n        // property getter\n        function primitiveGetter(this: T): S {\n          return this[backingField]\n        }\n\n        getter = primitiveGetter\n        //#endregion Create Getter for Primitives without a default\n      } else {\n        //#region Create Getter for Primitives with a default\n        // property getter\n        function primitiveGetter(this: T): S {\n          if (isNullOrUndefined(this[backingField])) {\n            this[key] = base\n          }\n\n          return this[backingField]\n        }\n\n        getter = primitiveGetter\n        //#endregion Create Getter for Primitives with a default\n      }\n\n      //#region Create Setter for Primitives\n      // property setter\n      function primitiveSetter(this: T, newVal: S): void {\n        this[backingField] = newVal\n      }\n\n      setter = primitiveSetter\n      //#endregion Create Setter for Primitives\n    } else {\n      //#region Create Getter for Models\n      // property getter\n      function typeGetter(this: T): S {\n        if (isNullOrUndefined(this[backingField])) {\n          this[key] = base\n        }\n\n        return this[backingField]\n      }\n\n      getter = typeGetter\n      //#endregion Create Getter for Models\n\n      //#region Create Setter for Models\n      // property setter\n      function typeSetter(this: T, newVal: S): void {\n        if (newVal instanceof Model) {\n          this[backingField] = newVal\n        } else if (Array.isArray(newVal)) {\n          this[backingField] = new Model(...newVal)\n        } else if (isNullOrUndefined(newVal)) {\n          this[backingField] = new Model()\n        } else {\n          this[backingField] = new Model(newVal)\n        }\n      }\n\n      setter = typeSetter\n      //#endregion Create Setter for Models\n    }\n\n    // Create new property with getter and setter\n    Object.defineProperty(target, key, {\n      get: getter,\n      set: setter,\n      enumerable: true,\n      configurable: true\n    })\n  }\n}\n","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"Rsp0\";","import { isPlatformBrowser } from '@angular/common'\nimport { Inject, Injectable, PLATFORM_ID } from '@angular/core'\nimport { BehaviorSubject } from 'rxjs'\n\nimport { ICard } from '../card/card.d'\nimport { GameService } from '../game/game.service'\nimport { isNullOrUndefined } from '../utilities/is-null-or-undefined'\nimport { MakeArray } from '../utilities/make-array'\nimport { MakeProperty } from '../utilities/make-property'\n\n/**\n * Create and make cards available.\n */\n@Injectable({\n  providedIn: 'root'\n})\n/**\n * Create and make cards available.\n */\nexport class CardsService {\n  /**\n   * The worker for generating a random deck of cards\n   */\n  private worker: Worker\n\n  //#region deck\n  /**\n   * Deck of cards.\n   */\n  @MakeArray<CardsService, ICard>()\n  public deck: ICard[]\n  //#endregion deck\n\n  //#region blank\n  /**\n   * Blank image card.\n   */\n  @MakeProperty<CardsService, string>(null, 'assets/regular/blank.png')\n  public blank: string\n  //#endregion blank\n\n  //#region white\n  /**\n   * White image card.\n   */\n  @MakeProperty<CardsService, string>(null, 'assets/white.png')\n  public white: string\n  //#endregion white\n\n  /**\n   * Refresh the cards.\n   */\n  public refresh: BehaviorSubject<'refresh'>\n\n  //#region constructor\n  constructor(\n    @Inject(PLATFORM_ID) private readonly platformId: string,\n    private game: GameService\n  ) {\n    this.refresh = new BehaviorSubject<'refresh'>('refresh')\n    this.registerWorker()\n  }\n  //#endregion constructor\n\n  /**\n   * register the worker\n   */\n  private registerWorker(): void {\n    if (isPlatformBrowser(this.platformId)) {\n      if (!isNullOrUndefined(Worker)) {\n        this.worker = new Worker('./worker/cards.worker', {\n          type: 'module',\n          name: 'cards'\n        })\n\n        this.worker.addEventListener(\n          'message',\n          (\n            event: MessageEvent<{\n              blank: string\n              deck: ICard[]\n              white: string\n            }>\n          ): void => {\n            this.blank = event.data.blank\n            this.deck = event.data.deck\n            // -- Use or not to use???\n            // .map<Card>(\n            //   (card: ICard): Card => {\n            //     return new Card(card)\n            //   }\n            // )\n            this.white = event.data.white\n            this.refresh.next('refresh')\n          }\n        )\n      }\n    }\n  }\n\n  //#region shuffle\n  /**\n   * Make a new deck.\n   */\n  public shuffle(): void {\n    if (isPlatformBrowser(this.platformId)) {\n      if (!isNullOrUndefined(Worker) && !isNullOrUndefined(this.worker)) {\n        this.worker.postMessage({\n          count: this.game.count.value,\n          match: this.game.match.value\n        })\n      }\n    }\n  }\n  //#endregion shuffle\n\n  //#region getCardBack\n  /**\n   * The back of the card to use based on the flip state.\n   *\n   * @param card `ICard` given card\n   */\n  public getCardBack(card: ICard): string {\n    if (card.flipped === 3 || card.flipped === 1 || card.flipped === 0) {\n      return this.blank\n    }\n    if (card.flipped === 4) {\n      return card.image\n    }\n    if (card.flipped === 2) {\n      return this.white\n    }\n    return this.blank\n  }\n  //#endregion getCardBack\n\n  //#region getCardImage\n  /**\n   * Return what image to use based on card flip state.\n   *\n   * @param card `ICard` given card\n   */\n  public getCardImage(card: ICard): string {\n    if (card.flipped === 4 || card.flipped === 3 || card.flipped === 1) {\n      return card.image\n    }\n    if (card.flipped === 2) {\n      return this.white\n    }\n    if (card.flipped === 0) {\n      return this.blank\n    }\n    return this.blank\n  }\n  //#endregion getCardImage\n}\n","import { Inject, Injectable, PLATFORM_ID } from '@angular/core'\n\nimport { AnalyticsService } from '../analytics/analytics.service'\nimport { DatabaseService } from '../database/database.service'\nimport { GameService } from '../game/game.service'\nimport { Score } from '../score/score'\n\n/**\n * Functionality for getting, adding, sorting, removing, and clearing for indexeddb and scores list.\n *\n * Store is `leaderboard`\n */\n@Injectable({\n  providedIn: 'root'\n})\n/**\n * Functionality for getting, adding, sorting, removing, and clearing for indexeddb and scores list.\n *\n * Store is `leaderboard`\n */\nexport class LeaderboardService extends Score {\n  /**\n   * Indexeddb Store Name = `leaderboard`\n   */\n  protected storeName: string = 'leaderboard'\n\n  constructor(\n    @Inject(PLATFORM_ID) readonly platformId: string,\n    analytics: AnalyticsService,\n    database: DatabaseService,\n    game: GameService\n  ) {\n    super(platformId, analytics, database, game)\n  }\n}\n","import { isPlatformBrowser } from '@angular/common'\nimport { Inject, Injectable, PLATFORM_ID } from '@angular/core'\nimport { MatSnackBar } from '@angular/material/snack-bar'\n\nimport { CheckForUpdateComponent } from '../check-for-update/check-for-update.component'\nimport { Setting } from '../setting/setting'\nimport { ISetting } from '../setting/setting.d'\nimport { Statistic } from '../statistic/statistic'\nimport { IStatistic } from '../statistic/statistic.d'\nimport { Time } from '../time/time'\nimport { ITime } from '../time/time.d'\n\n/**\n * Database and database creation.\n */\n@Injectable({\n  providedIn: 'root'\n})\n/**\n * Database and database creation.\n */\nexport class DatabaseService {\n  /**\n   * Database for indexddb\n   */\n  public database: IDBDatabase\n\n  /**\n   * Tell that the database is ready\n   */\n  public ready: boolean\n\n  constructor(\n    @Inject(PLATFORM_ID) readonly platformId: string,\n    private snackBar: MatSnackBar\n  ) {\n    if (isPlatformBrowser(platformId)) {\n      this.openDatabase(7)\n    }\n  }\n\n  private openDatabase(version: number): void {\n    this.open(version)\n      .then<void, never>((val: IDBDatabase): void => {\n        this.database = val\n        this.ready = true\n      })\n      .catch<void>((error: DOMException): void => {\n        console.error(error.message)\n      })\n  }\n\n  /**\n   * Create an object store if it doesn't exist.\n   *\n   * @param name `string` name of objectStore\n   * @param database `IDBDatabase` database to create object store on\n   */\n  private createObjectStore(name: string, database: IDBDatabase): void\n  /**\n   * Create an object store.\n   *\n   * @param name `string` name of objectStore\n   * @param database `IDBDatabase` database to create object store on\n   * @param warn `boolean` warn if the object store already exists\n   */\n  private createObjectStore(\n    name: string,\n    database: IDBDatabase,\n    warn: boolean\n  ): void\n  private createObjectStore(\n    arg1: string,\n    arg2: IDBDatabase,\n    arg3?: boolean\n  ): void {\n    if (!arg2.objectStoreNames.contains(arg1)) {\n      arg2.createObjectStore(arg1, {\n        keyPath: 'keyID',\n        autoIncrement: true\n      })\n    } else {\n      if (arg3 === true) {\n        console.warn('objectStore exists: ', arg1)\n      }\n    }\n  }\n\n  /**\n   * Open a connection, create a database and upgrade if needed\n   */\n  private open(version: number): Promise<IDBDatabase> {\n    return new Promise(\n      (\n        resolve: (value: IDBDatabase) => void,\n        reject: (reason: DOMException) => void\n      ): void => {\n        let request: IDBOpenDBRequest\n        let self: this\n\n        self = this\n\n        request = window.indexedDB.open('MemoryGame', version)\n\n        request.onerror = function (event: Event): void {\n          this.result.close()\n          reject(this.error)\n        }\n\n        request.onblocked = function (event: Event): void {\n          this.result.close()\n          console.log('blocked')\n          console.log(event)\n          console.log(this)\n        }\n\n        request.onsuccess = function (event: Event): void {\n          this.result.onversionchange = function (\n            event1: IDBVersionChangeEvent\n          ): void {\n            self.ready = false\n\n            console.log('versionchange')\n            console.log(event1)\n\n            self.snackBar\n              .openFromComponent(CheckForUpdateComponent, {\n                panelClass: 'snack-bar-reposition'\n              })\n              .onAction()\n              .subscribe((): void => {\n                window.document.location.reload()\n              })\n\n            this.close()\n          }\n\n          // tslint:disable-next-line: only-arrow-functions\n          this.result.onerror = function (event1: Event): void {\n            console.log('onerror')\n            console.log(event1)\n          }\n\n          // Doesn't appear to be called when closed\n          // tslint:disable-next-line: only-arrow-functions\n          this.result.onclose = function (event1: Event): void {\n            console.log('close')\n            console.log(event1)\n            self.ready = false\n          }\n\n          resolve(this.result)\n        }\n\n        request.onupgradeneeded = function (\n          event: IDBVersionChangeEvent\n        ): void {\n          let database: IDBDatabase\n          let newVersion: number\n          let request1: IDBOpenDBRequest\n          let promises: Promise<IDBValidKey[]>[]\n\n          database = this.result\n          newVersion = event.newVersion\n          request1 = event.target as IDBOpenDBRequest\n          promises = []\n\n          /**\n           * For Case 3 and Case 4.\n           *\n           * Update an object store.\n           *\n           * @param name `string` name of objectStore and storeName\n           */\n          function updateCase3vCase4(name: string): Promise<IDBValidKey[]> {\n            return new Promise(\n              (\n                resolve1: (value: IDBValidKey[]) => void,\n                reject1: (reason: DOMException) => void\n              ): void => {\n                let objectStore: IDBObjectStore\n                let request2: IDBRequest<IStatistic[]>\n\n                objectStore = database\n                  .transaction(name, 'readwrite')\n                  .objectStore(name)\n\n                request2 = objectStore.getAll()\n\n                request2.onerror = function (event1: Event): void {\n                  reject1(this.error)\n                }\n\n                request2.onsuccess = function (event1: Event): void {\n                  let promises1: Promise<IDBValidKey>[]\n\n                  promises1 = []\n\n                  this.result.forEach((res: IStatistic): void => {\n                    let promise: Promise<IDBValidKey>\n\n                    promise = new Promise(\n                      (\n                        resolve2: (value: IDBValidKey) => void,\n                        reject2: (reason: DOMException) => void\n                      ): void => {\n                        let json: IStatistic\n                        let statistic: Statistic\n                        let update: IDBRequest<IDBValidKey>\n\n                        res.count = 6\n                        res.match = 2\n                        res.mode = 'regular'\n                        res.complete = new Time(\n                          ((res as unknown) as ITime).milliseconds,\n                          ((res as unknown) as ITime).seconds,\n                          ((res as unknown) as ITime).minutes,\n                          ((res as unknown) as ITime).hours\n                        )\n                        res.memory = new Time()\n\n                        statistic = new Statistic(res)\n                        json = Statistic.toJSON(statistic)\n\n                        update = objectStore.put(json)\n\n                        update.onsuccess = function (event2: Event): void {\n                          resolve2(this.result)\n                        }\n\n                        update.onerror = function (event2: Event): void {\n                          reject2(this.error)\n                        }\n                      }\n                    )\n\n                    promises1.push(promise.catch(error => error))\n                  })\n\n                  Promise.all(promises1).then((val: IDBValidKey[]): void => {\n                    resolve1(val)\n                  })\n                }\n              }\n            )\n          }\n\n          /**\n           * For Case 3 and Case 4.\n           *\n           * Reuse complete listener for each objectStore update.\n           *\n           * Calls `updateCase3vCase4` and resolves/rejects\n           *\n           * @param name `string` name of objectStore and storeName\n           */\n          function completeCase3vCase4(name: string): Promise<IDBValidKey[]> {\n            return new Promise(\n              (\n                resolve1: (value: IDBValidKey[]) => void,\n                reject1: (reason: DOMException) => void\n              ): void => {\n                request1.transaction.addEventListener(\n                  'complete',\n                  (event1: Event): void => {\n                    updateCase3vCase4(name)\n                      .then((val: IDBValidKey[]): void => {\n                        resolve1(val)\n                      })\n                      .catch((error: DOMException): void => {\n                        reject1(error)\n                      })\n                  }\n                )\n              }\n            )\n          }\n\n          /**\n           * For Case 5.\n           *\n           * Update an object store.\n           *\n           * @param name `string` name of objectStore and storeName\n           */\n          function updateCase5(name: string): Promise<IDBValidKey[]> {\n            return new Promise(\n              (\n                resolve1: (value: IDBValidKey[]) => void,\n                reject1: (reason: DOMException) => void\n              ): void => {\n                let objectStore: IDBObjectStore\n                let request2: IDBRequest<ISetting[]>\n\n                objectStore = database\n                  .transaction(name, 'readwrite')\n                  .objectStore(name)\n\n                request2 = objectStore.getAll()\n\n                request2.onerror = function (event1: Event): void {\n                  reject1(this.error)\n                }\n\n                request2.onsuccess = function (event1: Event): void {\n                  let names: string[]\n                  let promises1: Promise<IDBValidKey>[]\n                  let result: ISetting[]\n\n                  result = this.result\n                  names = ['masterVolume', 'effectsVolume', 'ambientVolume']\n                  promises1 = names.reduce<Promise<IDBValidKey>[]>(\n                    (\n                      pv: Promise<IDBValidKey>[],\n                      cv: string\n                    ): Promise<IDBValidKey>[] => {\n                      let found: number\n\n                      found = result.findIndex((index: ISetting): boolean => {\n                        return index.key === cv\n                      })\n\n                      if (found === -1) {\n                        let promise: Promise<IDBValidKey>\n\n                        promise = new Promise(\n                          (\n                            resolve2: (value: IDBValidKey) => void,\n                            reject2: (reason: DOMException) => void\n                          ): void => {\n                            let json: ISetting\n                            let setting: Setting\n                            let add: IDBRequest<IDBValidKey>\n\n                            setting = new Setting(cv, 0.5)\n                            json = Setting.toJSON(setting)\n\n                            add = objectStore.add(json)\n\n                            add.onsuccess = function (event2: Event): void {\n                              resolve2(this.result)\n                            }\n\n                            add.onerror = function (event2: Event): void {\n                              reject2(this.error)\n                            }\n                          }\n                        )\n\n                        pv.push(promise.catch(error => error))\n                      }\n\n                      return pv\n                    },\n                    []\n                  )\n\n                  Promise.all(promises1).then((val: IDBValidKey[]): void => {\n                    resolve1(val)\n                  })\n                }\n              }\n            )\n          }\n\n          /**\n           * For Case 5.\n           *\n           * Reuse complete listener for each objectStore update.\n           *\n           * Calls `updateCase5` and resolves/rejects\n           *\n           * @param name `string` name of objectStore and storeName\n           */\n          function completeCase5(name: string): Promise<IDBValidKey[]> {\n            return new Promise(\n              (\n                resolve1: (value: IDBValidKey[]) => void,\n                reject1: (reason: DOMException) => void\n              ): void => {\n                request1.transaction.addEventListener(\n                  'complete',\n                  (event1: Event): void => {\n                    updateCase5(name)\n                      .then((val: IDBValidKey[]): void => {\n                        resolve1(val)\n                      })\n                      .catch((error: DOMException): void => {\n                        reject1(error)\n                      })\n                  }\n                )\n              }\n            )\n          }\n\n          /**\n           * For Case 6.\n           *\n           * Update an object store.\n           *\n           * @param name `string` name of objectStore and storeName\n           */\n          function updateCase6(name: string): Promise<IDBValidKey[]> {\n            return new Promise(\n              (\n                resolve1: (value: IDBValidKey[]) => void,\n                reject1: (reason: DOMException) => void\n              ): void => {\n                let objectStore: IDBObjectStore\n                let request2: IDBRequest<ISetting[]>\n\n                objectStore = database\n                  .transaction(name, 'readwrite')\n                  .objectStore(name)\n\n                request2 = objectStore.getAll()\n\n                request2.onerror = function (event1: Event): void {\n                  reject1(this.error)\n                }\n\n                request2.onsuccess = function (event1: Event): void {\n                  let names: string[]\n                  let promises1: Promise<IDBValidKey>[]\n                  let result: ISetting[]\n\n                  result = this.result\n                  names = ['count', 'match', 'mode']\n                  promises1 = names.reduce<Promise<IDBValidKey>[]>(\n                    (\n                      pv: Promise<IDBValidKey>[],\n                      cv: string\n                    ): Promise<IDBValidKey>[] => {\n                      let found: number\n\n                      found = result.findIndex((index: ISetting): boolean => {\n                        return index.key === cv\n                      })\n\n                      if (found === -1) {\n                        let promise: Promise<IDBValidKey>\n\n                        promise = new Promise(\n                          (\n                            resolve2: (value: IDBValidKey) => void,\n                            reject2: (reason: DOMException) => void\n                          ): void => {\n                            let json: ISetting\n                            let setting: Setting\n                            let add: IDBRequest<IDBValidKey>\n\n                            switch (cv) {\n                              case 'count':\n                              case 'match':\n                                setting = new Setting(cv, 2)\n                                break\n                              case 'mode':\n                                setting = new Setting(cv, 'regular')\n                                break\n                            }\n\n                            json = Setting.toJSON(setting)\n\n                            add = objectStore.add(json)\n\n                            add.onsuccess = function (event2: Event): void {\n                              resolve2(this.result)\n                            }\n\n                            add.onerror = function (event2: Event): void {\n                              reject2(this.error)\n                            }\n                          }\n                        )\n\n                        pv.push(promise.catch(error => error))\n                      }\n\n                      return pv\n                    },\n                    []\n                  )\n\n                  Promise.all(promises1).then((val: IDBValidKey[]): void => {\n                    resolve1(val)\n                  })\n                }\n              }\n            )\n          }\n\n          /**\n           * For Case 6.\n           *\n           * Reuse complete listener for each objectStore update.\n           *\n           * Calls `updateCase6` and resolves/rejects\n           *\n           * @param name `string` name of objectStore and storeName\n           */\n          function completeCase6(name: string): Promise<IDBValidKey[]> {\n            return new Promise(\n              (\n                resolve1: (value: IDBValidKey[]) => void,\n                reject1: (reason: DOMException) => void\n              ): void => {\n                request1.transaction.addEventListener(\n                  'complete',\n                  (event1: Event): void => {\n                    updateCase6(name)\n                      .then((val: IDBValidKey[]): void => {\n                        resolve1(val)\n                      })\n                      .catch((error: DOMException): void => {\n                        reject1(error)\n                      })\n                  }\n                )\n              }\n            )\n          }\n\n          database.onerror = function (event1: Event): void {\n            self.ready = false\n            console.log('error in upgrade')\n            console.log(event1)\n            console.log(this)\n          }\n\n          switch (event.oldVersion) {\n            case 0:\n              console.log('database upgrading to version 1')\n              self.createObjectStore('highScores', database, true)\n\n              if (newVersion === 1) {\n                break\n              }\n\n            case 1:\n              console.log('database upgrading to version 2')\n              self.createObjectStore('recentScores', database, true)\n\n              if (newVersion === 2) {\n                break\n              }\n\n            case 2:\n              console.log('database upgrading to version 3')\n              self.createObjectStore('leaderboard', database, true)\n\n              if (newVersion === 3) {\n                break\n              }\n\n            case 3:\n              console.log('database upgrading to version 4')\n              promises.push(\n                completeCase3vCase4('highScores').catch(error => error)\n              )\n\n              if (newVersion === 4) {\n                break\n              }\n\n            case 4:\n              console.log('database upgrading to version 5')\n              promises.push(\n                completeCase3vCase4('recentScores').catch(error => error)\n              )\n\n              if (newVersion === 5) {\n                break\n              }\n\n            case 5:\n              console.log('database upgrading to version 6')\n              self.createObjectStore('settings', database, true)\n              promises.push(completeCase5('settings').catch(error => error))\n\n              if (newVersion === 6) {\n                break\n              }\n\n            case 6:\n              console.log('database upgrading to version 7')\n              promises.push(completeCase6('settings').catch(error => error))\n\n              if (newVersion === 7) {\n                break\n              }\n          }\n\n          Promise.all(promises).then((value: IDBValidKey[][]): void => {\n            value.forEach((group: IDBValidKey[], index: number): void => {\n              if (group instanceof DOMException) {\n                if (index === 0) {\n                  console.error(`highScores error `, group)\n                } else if (index === 1) {\n                  console.error(`recentScores error `, group)\n                } else if (index === 2 || index === 3) {\n                  console.error(`settings error `, group)\n                }\n              } else {\n                group.forEach((key: IDBValidKey, index1: number): void => {\n                  if (key instanceof DOMException) {\n                    if (index === 0) {\n                      console.error(`highScores error at ${index1} `, key)\n                    } else if (index === 1) {\n                      console.error(`recentScores error at ${index1} `, key)\n                    } else if (index === 2 || index === 3) {\n                      console.error(`settings error at ${index1} `, key)\n                    }\n                  }\n                })\n              }\n            })\n          })\n        }\n      }\n    )\n  }\n}\n","import { isPlatformBrowser } from '@angular/common'\nimport { Inject, Injectable, PLATFORM_ID } from '@angular/core'\n\nimport { DatabaseService } from '../database/database.service'\nimport { GameService } from '../game/game.service'\nimport { Setting } from '../setting/setting'\nimport { ISetting } from '../setting/setting.d'\nimport { isNullOrUndefined } from '../utilities/is-null-or-undefined'\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class SettingsService {\n  /**\n   * Holder for `settings`\n   */\n  private _settings: Setting[]\n\n  /**\n   * Indexeddb Store Name\n   */\n  private storeName: string = 'settings'\n\n  /**\n   * List of settings.\n   */\n  public get settings(): Setting[] {\n    if (isNullOrUndefined(this._settings)) {\n      this._settings = []\n    } else if (!Array.isArray(this._settings)) {\n      this._settings = [this._settings]\n    }\n\n    return this._settings\n  }\n\n  constructor(\n    @Inject(PLATFORM_ID) readonly platformId: string,\n    private database: DatabaseService,\n    private game: GameService\n  ) {\n    if (isPlatformBrowser(platformId)) {\n      this.getSettings(0)\n    }\n  }\n\n  /**\n   * Get settings from indexeddb then update BehaviorSubjects.\n   *\n   * Only On Construction.\n   */\n  private getSettings(count: number): void {\n    if (isNullOrUndefined(count)) {\n      count = 0\n    }\n\n    if (count > 100) {\n      console.error('Database took too long to initialise')\n      return\n    }\n\n    this.getAll()\n      .then((val: Setting[]): void => {\n        val.forEach((item: Setting): void => {\n          this.addSetting(item)\n          this.game[item.key].next(item.value)\n        })\n      })\n      .catch((error: DOMException): void => {\n        if (error.message === 'Database not set') {\n          window.requestAnimationFrame((): void => {\n            this.getSettings(++count)\n          })\n        } else {\n          console.error(error.message)\n        }\n      })\n  }\n\n  private addSetting(setting: Setting): void {\n    this.settings.push(setting)\n  }\n\n  public put(name: string, value: number): Promise<IDBValidKey> {\n    return new Promise(\n      (\n        resolve: (value: IDBValidKey) => void,\n        reject: (reason: DOMException) => void\n      ): void => {\n        let found: number\n\n        found = this.settings.findIndex((setting: Setting): boolean => {\n          return setting.key === name\n        })\n\n        if (found === -1) {\n          reject(new DOMException(`Setting \"${name}\" not found`))\n          return\n        }\n\n        if (this.database.database && this.database.ready) {\n          let add: ISetting\n          let objectStore: IDBObjectStore\n          let request: IDBRequest<IDBValidKey>\n\n          this.settings[found].value = value\n\n          add = Setting.toJSON(this.settings[found])\n\n          objectStore = this.database.database\n            .transaction(this.storeName, 'readwrite')\n            .objectStore(this.storeName)\n\n          request = objectStore.put(add)\n\n          request.onsuccess = function (event: Event): void {\n            resolve(this.result)\n          }\n\n          request.onerror = function (event: Event): void {\n            reject(this.error)\n          }\n        } else {\n          let error: DOMException\n\n          error = new DOMException('Database not set')\n\n          reject(error)\n        }\n      }\n    )\n  }\n\n  /**\n   * Get from indexeddb.\n   * Resolve with Setting[].\n   * Reject with error.\n   */\n  private getAll(): Promise<Setting[]> {\n    return new Promise(\n      (\n        resolve: (value: Setting[]) => void,\n        reject: (reason: DOMException) => void\n      ): void => {\n        if (this.database.database && this.database.ready) {\n          let objectStore: IDBObjectStore\n          let request: IDBRequest<ISetting[]>\n\n          objectStore = this.database.database\n            .transaction('settings', 'readonly')\n            .objectStore('settings')\n\n          request = objectStore.getAll()\n\n          request.onerror = function (event: Event): void {\n            reject(this.error)\n          }\n\n          request.onsuccess = function (event: Event): void {\n            let result: Setting[]\n\n            result = this.result.map<Setting>(\n              (val: ISetting): Setting => {\n                return new Setting(val)\n              }\n            )\n\n            resolve(result)\n          }\n        } else {\n          let error: DOMException\n\n          error = new DOMException('Database not set')\n\n          reject(error)\n        }\n      }\n    )\n  }\n}\n","import { IDeviceSize } from './device-size.d'\nimport { MakeProperty } from '../utilities/make-property'\n\n/**\n * Device Height and Width.\n */\nexport class DeviceSize implements IDeviceSize {\n  /**\n   * Height\n   */\n  @MakeProperty(null, 0)\n  public height: number\n\n  /**\n   * Width\n   */\n  @MakeProperty(null, 0)\n  public width: number\n\n  /**\n   * Create `DeviceSize` by deviceSizeLike\n   *\n   * @param deviceSizeLike `IDeviceSize`\n   */\n  constructor(deviceSizeLike: IDeviceSize)\n  /**\n   * Create `DeviceSize` by deviceSize\n   *\n   * @param deviceSize `DeviceSize`\n   */\n  constructor(deviceSize: DeviceSize)\n  /**\n   * Create `DeviceSize` by height and width\n   *\n   * @param height `number\n   * @param width `number`\n   */\n  constructor(height: number, width: number)\n  constructor(arg1: number | DeviceSize | IDeviceSize, arg2?: number) {\n    if (typeof arg1 === 'number') {\n      this.height = arg1\n      this.width = arg2\n    } else {\n      this.height = arg1.height\n      this.width = arg1.width\n    }\n  }\n}\n","<span *ngIf=\"!forIOS\">{{ 'INSTALL_MEMORY_GAME' | translate }}</span>\n<span *ngIf=\"forIOS\">\n  {{ 'INSTALL_MEMORY_GAME' | translate }}{{ 'FULL_STOP' | translate }}\n  {{ 'TAP' | translate }}\n  <img src=\"assets/icons/Navigation_Action_2x.png\" />\n  {{ 'THEN' | translate }}\n  <b>\"{{ 'ADD_TO_HOME_SCREEN' | translate }}\"</b>\n</span>\n<div class=\"mat-simple-snackbar-action\">\n  <button\n    mat-button\n    (click)=\"dismiss(true)\"\n    [attr.aria-label]=\"'INSTALL' | translate\"\n    *ngIf=\"!forIOS\"\n  >\n    <mat-icon aria-hidden=\"false\">get_app</mat-icon>\n  </button>\n  <button\n    mat-button\n    (click)=\"dismiss(false)\"\n    [attr.aria-label]=\"'CLOSE' | translate\"\n  >\n    <mat-icon aria-hidden=\"false\">close</mat-icon>\n  </button>\n</div>\n","import { isPlatformBrowser } from '@angular/common'\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  HostBinding,\n  Inject,\n  PLATFORM_ID\n} from '@angular/core'\nimport { MatSnackBarRef } from '@angular/material/snack-bar'\n\n@Component({\n  selector: 'app-install',\n  templateUrl: './install.component.html',\n  styleUrls: ['./install.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class InstallComponent {\n  @HostBinding('class.mat-simple-snackbar') private get simple(): true {\n    return true\n  }\n\n  public get forIOS(): boolean {\n    if (isPlatformBrowser(this.platformId)) {\n      return (\n        (/iPhone|iPad|iPod/.test(window.navigator.platform) ||\n          (window.navigator.maxTouchPoints > 2 &&\n            /MacIntel/.test(window.navigator.platform))) &&\n        !/Chrome|CriOS|Firefox|FxiOS/.test(window.navigator.userAgent)\n      )\n    }\n\n    return false\n  }\n\n  constructor(\n    @Inject(PLATFORM_ID) private readonly platformId: string,\n    private snack: MatSnackBarRef<InstallComponent>\n  ) {}\n\n  public dismiss(withAction: boolean): void {\n    if (withAction) {\n      this.snack.dismissWithAction()\n    } else {\n      this.snack.dismiss()\n    }\n  }\n}\n","import { isPlatformBrowser } from '@angular/common'\nimport { Injectable, Inject, PLATFORM_ID } from '@angular/core'\nimport { MatSnackBar } from '@angular/material/snack-bar'\nimport { BehaviorSubject } from 'rxjs'\n\nimport { CheckForUpdateService } from '../check-for-update/check-for-update.service'\nimport { DeviceSize } from '../device-size/device-size'\nimport { InstallComponent } from '../install/install.component'\nimport { BeforeInstallPromptEvent } from '../polyfills/before-install-prompt.event'\n\n/**\n * Service for device information.\n */\n@Injectable({\n  providedIn: 'root'\n})\n/**\n * Service for device information.\n */\nexport class DeviceService {\n  /**\n   * Observable for focused/blurred application.\n   */\n  public active: BehaviorSubject<boolean>\n  /**\n   * Observable for device size.\n   */\n  public deviceScreen: BehaviorSubject<DeviceSize>\n\n  constructor(\n    @Inject(PLATFORM_ID) readonly platformId: string,\n    checkForUpdate: CheckForUpdateService,\n    snackBar: MatSnackBar\n  ) {\n    this.active = new BehaviorSubject<boolean>(true)\n    this.deviceScreen = new BehaviorSubject<DeviceSize>(new DeviceSize(0, 0))\n\n    if (isPlatformBrowser(platformId)) {\n      this.beforeunload()\n      this.createActiveListener()\n      this.createResizeListener()\n      this.emitResizeFirst()\n      this.install(snackBar, checkForUpdate)\n    }\n  }\n\n  /**\n   * Remove localstorage scroll when the app\n   * closes to prevent scrolling upon open.\n   */\n  private beforeunload(): void {\n    window.addEventListener(\n      'beforeunload',\n      (event: BeforeUnloadEvent): void => {\n        window.localStorage.removeItem('scroll')\n      }\n    )\n  }\n\n  /**\n   * Create listeners for if the window is focused or blurred.\n   */\n  private createActiveListener(): void {\n    window.addEventListener('blur', (event: FocusEvent) => {\n      this.active.next(false)\n    })\n    window.addEventListener('focus', (event: FocusEvent) => {\n      this.active.next(true)\n    })\n  }\n\n  /**\n   * Create a resize listener.\n   */\n  private createResizeListener(): void {\n    window.addEventListener(\n      'resize',\n      (event: UIEvent): void => {\n        let emit: DeviceSize\n        let height: number\n        let width: number\n\n        height = (event.target as Window).screen.height\n        width = (event.target as Window).screen.width\n        emit = new DeviceSize(height, width)\n\n        this.deviceScreen.next(emit)\n      },\n      false\n    )\n  }\n\n  /**\n   * The first size emitter.\n   */\n  private emitResizeFirst(): void {\n    let emit: DeviceSize\n    let height: number\n    let width: number\n\n    height = window.screen.height\n    width = window.screen.width\n    emit = new DeviceSize(height, width)\n\n    this.deviceScreen.next(emit)\n  }\n\n  /**\n   * Prompt to install the PWA\n   *\n   * @param snackBar `MatSnackBar` prompt\n   * @param checkForUpdate `CheckForUpdateService`\n   */\n  private install(\n    snackBar: MatSnackBar,\n    checkForUpdate: CheckForUpdateService\n  ): void {\n    if (isPlatformBrowser(this.platformId)) {\n      if ('onbeforeinstallprompt' in window) {\n        window.addEventListener(\n          'beforeinstallprompt',\n          (event: BeforeInstallPromptEvent): void => {\n            event.preventDefault()\n\n            let deferredPrompt: BeforeInstallPromptEvent\n\n            deferredPrompt = event\n\n            if (!checkForUpdate.updateAvailable) {\n              snackBar\n                .openFromComponent<InstallComponent>(InstallComponent, {\n                  panelClass: 'snack-bar-reposition'\n                })\n                .onAction()\n                .subscribe((): void => {\n                  deferredPrompt.prompt()\n                })\n            }\n          }\n        )\n      }\n\n      const standalone = 'standalone'\n\n      if (\n        !window.navigator[standalone] &&\n        (/iPhone|iPad|iPod/.test(window.navigator.platform) ||\n          (window.navigator.maxTouchPoints > 2 &&\n            /MacIntel/.test(window.navigator.platform))) &&\n        !/Chrome|CriOS|Firefox|FxiOS/.test(window.navigator.userAgent) &&\n        !checkForUpdate.updateAvailable\n      ) {\n        snackBar.openFromComponent<InstallComponent>(InstallComponent, {\n          panelClass: 'snack-bar-reposition'\n        })\n      }\n    }\n  }\n}\n","import { isPlatformBrowser } from '@angular/common'\nimport { Inject, Injectable, PLATFORM_ID } from '@angular/core'\n\nimport { IStatistic } from '../statistic/statistic.d'\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AnalyticsService {\n  constructor(@Inject(PLATFORM_ID) private readonly platformId: string) {}\n\n  /**\n   * @param event `string` name that is 'event'\n   * @param action `string` action that is 'send_score'\n   * @param params `IStatistic` parameters for the scores\n   */\n  public gtag(\n    event: 'event',\n    action: 'send_score',\n    params: IStatistic & { isHighScore?: boolean }\n  ): void\n  public gtag(): void {\n    if (isPlatformBrowser(this.platformId)) {\n      // tslint:disable-next-line: whitespace semicolon\n      ;(window as any).dataLayer = (window as any).dataLayer || []\n      // tslint:disable-next-line: whitespace semicolon\n      ;(window as any).dataLayer.push(arguments)\n    }\n  }\n}\n","import { ISetting } from './setting.d'\nimport { MakeProperty } from '../utilities/make-property'\nimport { isNullOrUndefined } from '../utilities/is-null-or-undefined'\n\n/**\n * Setting model for application.\n */\nexport class Setting implements ISetting {\n  /**\n   * KeyID\n   */\n  public keyID?: number\n\n  /**\n   * Key\n   */\n  @MakeProperty()\n  public key: string\n\n  /**\n   * Value\n   */\n  @MakeProperty()\n  public value: boolean | number | string\n\n  /**\n   * Create Setting model.\n   *\n   * @param setting `ISetting`\n   */\n  constructor(setting: ISetting)\n  /**\n   * Create Setting model.\n   *\n   * @param key `string` name of the setting\n   * @param value `boolean | number | string` value of the setting\n   */\n  constructor(key: string, value: boolean | number | string)\n  /**\n   * Create Setting model.\n   *\n   * @param key `string` name of the setting\n   * @param value `boolean | number | string` value of the setting\n   * @param keyID `number` KeyID\n   */\n  constructor(key: string, value: boolean | number | string, keyID: number)\n  constructor(\n    arg1: ISetting | string,\n    arg2?: boolean | number | string,\n    arg3?: number\n  ) {\n    if (typeof arg1 === 'string') {\n      this.key = arg1\n      this.value = arg2\n\n      if (typeof arg3 === 'number') {\n        this.keyID = arg3\n      }\n    } else {\n      this.key = arg1.key\n      this.value = arg1.value\n\n      if (typeof arg1.keyID === 'number') {\n        this.keyID = arg1.keyID\n      }\n    }\n  }\n\n  /**\n   * Convert Setting model to JSON.\n   *\n   * @param setting `ISetting`\n   */\n  static toJSON(setting: ISetting): ISetting {\n    let temp: ISetting\n\n    temp = {} as ISetting\n\n    temp.key = setting.key\n    temp.value = setting.value\n\n    if (!isNullOrUndefined(setting.keyID)) {\n      temp.keyID = setting.keyID\n    }\n\n    return temp\n  }\n}\n","import { isPlatformBrowser } from '@angular/common'\nimport { Inject, Injectable, PLATFORM_ID } from '@angular/core'\n\nimport { CheckForUpdateService } from '../check-for-update/check-for-update.service'\nimport { DatabaseService } from '../database/database.service'\nimport { DeviceService } from '../device/device.service'\nimport { LeaderboardService } from '../leaderboard/leaderboard.service'\nimport { GameService } from '../game/game.service'\nimport { HighScoresService } from '../high-scores/high-scores.service'\nimport { RecentScoresService } from '../recent-scores/recent-scores.service'\nimport { SettingsService } from '../settings/settings.service'\nimport { isNullOrUndefined } from '../utilities/is-null-or-undefined'\n\n/**\n * Background service simply used to gather injectables with no calls.\n */\n@Injectable({\n  providedIn: 'root'\n})\n/**\n * Background service simply used to gather injectables with no calls.\n */\nexport class BackgroundService {\n  constructor(\n    @Inject(PLATFORM_ID) readonly platformId: string,\n    checkForUpdate: CheckForUpdateService,\n    database: DatabaseService,\n    device: DeviceService,\n    game: GameService,\n    highScores: HighScoresService,\n    leaderboard: LeaderboardService,\n    recentScores: RecentScoresService,\n    settings: SettingsService\n  ) {\n    this.webWorker(platformId)\n  }\n\n  private webWorker(platformId: string): void {\n    if (isPlatformBrowser(platformId)) {\n      if (!isNullOrUndefined(Worker)) {\n        let worker: Worker\n\n        worker = new Worker('../root/root.worker', {\n          type: 'module',\n          name: 'root'\n        })\n\n        worker.onmessage = (event: MessageEvent): void => {\n          console.log(`page got message: \"${event.data}\"`)\n        }\n\n        worker.postMessage('Hello!')\n      }\n    }\n  }\n}\n","import { isNull } from './is-null'\nimport { isUndefined } from './is-undefined'\n\n/**\n * Check if a value is null or undefined.\n *\n * Examples:\n *\n * ```ts\n * isNullOrUndefined('Text here') // returns false\n * isNullOrUndefined(null) // returns true\n * isNullOrUndefined() // returns true\n * isNullOrUndefined(undefined) // returns true\n * ```\n *\n * @param arg `any` value to check if undefined\n */\nexport function isNullOrUndefined(arg?: any): boolean {\n  if (isNull(arg) || isUndefined(arg)) {\n    return true\n  }\n\n  return false\n}\n","/**\n * Check if a value is null.\n *\n * Examples:\n *\n * ```ts\n * isNull('Text here') // returns false\n * isNull() // returns false\n * isNull(undefined) // returns false\n * isNull(null) // returns true\n * ```\n *\n * @param arg `any` value to check if null\n */\nexport function isNull(arg?: any): boolean {\n  if (arg === null) {\n    return true\n  }\n\n  return false\n}\n","/**\n * Check if a value is undefined.\n *\n * Examples:\n *\n * ```ts\n * isUndefined('Text here') // returns false\n * isUndefined(null) // returns false\n * isUndefined() // returns true\n * isUndefined(undefined) // returns true\n * ```\n *\n * @param arg `any` value to check if undefined\n */\nexport function isUndefined(arg?: any): boolean {\n  if (arg === undefined) {\n    return true\n  }\n\n  return false\n}\n","module.exports = __webpack_public_path__ + \"cards.9b2512cb716ffbaf7c47.worker.js\"","import { Time } from '../time/time'\n\n/**\n * Combine time of `hours`, `minutes`, `seconds`, `milliseconds` for comparison.\n *\n * @param time `Time`\n */\nexport function createTime(time: Time): number {\n  let result: number\n\n  result =\n    (time.milliseconds || 0) +\n    (time.seconds || 0) * 1000 +\n    (time.minutes || 0) * 60 * 1000 +\n    (time.hours || 0) * 60 * 60 * 1000\n\n  return result\n}\n","import { isPlatformBrowser } from '@angular/common'\nimport { EventEmitter, Inject, PLATFORM_ID } from '@angular/core'\n\nimport { AnalyticsService } from '../analytics/analytics.service'\nimport { createTime } from '../create-time/create-time'\nimport { DatabaseService } from '../database/database.service'\nimport { GameService } from '../game/game.service'\nimport { Statistic } from '../statistic/statistic'\nimport { Count, IStatistic, Match, Mode } from '../statistic/statistic.d'\nimport { isNullOrUndefined } from '../utilities/is-null-or-undefined'\n\n/**\n * Functionality for getting, adding, sorting, removing, and clearing\n * for indexeddb and scores list.\n */\nexport abstract class Score {\n  /**\n   * Holder for `scores`\n   */\n  private _scores: Statistic[]\n\n  /**\n   * Indexeddb Store Name\n   */\n  protected storeName: string = 'defaultStore'\n\n  /**\n   * Emit a data change for material table.\n   */\n  public dataChange: EventEmitter<string>\n\n  /**\n   * List of scores.\n   */\n  public get scores(): Statistic[] {\n    if (isNullOrUndefined(this._scores)) {\n      this._scores = []\n    } else if (!Array.isArray(this._scores)) {\n      this._scores = [this._scores]\n    }\n\n    return this._scores\n  }\n\n  constructor(\n    @Inject(PLATFORM_ID) readonly platformId: string,\n    protected analytics: AnalyticsService,\n    protected database: DatabaseService,\n    protected game: GameService\n  ) {\n    this.dataChange = new EventEmitter<string>()\n\n    if (isPlatformBrowser(platformId)) {\n      this.getScores(0)\n    }\n  }\n\n  /**\n   * Get scores by game type\n   *\n   * @param count `Count` number of card matches\n   * @param match `Match` number of cards to match\n   * @param mode `Mode` mode of game\n   */\n  public getScoresBy(count: Count, match: Match, mode: Mode): Statistic[] {\n    return this.scores.filter((score: Statistic): boolean => {\n      return (\n        score.count === count && score.match === match && score.mode === mode\n      )\n    })\n  }\n\n  /**\n   * CompareFn for Statistic[] sort to order by \"weight\"\n   *\n   * @param a `Statistic` compare a\n   * @param b `Statistic` compare b\n   */\n  private compare(a: Statistic, b: Statistic): 1 | -1 | 0 {\n    let aTime: number\n    let bTime: number\n    let aWeight: number\n    let bWeight: number\n\n    aTime = createTime(a.complete)\n    bTime = createTime(b.complete)\n\n    aWeight = a.flips * aTime\n    bWeight = b.flips * bTime\n\n    if (aWeight > bWeight) {\n      return 1\n    }\n    if (aWeight < bWeight) {\n      return -1\n    }\n\n    if (a.flips > b.flips) {\n      return 1\n    }\n    if (a.flips < b.flips) {\n      return -1\n    }\n\n    if (aTime > bTime) {\n      return -1\n    }\n    if (aTime < bTime) {\n      return 1\n    }\n\n    return 0\n  }\n\n  /**\n   * Sort scores by best score.\n   */\n  public sort(): Statistic[]\n  /**\n   * Sort scores by best score.\n   *\n   * @param statistics `Statistic[]` sort the provided statistics array\n   */\n  public sort(statistics: Statistic[]): Statistic[]\n  public sort(arg1?: Statistic[]): Statistic[] {\n    if (isNullOrUndefined(arg1)) {\n      return this.scores.sort(this.compare)\n    } else {\n      return arg1.sort(this.compare)\n    }\n  }\n\n  /**\n   * Get scores from indexeddb then push them to scores list.\n   *\n   * Only On Construction.\n   *\n   * @param count `number` indicator of self call position < 10 otherwise throw error\n   */\n  private getScores(count: number): void {\n    if (isNullOrUndefined(count)) {\n      count = 0\n    }\n\n    if (count > 100) {\n      console.error('Database took too long to initialise')\n      return\n    }\n\n    this.getAll()\n      .then((val: Statistic[]): void => {\n        val.forEach((item: Statistic): void => {\n          this.addScoreStatistic(item)\n        })\n\n        this.dataChange.emit('getAll')\n      })\n      .catch((error: DOMException): void => {\n        if (error.message === 'Database not set') {\n          window.requestAnimationFrame((): void => {\n            this.getScores(++count)\n          })\n        } else {\n          console.error(error.message)\n        }\n      })\n  }\n\n  /**\n   * Append statistic to the scores list.\n   *\n   * @param statistic `Statistic` to add to scores list\n   */\n  public addScoreStatistic(statistic: Statistic): void {\n    this.scores.push(statistic)\n  }\n\n  /**\n   * Clear scores list.\n   */\n  public clearScores(): void {\n    this.scores.splice(0, this.scores.length)\n  }\n\n  /**\n   * Get from indexeddb.\n   * Resolve with Statistic[].\n   * Reject with error.\n   */\n  private getAll(): Promise<Statistic[]> {\n    return new Promise(\n      (\n        resolve: (value: Statistic[]) => void,\n        reject: (reason: DOMException) => void\n      ): void => {\n        if (this.database.database && this.database.ready) {\n          let objectStore: IDBObjectStore\n          let request: IDBRequest<IStatistic[]>\n\n          objectStore = this.database.database\n            .transaction(this.storeName, 'readonly')\n            .objectStore(this.storeName)\n\n          request = objectStore.getAll()\n\n          request.onerror = function (event: Event): void {\n            reject(this.error)\n          }\n\n          request.onsuccess = function (event: Event): void {\n            let result: Statistic[]\n\n            result = this.result.map<Statistic>(\n              (val: IStatistic): Statistic => {\n                return new Statistic(val)\n              }\n            )\n\n            resolve(result)\n          }\n        } else {\n          let error: DOMException\n\n          error = new DOMException('Database not set')\n\n          reject(error)\n        }\n      }\n    )\n  }\n\n  /**\n   * Add to indexeddb.\n   * Resolve with keyID.\n   * Reject with error.\n   *\n   * @param statistic `Statistic` to add to indexeddb\n   */\n  public add(statistic: Statistic): Promise<Statistic> {\n    let gameState: Statistic[]\n    let self: this\n    let shouldAdd: boolean\n\n    gameState = this.getScoresBy(\n      statistic.count,\n      statistic.match,\n      statistic.mode\n    )\n\n    if (gameState.length < 10) {\n      shouldAdd = true\n      this.addScoreStatistic(statistic)\n    } else {\n      if (this.storeName === 'recentScores') {\n        shouldAdd = true\n        this.addScoreStatistic(statistic)\n      } else {\n        gameState = this.sort(gameState)\n\n        let gameStateWeight: number\n        let statisticWeight: number\n\n        gameStateWeight = createTime(gameState[9].complete) * gameState[9].flips\n        statisticWeight = createTime(statistic.complete) * statistic.flips\n\n        if (gameStateWeight > statisticWeight) {\n          shouldAdd = true\n          this.addScoreStatistic(statistic)\n        } else {\n          shouldAdd = false\n        }\n      }\n    }\n\n    self = this\n\n    return new Promise(\n      (\n        resolve: (value: Statistic) => void,\n        reject: (reason: DOMException) => void\n      ): void => {\n        if (!shouldAdd) {\n          if (this.storeName === 'highScores') {\n            self.analytics.gtag('event', 'send_score', {\n              ...Statistic.toJSON(statistic),\n              isHighScore: false\n            })\n          }\n\n          resolve(statistic)\n\n          return\n        }\n\n        if (this.database.database && this.database.ready) {\n          let add: IStatistic\n          let objectStore: IDBObjectStore\n          let request: IDBRequest<IDBValidKey>\n\n          add = Statistic.toJSON(statistic)\n\n          objectStore = this.database.database\n            .transaction(this.storeName, 'readwrite')\n            .objectStore(this.storeName)\n\n          request = objectStore.add(add)\n\n          request.onsuccess = function (event: Event): void {\n            if (self.storeName === 'highScores') {\n              self.analytics.gtag('event', 'send_score', {\n                ...add,\n                isHighScore: false\n              })\n            }\n\n            statistic.keyID = this.result as number\n\n            self.dataChange.emit('add')\n\n            resolve(statistic)\n          }\n\n          request.onerror = function (event: Event): void {\n            reject(this.error)\n          }\n        } else {\n          let error: DOMException\n\n          error = new DOMException('Database not set')\n\n          reject(error)\n        }\n      }\n    )\n  }\n\n  /**\n   * Clear indexeddb.\n   * Resolve with undefined.\n   * Reject with error.\n   */\n  public clear(): Promise<void> {\n    let self: this\n\n    this.clearScores()\n\n    self = this\n\n    return new Promise(\n      (\n        resolve: (value: void) => void,\n        reject: (reason: DOMException) => void\n      ): void => {\n        if (this.database.database && this.database.ready) {\n          let objectStore: IDBObjectStore\n          let request: IDBRequest<undefined>\n\n          objectStore = this.database.database\n            .transaction(this.storeName, 'readwrite')\n            .objectStore(this.storeName)\n\n          request = objectStore.clear()\n\n          request.onsuccess = function (event: Event): void {\n            self.dataChange.emit('clear')\n\n            resolve(this.result)\n          }\n\n          request.onerror = function (event: Event): void {\n            reject(this.error)\n          }\n        } else {\n          let error: DOMException\n\n          error = new DOMException('Database not set')\n\n          reject(error)\n        }\n      }\n    )\n  }\n\n  /**\n   * Delete from indexeddb.\n   * Resolve with undefined.\n   * Reject with error.\n   *\n   * @param key `number` to remove from indexeddb\n   */\n  public delete(key: number): Promise<undefined> {\n    let self: this\n\n    self = this\n\n    return new Promise(\n      (\n        resolve: (value: undefined) => void,\n        reject: (reason: DOMException) => void\n      ): void => {\n        if (this.database.database && this.database.ready) {\n          let objectStore: IDBObjectStore\n          let request: IDBRequest<undefined>\n\n          objectStore = this.database.database\n            .transaction(this.storeName, 'readwrite')\n            .objectStore(this.storeName)\n\n          request = objectStore.delete(key)\n\n          request.onsuccess = function (event: Event): void {\n            self.dataChange.emit('delete')\n\n            resolve(this.result)\n          }\n\n          request.onerror = function (event: Event): void {\n            reject(this.error)\n          }\n        } else {\n          let error: DOMException\n\n          error = new DOMException('Database not set')\n\n          reject(error)\n        }\n      }\n    )\n  }\n}\n","import { HttpClient } from '@angular/common/http'\nimport { InjectionToken } from '@angular/core'\nimport {\n  MissingTranslationHandler,\n  MissingTranslationHandlerParams,\n  TranslateLoader,\n  TranslateModuleConfig,\n  TranslateService\n} from '@ngx-translate/core'\nimport { TranslateHttpLoader } from '@ngx-translate/http-loader'\nimport { Observable, Subscriber, Subscription } from 'rxjs'\n\nexport const ROUTE_TOKEN: InjectionToken<string> = new InjectionToken<string>(\n  'ROUTE_TOKEN'\n)\n\nexport function translateBrowserLoaderFactory(\n  httpClient: HttpClient,\n  route: string\n): TranslateHttpLoader {\n  return new TranslateHttpLoader(httpClient, `assets/i18n/${route}/`, '.json')\n}\n\nexport class MissingBrowserTranslateHandler\n  implements MissingTranslationHandler {\n  private getTranslation(\n    key: string,\n    lang: string,\n    translate: TranslateService\n  ): Observable<string> {\n    return new Observable<string>((subscriber: Subscriber<string>): void => {\n      let fetcher: Subscription\n\n      subscriber.next(key)\n\n      fetcher = translate.getTranslation(lang).subscribe(\n        (val: { [key: string]: string }): void => {\n          translate.use(lang)\n\n          if (val[key]) {\n            subscriber.next(val[key])\n          }\n        },\n        (): void => {\n          subscriber.error(`Translation for ${key} in ${lang} not found`)\n        },\n        (): void => {\n          subscriber.complete()\n\n          if (fetcher && fetcher instanceof Subscription) {\n            fetcher.unsubscribe()\n          }\n\n          if (subscriber) {\n            subscriber.unsubscribe()\n          }\n        }\n      )\n    })\n  }\n\n  public handle(params: MissingTranslationHandlerParams): Observable<string> {\n    let lang: string\n\n    lang =\n      params?.translateService?.currentLang ||\n      params?.translateService?.defaultLang ||\n      params?.translateService?.getBrowserLang() ||\n      'en'\n\n    return this.getTranslation(params.key, lang, params.translateService)\n  }\n}\n\nexport const translateModuleOptions: TranslateModuleConfig = {\n  extend: true,\n  isolate: false,\n  loader: {\n    provide: TranslateLoader,\n    useFactory: translateBrowserLoaderFactory,\n    deps: [HttpClient, ROUTE_TOKEN]\n  },\n  missingTranslationHandler: {\n    provide: MissingTranslationHandler,\n    useClass: MissingBrowserTranslateHandler\n  },\n  useDefaultLang: true\n}\n","import { NgModule } from '@angular/core'\nimport { MatButtonModule } from '@angular/material/button'\nimport { MatCardModule } from '@angular/material/card'\nimport { MatRippleModule } from '@angular/material/core'\nimport { MatDialogModule } from '@angular/material/dialog'\nimport { MatGridListModule } from '@angular/material/grid-list'\nimport { MatIconModule } from '@angular/material/icon'\nimport { MatSelectModule } from '@angular/material/select'\nimport { MatSliderModule } from '@angular/material/slider'\nimport { MatSnackBarModule } from '@angular/material/snack-bar'\nimport { MatTableModule } from '@angular/material/table'\n\n/**\n * Module to export used Material modules\n */\n@NgModule({\n  exports: [\n    MatButtonModule,\n    MatCardModule,\n    MatDialogModule,\n    MatGridListModule,\n    MatIconModule,\n    MatRippleModule,\n    MatSelectModule,\n    MatSliderModule,\n    MatSnackBarModule,\n    MatTableModule\n  ]\n})\n/**\n * Module to export used Material modules\n */\nexport class MaterialModule {}\n","import { HttpClient } from '@angular/common/http'\nimport { Injectable } from '@angular/core'\nimport { BehaviorSubject } from 'rxjs'\nimport { shareReplay } from 'rxjs/operators'\n\nimport { Count, Match, Mode } from '../statistic/statistic.d'\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class GameService {\n  /**\n   * Unique cards of the game\n   *\n   * * 2\n   * * 4\n   * * 6\n   */\n  public count: BehaviorSubject<Count>\n\n  /**\n   * Flip first then start\n   *\n   * * 'memorize'\n   *\n   * Regular type of matching\n   *\n   * * 'regular'\n   */\n  public mode: BehaviorSubject<Mode>\n\n  /**\n   * Cards to match during flips\n   *\n   * * 2\n   * * 3\n   * * 4\n   */\n  public match: BehaviorSubject<Match>\n\n  /**\n   * Is game playing or not\n   */\n  public playing: BehaviorSubject<boolean>\n\n  /**\n   * Master Volume level\n   */\n  public masterVolume: BehaviorSubject<number>\n\n  /**\n   * Effects Volume level\n   */\n  public effectsVolume: BehaviorSubject<number>\n\n  /**\n   * Ambient Volume level\n   */\n  public ambientVolume: BehaviorSubject<number>\n\n  constructor(private httpClient: HttpClient) {\n    this.count = new BehaviorSubject<Count>(2)\n    this.match = new BehaviorSubject<Match>(2)\n    this.mode = new BehaviorSubject<Mode>('regular')\n    this.playing = new BehaviorSubject<boolean>(false)\n    this.masterVolume = new BehaviorSubject<number>(0)\n    this.effectsVolume = new BehaviorSubject<number>(0)\n    this.ambientVolume = new BehaviorSubject<number>(0)\n  }\n\n  /**\n   * Click sound buffer\n   */\n  public clickSoundBuffer(): Promise<ArrayBuffer> {\n    return new Promise(\n      (\n        resolve: (value?: ArrayBuffer) => void,\n        reject: (reason?: any) => void\n      ): void => {\n        this.httpClient\n          .get('assets/audio/click.mp3', {\n            responseType: 'arraybuffer'\n          })\n          .pipe(shareReplay(1))\n          .subscribe(\n            (res: ArrayBuffer): void => {\n              resolve(res)\n            },\n            (error): void => {\n              reject(error)\n            }\n          )\n      }\n    )\n  }\n}\n","import { DOCUMENT, isPlatformBrowser } from '@angular/common'\nimport { Inject, Injectable, PLATFORM_ID } from '@angular/core'\nimport { TranslateService } from '@ngx-translate/core'\nimport { BehaviorSubject } from 'rxjs'\n\nimport { MakeArray } from '../utilities/make-array'\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class LanguageService {\n  /**\n   * State of the application language.\n   *\n   * Default: 'en'\n   */\n  public lang: BehaviorSubject<string>\n\n  @MakeArray<LanguageService, string>() public supported: string[]\n  @MakeArray<LanguageService, string>() public description: string[]\n\n  constructor(\n    @Inject(PLATFORM_ID) private readonly platformId: string,\n    @Inject(DOCUMENT) private document: Document,\n    translate: TranslateService\n  ) {\n    this.lang = new BehaviorSubject<string>(translate.getDefaultLang())\n    this.supported = ['bn', 'en']\n    this.description = ['বাংলা', 'English']\n  }\n\n  /**\n   * If the application is \"browser\" based set the language, title and description.\n   *\n   * @param lang `string` the language to set\n   * @param title `string` the title of the application to set\n   * @param description `string` the description of the application to set\n   */\n  public setBrowser(lang: string, title: string, description: string): void {\n    if (isPlatformBrowser(this.platformId)) {\n      let html: HTMLElement\n\n      html = this.document.documentElement\n\n      html.lang = lang\n      html.querySelector<HTMLTitleElement>('title').innerText = title\n      html.querySelector<HTMLMetaElement>(\n        'meta[name=\"description\"]'\n      ).content = description\n      html.querySelector<HTMLLinkElement>(\n        'link[rel=\"manifest\"]'\n      ).href = `manifest.${lang}.webmanifest`\n    }\n  }\n\n  /**\n   * Update the emitter with the new language.\n   *\n   * @param lang `string` the new language\n   */\n  public setLang(lang: string): void {\n    this.lang.next(lang)\n  }\n}\n","export enum RouteLoction {\n  Game = 'game',\n  HighScores = 'high-scores',\n  Leaderboard = 'leaderboard',\n  RecentScores = 'recent-scores',\n  Settings = 'settings'\n}\n","import { isPlatformBrowser } from '@angular/common'\nimport { ApplicationRef, Inject, Injectable, PLATFORM_ID } from '@angular/core'\nimport { MatSnackBar } from '@angular/material/snack-bar'\nimport {\n  SwUpdate,\n  UpdateActivatedEvent,\n  UpdateAvailableEvent\n} from '@angular/service-worker'\nimport { concat, interval, Observable } from 'rxjs'\nimport { first, take } from 'rxjs/operators'\n\nimport { CheckForUpdateComponent } from './check-for-update.component'\nimport { environment } from '../environments/environment'\n\n/**\n * Check for app updates.\n */\n@Injectable({\n  providedIn: 'root'\n})\n/**\n * Check for app updates.\n */\nexport class CheckForUpdateService {\n  public updateAvailable: boolean\n\n  constructor(\n    @Inject(PLATFORM_ID) readonly platformId: string,\n    appRef: ApplicationRef,\n    snackBar: MatSnackBar,\n    update: SwUpdate\n  ) {\n    if (\n      isPlatformBrowser(platformId) &&\n      environment.production &&\n      update.isEnabled\n    ) {\n      this.available(update, snackBar)\n\n      this.activated(update)\n\n      this.timer(appRef, update)\n    }\n  }\n\n  /**\n   * Subscribe and notify when there's an available update.\n   *\n   * @param update `SwUpdate`\n   * @param snackBar `MatSnackBar`\n   */\n  private available(update: SwUpdate, snackBar: MatSnackBar): void {\n    update.available.subscribe((event: UpdateAvailableEvent): void => {\n      this.notify(snackBar, update)\n    })\n  }\n\n  /**\n   * Log currently activated.\n   *\n   * @param update `SwUpdate`\n   */\n  private activated(update: SwUpdate): void {\n    update.activated.subscribe((event: UpdateActivatedEvent): void => {\n      if (event) {\n        this.previous(event)\n        this.current(event)\n      }\n    })\n  }\n\n  /**\n   * Activate an update and reload if requested.\n   *\n   * @param update `SwUpdate`\n   * @param reload `boolean`\n   */\n  private activateUpdate(update: SwUpdate, reload: boolean): void {\n    update\n      .activateUpdate()\n      .then<void, never>((): void => {\n        if (reload) {\n          interval(500)\n            .pipe<number>(take<number>(1))\n            .subscribe((val: number): void => {\n              window.document.location.reload()\n            })\n        }\n      })\n      .catch<void>((error): void => {\n        console.error(error)\n      })\n  }\n\n  /**\n   * Check for update then activate.\n   *\n   * @param update `SwUpdate`\n   */\n  private checkForUpdate(update: SwUpdate): void {\n    update.checkForUpdate().catch((e): void => {\n      console.error(e)\n    })\n  }\n\n  /**\n   * Log Current.\n   *\n   * @param event `UpdateActivatedEvent`\n   */\n  private current(event: UpdateActivatedEvent): void {\n    if (event.current) {\n      console.log('CURRENT')\n      if (event.current.appData) {\n        console.log(event.current.appData)\n      }\n      if (event.current.hash) {\n        console.log(event.current.hash)\n      }\n    }\n  }\n\n  /**\n   * Notify using `MatSnackBar` and reload on snackBar action.\n   *\n   * @param snackBar `MatSnackBar`\n   * @param update `SwUpdate`\n   */\n  private notify(snackBar: MatSnackBar, update: SwUpdate): void {\n    this.updateAvailable = true\n\n    snackBar\n      .openFromComponent(CheckForUpdateComponent, {\n        panelClass: 'snack-bar-reposition'\n      })\n      .onAction()\n      .subscribe((): void => {\n        this.activateUpdate(update, true)\n      })\n  }\n\n  /**\n   * Log previous.\n   *\n   * @param event `UpdateActivatedEvent`\n   */\n  private previous(event: UpdateActivatedEvent): void {\n    if (event.previous) {\n      console.log('PREVIOUS')\n      if (event.previous.appData) {\n        console.log(event.previous.appData)\n      }\n      if (event.previous.hash) {\n        console.log(event.previous.hash)\n      }\n    }\n  }\n\n  /**\n   * Start a timer for checking updates once the app is stable.\n   *\n   * @param appRef `ApplicationRef`\n   * @param update `SwUpdate`\n   */\n  private timer(appRef: ApplicationRef, update: SwUpdate): void {\n    let appIsStable$: Observable<boolean>\n    let everySixHours$: Observable<number>\n    let everySixHoursOnceAppIsStable$: Observable<number | boolean>\n\n    appIsStable$ = appRef.isStable.pipe<boolean>(\n      first<boolean, boolean>((isStable: boolean): boolean => {\n        return isStable === true\n      })\n    )\n\n    everySixHours$ = interval(6 * 60 * 60 * 1000)\n    everySixHoursOnceAppIsStable$ = concat<\n      Observable<boolean>,\n      Observable<number>\n    >(appIsStable$, everySixHours$)\n\n    everySixHoursOnceAppIsStable$.subscribe((val: number | boolean): void => {\n      this.checkForUpdate(update)\n    })\n  }\n}\n"],"sourceRoot":"webpack:///"}